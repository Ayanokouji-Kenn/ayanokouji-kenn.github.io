<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白玉楼へ</title>
  <subtitle>ようこそ～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-19T08:46:28.441Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ayanokouji-Kenn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/19/hello-world/"/>
    <id>http://yoursite.com/2016/10/19/hello-world/</id>
    <published>2016-10-19T08:46:28.439Z</published>
    <updated>2016-10-19T08:46:28.441Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GreenDao3.2.0用法</title>
    <link href="http://yoursite.com/2016/10/14/20161014%20GreenDao3.2.0%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2016/10/14/20161014 GreenDao3.2.0用法/</id>
    <published>2016-10-14T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:26.256Z</updated>
    
    <content type="html"><![CDATA[<p>发现GreenDao更新到3了，还是改了一些东西的，看了几篇文章，发现有些出入之处，<br>于是结合<a href="http://greenrobot.org/greendao/" target="_blank" rel="external">官网</a>写了个demo测试了下，在此总结。</p>
<hr>
<p>#1. 导入GreenDao<br>有的同学可能不清楚gradle是哪个gradle。。在你module的那个build.gradle里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div><div class="line">android &#123;</div><div class="line">    compileSdkVersion 24</div><div class="line">    buildToolsVersion &quot;24.0.2&quot;</div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId &quot;com.uu.greendaotest&quot;</div><div class="line">        minSdkVersion 19</div><div class="line">        targetSdkVersion 24</div><div class="line">        versionCode 1</div><div class="line">        versionName &quot;1.0&quot;</div><div class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//greenDao----start//</div><div class="line">apply plugin: &apos;org.greenrobot.greendao&apos;</div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;org.greenrobot:greendao-gradle-plugin:3.2.0&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">greendao &#123;</div><div class="line">    schemaVersion 1    //&lt;--数据库的版本，用于升级时候进行更改</div><div class="line">    daoPackage &apos;com.aidebar.greendaotest.gen&apos;     //存放自动生成代码的包</div><div class="line">    targetGenDir &apos;src/main/java&apos;                  //...</div><div class="line">&#125;</div><div class="line">//greenDao----end//</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)</div><div class="line">    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;</div><div class="line">    &#125;)</div><div class="line">    compile &apos;com.android.support:appcompat-v7:24.2.1&apos;</div><div class="line">    testCompile &apos;junit:junit:4.12&apos;</div><div class="line">    //加上下面这俩</div><div class="line">    compile &apos;org.greenrobot:greendao:3.2.0&apos;</div><div class="line">    compile &apos;org.greenrobot:greendao-generator:3.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>#2  初始化数据库<br>首先写个Bean类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line"> //这个注解就表明下面那个id是个主键，必须用Long，autoincrement=true自增</div><div class="line">    @Id(autoincrement = true)    </div><div class="line">    Long id;</div><div class="line">//这个意思是在数据库中，列的名字是USER_NAME</div><div class="line">    @Property(nameInDb = &quot;USER_NAME&quot;)</div><div class="line">    String name;</div><div class="line">//...这个不用解释了吧</div><div class="line">    @NotNull</div><div class="line">    Integer age;</div></pre></td></tr></table></figure></p>
<p>如果你前面正确导入了GreenDao，那么请Ctrl+F9，你会发现User这个类变成了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-d8d4812a220bb944.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>自动生成了构造方法和get set，以及在build.gradle里设置的路径的地方多了这么几个类</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-95e5cec82a57b7e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>下面正式进入初始化操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class DbDao &#123;</div><div class="line">    private static DaoSession daoSession;</div><div class="line">    private static DaoSession getDaoSession() &#123;</div><div class="line">        if (daoSession==null) &#123;</div><div class="line">            DaoMaster.OpenHelper openHelper = new DaoMaster.OpenHelper(MyApplication.getInstance(), &quot;test&quot;)&#123;</div><div class="line">                @Override</div><div class="line">                public void onUpgrade(Database db, int oldVersion, int newVersion) &#123;</div><div class="line">                    switch (oldVersion) &#123;</div><div class="line">                        case 1:</div><div class="line">                            db.beginTransaction();</div><div class="line">                            db.execSQL(&quot;...&quot;);</div><div class="line">                            db.setTransactionSuccessful();</div><div class="line">                            db.endTransaction();</div><div class="line">                            break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            SQLiteDatabase db = openHelper.getWritableDatabase();</div><div class="line">            DaoMaster daoMaster = new DaoMaster(db);</div><div class="line">            daoSession = daoMaster.newSession();</div><div class="line">        &#125;</div><div class="line">        return daoSession;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static UserDao getUserDao() &#123;</div><div class="line">        return getDaoSession().getUserDao();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DaoMaster.OpenHelper是一个抽象类,onCreate()方法里GreenDao会根据你定义的User类，自动生成表<br>自己根据需要重写onUpgrade()方法<br>有的文章里，这里用的是DaoMaster.devOpenHelper，源码注释里明确写了</p>
<blockquote>
<p>WARNING: Drops all table on Upgrade! Use only during development.</p>
</blockquote>
<p>DaoMaster.devOpenHelper是DaoMaster.OpenHelper的实现类，它的onUpgrade就是干掉所有的表<br>然后重建新表，正式运营中会造成数据丢失，只能在开发阶段使用</p>
<p>#3 增删改查<br>获取自动生成的这个UserDao<br><code>UserDao userDao = Dbdao.getUserDao()</code><br>它提供了各种insert delete  update等方法，<br>咦，增删改都有了，查呢？<br>查这个有点小花样的，单独拎出来说<br>最简单的 <code>userDao.load(Long id)</code>和<code>userDao.loadAll()</code>，你可以一把全找出来，再根据业务需求进行筛选<br>也可以直接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List joes = userDao.queryBuilder()</div><div class="line">                .where(UserDao.Properties.Name.eq(&quot;Joe&quot;))  //其实不用解释，一看就懂吧 eq就是equals</div><div class="line">                .orderAsc(UserDao.Properties.Age)</div><div class="line">                .list();</div></pre></td></tr></table></figure></p>
<p>可以看到Name和Age是我定义在User中的参数，where定义的是查询条件  order是排序啦<br>那么这个Properties除了eq还有什么方法呢</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-f09991dbf07b5bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>厉害了我地哥</p>
<hr>
<p>OK，到这儿~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现GreenDao更新到3了，还是改了一些东西的，看了几篇文章，发现有些出入之处，&lt;br&gt;于是结合&lt;a href=&quot;http://greenrobot.org/greendao/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;写了个demo测
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView的局部更新</title>
    <link href="http://yoursite.com/2016/10/10/20161010%20RecyclerView%E7%9A%84%E5%B1%80%E9%83%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2016/10/10/20161010 RecyclerView的局部更新/</id>
    <published>2016-10-10T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:30.978Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道recyclerView有好几个notify</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-412ab4e561ac1f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>除了最常用的<code>notifyDataSetChanged()</code>以外，还有下面的那些，知道position就可以进行更新了<br>但是！我得知道位置才能做到定向更新，那么我不想让所有都更新呢？<br>实际开发中其实经常有这种情况，可能只是调整一小部分，根本不需要整体全部刷一遍，下面进入正题</p>
<hr>
<p>首先，项目里用到了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:appcompat-v7:24.2.1&apos;</div><div class="line">compile &apos;io.reactivex.rxjava2:rxjava:2.0.0-RC4&apos;</div><div class="line">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.0-RC1&apos;</div><div class="line">compile &apos;com.android.support:recyclerview-v7:24.2.1&apos;</div></pre></td></tr></table></figure></p>
<p>当然rxjava不是必须的。。。不懂也没关系，这不是重点<br>上代码，其实就2个类，一个MainActivity，一个是Adapter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private RecyclerView mRv;</div><div class="line">    private Button mBtn;</div><div class="line">    private List&lt;Bean&gt; mDatas;</div><div class="line">    private DiffAdapter diffAdapter;</div><div class="line">    private List&lt;Bean&gt; mNewDatas;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">        initData();</div><div class="line">        initEvent();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView() &#123;</div><div class="line">        mRv = getView(R.id.rv);</div><div class="line">        mBtn = getView(R.id.btn);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initData() &#123;</div><div class="line">        mDatas = new ArrayList&lt;&gt;();</div><div class="line">        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            //Bean就是个Bean类，里面就2个参数，一个id，一个name</div><div class="line">            mDatas.add(new Bean(i, &quot;name&quot; + i));   </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initEvent() &#123;</div><div class="line">        mRv.setLayoutManager(new LinearLayoutManager(this));</div><div class="line">        diffAdapter = new DiffAdapter(this, mDatas);</div><div class="line">        mRv.setAdapter(diffAdapter);</div><div class="line">        </div><div class="line">        mBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                refresh();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void refresh() &#123;</div><div class="line">        mNewDatas = new ArrayList&lt;&gt;();</div><div class="line">        //模拟获取新数据，将原集合添加进来，删掉一个，添加一个</div><div class="line">        mNewDatas.addAll(mDatas);                        </div><div class="line">        mNewDatas.remove(0);</div><div class="line">        Random random = new Random();</div><div class="line">        int i = random.nextInt(10);</div><div class="line">        mNewDatas.add(new Bean(i, &quot;add&quot; + i));</div><div class="line">        //不懂rxjava的同学从这里</div><div class="line">        Observable.fromArray(mDatas)                                       </div><div class="line">               .map(new Function&lt;List&lt;Bean&gt;, DiffUtil.DiffResult&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    public DiffUtil.DiffResult apply(List&lt;Bean&gt; been) throws Exception &#123; </div><div class="line">                        //到这里可以不用看，下面的才是关键 </div><div class="line">                        //DiffUtil.calculateDiff（）是用来计算2个集合差异性的，返回了一个diffResult，下面会用到</div><div class="line">                        return DiffUtil.calculateDiff(new DiffUtil.Callback() &#123;                        </div><div class="line">                            @Override</div><div class="line">                            public int getOldListSize() &#123;        //获取原集合大小</div><div class="line">                                return mDatas == null ? 0 : mDatas.size();</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            @Override</div><div class="line">                            public int getNewListSize() &#123;    //获取新集合大小</div><div class="line">                                return mNewDatas == null ? 0 : mNewDatas.size();</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            //判断2个item是否是同一个，逻辑根据实际开发需求来定，这里就用Bean.id来判断了</div><div class="line">                            @Override</div><div class="line">                            public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) &#123;</div><div class="line">                                return mDatas.get(oldItemPosition).getId() == mNewDatas.get(newItemPosition).getId();</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            //判断2个item的内容是否改变了，同上，这里用Bean.name来判断</div><div class="line">                            @Override</div><div class="line">                            public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) &#123;</div><div class="line">                                return TextUtils.equals(mDatas.get(oldItemPosition).getName(), mNewDatas.get(newItemPosition).getName());</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            /*如果2个item是同一个，但是内容不同，即</div><div class="line">                              areItemsTheSame 返回true</div><div class="line">                              areContentsTheSame 返回了false*/</div><div class="line">                            //那么会调用这个方法</div><div class="line">                            @Nullable</div><div class="line">                            @Override</div><div class="line">                            public Object getChangePayload(int oldItemPosition, int newItemPosition) &#123;</div><div class="line">                                Bean oldBean = mDatas.get(oldItemPosition);</div><div class="line">                                Bean newBean = mNewDatas.get(newItemPosition);</div><div class="line">                                //将新旧2个item对象的不同之处返回，如果没有就返回null</div><div class="line">                               /*这个例子里面反正就一个name不同，就直接返回String了，</div><div class="line">                                如果变化的东西多，可以返回List,Map,SparseArray,bundle等等等等*/</div><div class="line">                                if (!TextUtils.equals(oldBean.getName(), newBean.getName())) &#123;        </div><div class="line">                                    return newBean.getName();</div><div class="line">                                &#125; else &#123;</div><div class="line">                                    return null;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribeOn(Schedulers.computation())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(new Consumer&lt;DiffUtil.DiffResult&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void accept(DiffUtil.DiffResult diffResult) throws Exception &#123;</div><div class="line">                    //上面的DiffUtil.calculateDiff（）返回的diffResult这里用到了</div><div class="line">                        diffResult.dispatchUpdatesTo(diffAdapter);</div><div class="line">                        mDatas = mNewDatas;</div><div class="line">                        diffAdapter.setData(mDatas);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private &lt;T extends View&gt; T getView(int id) &#123;</div><div class="line">        return (T)findViewById(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public class DiffAdapter extends RecyclerView.Adapter&lt;DiffAdapter.DiffVh&gt; &#123;</div><div class="line">    private List&lt;Bean&gt; mDatas;</div><div class="line">    private Context mContext;</div><div class="line">    public DiffAdapter(Context context, List&lt;Bean&gt; datas) &#123;</div><div class="line">        mContext = context;</div><div class="line">        mDatas = datas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public DiffAdapter.DiffVh onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        </div><div class="line">        return new DiffVh(LayoutInflater.from(mContext).inflate(R.layout.item_rv,parent,false));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(DiffAdapter.DiffVh holder, int position) &#123;</div><div class="line">        holder.tvTitle.setText(mDatas.get(position).getId()+&quot;&quot;);</div><div class="line">        holder.tvDesc.setText(mDatas.get(position).getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(DiffAdapter.DiffVh holder, int position, List&lt;Object&gt; payloads) &#123;</div><div class="line">        if (payloads.isEmpty()) &#123;</div><div class="line">            onBindViewHolder(holder,position);</div><div class="line">        &#125;else &#123;</div><div class="line">            holder.tvDesc.setText((CharSequence) payloads.get(0));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return mDatas==null?0:mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setData(List&lt;Bean&gt; mDatas) &#123;</div><div class="line">        this.mDatas = mDatas;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class DiffVh extends RecyclerView.ViewHolder &#123;</div><div class="line"></div><div class="line">        TextView tvTitle;</div><div class="line">        TextView tvDesc;</div><div class="line"></div><div class="line">        DiffVh(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            tvTitle = (TextView) itemView.findViewById(R.id.tv_title);</div><div class="line">            tvDesc = (TextView) itemView.findViewById(R.id.tv_desc);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局文件不贴了吧<br><code>R.layout.item_rv</code>就是2个textview用来显示Bean的id和name<br><code>R.layout.activity_main</code>就是一个recyclerview和一个button用来刷新而已<br>OK，到此为止，怎么用都在注释里</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道recyclerView有好几个notify&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2524531-412ab4e561ac1f34.png?imageMogr2/auto-or
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>retrofit 如何post json给服务端</title>
    <link href="http://yoursite.com/2016/09/13/20160722%20retrofit%20%E5%A6%82%E4%BD%95post%20json%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://yoursite.com/2016/09/13/20160722 retrofit 如何post json给服务端/</id>
    <published>2016-09-13T02:46:46.000Z</published>
    <updated>2016-10-21T06:04:44.910Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>需求：<br>开发新项目时，拿到接口文档，需要请求消息体是json类型的</li>
</ul>
<hr>
<p>可能你这么写过post：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">interface NService &#123;</div><div class="line">        @FormUrlEncoded</div><div class="line">        @POST(&quot;alarmclock/add.json&quot;)</div><div class="line">        Call&lt;ResponseBody&gt; getResult(@FieldMap Map&lt;String, Object&gt; params);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder().baseUrl(URL).client(client).build();</div><div class="line">        NService nService = retrofit.create(NService.class);</div><div class="line">        Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</div><div class="line">        params.put(&quot;id&quot;, &quot;123&quot;);</div><div class="line">        params.put(&quot;name&quot;, &quot;ksi&quot;);</div><div class="line"></div><div class="line">        Call&lt;ResponseBody&gt; call = nService.getResult(params);</div><div class="line">        call.enqueue(new Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;ResponseBody&gt; call, retrofit2.Response&lt;ResponseBody&gt; response) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这是表单提交，你提交上去的其实是<code>id=123&amp;name=ksi</code>这么个东西。<br>如果要提交的是json那么自然要改变请求体了</p>
<p>好，有的同学可能会搜索以下问题：<strong>怎么查看/更改/添加请求头、请求体、响应体</strong>？<br>我的版本是：retrofit2.1.0，2.0以前的做法可能不一样。</p>
<p>首先，在你的build.gradle下面依赖这玩意<br><code>compile &#39;com.squareup.okhttp3:logging-interceptor:3.4.1&#39;</code><br>然后配置client，添加拦截器，第一个拦截器是用于添加请求头的，第二个就是打印日志了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = new OkHttpClient().newBuilder()</div><div class="line">                .addInterceptor(new Interceptor() &#123;</div><div class="line">                    @Override</div><div class="line">                    public Response intercept(Chain chain) throws IOException &#123;</div><div class="line">                        Request request = chain.request().newBuilder()</div><div class="line">                                .addHeader(&quot;creater_oid&quot;, &quot;123411&quot;) //这里就是添加一个请求头</div><div class="line">                                .build();</div><div class="line"></div><div class="line">//                        Buffer buffer = new Buffer();       不依赖logging，用这三行也能打印出请求体</div><div class="line">//                        request.body().writeTo(buffer);</div><div class="line">//                        Log.d(getClass().getSimpleName(), &quot;intercept: &quot; + buffer.readUtf8());</div><div class="line"></div><div class="line">                        return chain.proceed(request);</div><div class="line">                    &#125; //下面是关键代码</div><div class="line">                &#125;).addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))</div><div class="line">                .build();</div></pre></td></tr></table></figure></p>
<p>好，我们来干正经事了，json格式的请求，参数注解用@Body<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface ApiService &#123;</div><div class="line">        @POST(&quot;add.json&quot;)</div><div class="line">        Call&lt;ResponseBody&gt; add(@Body RequestBody body);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder().baseUrl(URL).client(client).build();</div><div class="line">        ApiService apiService = retrofit.create(ApiService.class);</div><div class="line"></div><div class="line">//new JSONObject里的getMap()方法就是返回一个map，里面包含了你要传给服务器的各个键值对，然后根据接口文档的请求格式，直接拼接上相应的东西就行了</div><div class="line">//比如&#123;&quot;data&quot;:&#123;这里面是参数&#125;&#125;，那就在外面拼上大括号和&quot;data&quot;好了</div><div class="line">        RequestBody requestBody = RequestBody.create(MediaType.parse(&quot;Content-Type, application/json&quot;),</div><div class="line">                                   &quot;&#123;\&quot;data\&quot;:&quot;+new JSONObject(getMap()).toString()+&quot;&#125;&quot;);</div><div class="line">        Call&lt;ResponseBody&gt; call = apiService.add(requestBody);</div><div class="line">        call.enqueue(new Callback&lt;ResponseBody&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;ResponseBody&gt; call, retrofit2.Response&lt;ResponseBody&gt; response) &#123;</div><div class="line">                Log.d(getClass().getSimpleName(), &quot;onResponse: ----&quot; + response.body().toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;ResponseBody&gt; call, Throwable t) &#123;</div><div class="line">                Log.d(getClass().getSimpleName(), &quot;onFailure: ------&quot; + t.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>OK，大功告成，来看看打印结果吧</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-612f8177ff844aa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20160722012756.png"><br>看到第三行了么，那就是自定义添加的请求头，第四行就是json格式的请求体了<br>&lt;—200 OK下面是响应体。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;需求：&lt;br&gt;开发新项目时，拿到接口文档，需要请求消息体是json类型的&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;可能你这么写过post：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>dialog 更改宽高</title>
    <link href="http://yoursite.com/2016/09/13/20160913%20dialog%20%E6%9B%B4%E6%94%B9%E5%AE%BD%E9%AB%98/"/>
    <id>http://yoursite.com/2016/09/13/20160913 dialog 更改宽高/</id>
    <published>2016-09-13T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:35.268Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>一种方法是在dialog的onCreate里面加上<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void initWindow() &#123;</div><div class="line">        Window win = this.getWindow();</div><div class="line">        win.getDecorView().setPadding(0, 0, 0, 0);</div><div class="line">        WindowManager.LayoutParams lp = win.getAttributes();</div><div class="line"></div><div class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</div><div class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</div><div class="line">        lp.gravity = Gravity.BOTTOM;</div><div class="line">        win.setAttributes(lp);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但是这么改是在自定义的继承自dialog里面才能这么写<br>有时我们可能只是简单的，这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">final AlertDialog dialog = new AlertDialog.Builder(activity,R.style.dialog)</div><div class="line">                .setView(view1)</div><div class="line">                .create();</div><div class="line">        dialog.show();</div></pre></td></tr></table></figure></p>
<ul>
<li>那么就是第二种方法，<strong>在dialog.show()之后再调用以下的代码</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Window window = dialog.getWindow();</div><div class="line">        WindowManager.LayoutParams lp = window.getAttributes();</div><div class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</div><div class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</div><div class="line">        lp.gravity = Gravity.BOTTOM;</div><div class="line">        dialog.onWindowAttributesChanged(lp);</div><div class="line">        window.setAttributes(lp);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;一种方法是在dialog的onCreate里面加上&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;li
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>调节安卓音量</title>
    <link href="http://yoursite.com/2016/09/02/20160902%20%E8%B0%83%E8%8A%82%E5%AE%89%E5%8D%93%E9%9F%B3%E9%87%8F/"/>
    <id>http://yoursite.com/2016/09/02/20160902 调节安卓音量/</id>
    <published>2016-09-02T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:39.700Z</updated>
    
    <content type="html"><![CDATA[<p>如果使用MediaPlayer播放，直接setVolume即可，经测试静音也能有声音，但是用户调节媒体音量到0就不行了，他是在媒体音量的基础上做了百分比<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MediaPlayer mediaPlayer = MediaPlayer.create(this, raws[ringId]);</div><div class="line">mediaPlayer.setVolume(1.0f, 1.0f);</div></pre></td></tr></table></figure></p>
<p>比如某个需要提醒用户的时候，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">audioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);</div><div class="line"> //获取媒体音量最大值</div><div class="line">int streamMaxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); </div><div class="line"> //获取系统当前媒体音量，用于闹钟关闭的时候 恢复成用户自己设置的音量</div><div class="line">int streamVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);            </div><div class="line">audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, streamMaxVolume, 0);</div><div class="line"></div><div class="line">//业务逻辑写在这，播放声音什么的</div><div class="line"></div><div class="line">//完了再将媒体音量还原成用户设置的</div><div class="line">audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, streamVolume , 0);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果使用MediaPlayer播放，直接setVolume即可，经测试静音也能有声音，但是用户调节媒体音量到0就不行了，他是在媒体音量的基础上做了百分比&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
    
      <category term="豆知识" scheme="http://yoursite.com/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio 关联源码</title>
    <link href="http://yoursite.com/2016/09/02/20160902%20AndroidStudio%20%E5%85%B3%E8%81%94%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2016/09/02/20160902 AndroidStudio 关联源码/</id>
    <published>2016-09-02T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:44.400Z</updated>
    
    <content type="html"><![CDATA[<p>首先，确保你已经下载完成了，<br>然后，在<code>C:\Users\xxx\.AndroidStudio2.1\config\options</code>这里找到<code>jdk.table.xml</code><br>打开它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;jdk version=&quot;2&quot;&gt;</div><div class="line">      &lt;name value=&quot;Android API 24 Platform&quot; /&gt; //找到对应的版本</div><div class="line">      &lt;type value=&quot;Android SDK&quot; /&gt;</div><div class="line">      &lt;version value=&quot;java version &quot;1.8.0_91&quot;&quot; /&gt;</div><div class="line">      &lt;homePath value=&quot;D:\android-studio-sdk&quot; /&gt;</div><div class="line">      &lt;roots&gt;</div><div class="line">        &lt;annotationsPath&gt;</div><div class="line">          &lt;root type=&quot;composite&quot;&gt;</div><div class="line">            &lt;root type=&quot;simple&quot; url=&quot;jar://$APPLICATION_HOME_DIR$/plugins/android/lib/androidAnnotations.jar!/&quot; /&gt;</div><div class="line">          &lt;/root&gt;</div><div class="line">        &lt;/annotationsPath&gt;</div><div class="line">        &lt;classPath&gt;</div><div class="line">          &lt;root type=&quot;composite&quot;&gt;</div><div class="line">            &lt;root type=&quot;simple&quot; url=&quot;jar://D:/android-studio-sdk/platforms/android-24/android.jar!/&quot; /&gt;</div><div class="line">            &lt;root type=&quot;simple&quot; url=&quot;file://D:/android-studio-sdk/platforms/android-24/data/res&quot; /&gt;</div><div class="line">          &lt;/root&gt;</div><div class="line">        &lt;/classPath&gt;</div><div class="line">        &lt;javadocPath&gt;</div><div class="line">          &lt;root type=&quot;composite&quot;&gt;</div><div class="line">            &lt;root type=&quot;simple&quot; url=&quot;file://D:/android-studio-sdk/docs/reference&quot; /&gt;</div><div class="line">          &lt;/root&gt;</div><div class="line">        &lt;/javadocPath&gt;</div><div class="line">        &lt;sourcePath&gt;   //源码在這里</div><div class="line">          &lt;root type=&quot;composite&quot;&gt;</div><div class="line">          //把路径填进去，重开AndroidStudio就ok了</div><div class="line">            &lt;root type=&quot;simple&quot; url=&quot;file://D:/android-studio-sdk/sources/android-24&quot; /&gt;</div><div class="line">          &lt;/root&gt;</div><div class="line">        &lt;/sourcePath&gt;</div><div class="line">      &lt;/roots&gt;</div><div class="line">      &lt;additional jdk=&quot;1.8&quot; sdk=&quot;android-24&quot; /&gt;</div><div class="line">    &lt;/jdk&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，确保你已经下载完成了，&lt;br&gt;然后，在&lt;code&gt;C:\Users\xxx\.AndroidStudio2.1\config\options&lt;/code&gt;这里找到&lt;code&gt;jdk.table.xml&lt;/code&gt;&lt;br&gt;打开它&lt;br&gt;&lt;figure class=&quot;h
    
    </summary>
    
    
      <category term="豆知识" scheme="http://yoursite.com/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>SecurityException与android.permission.xxxx</title>
    <link href="http://yoursite.com/2016/08/30/20160830%20SecurityException%E4%B8%8Eandroid.permission.xxxx/"/>
    <id>http://yoursite.com/2016/08/30/20160830 SecurityException与android.permission.xxxx/</id>
    <published>2016-08-30T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:48.335Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java.lang.SecurityException</div><div class="line">getDeviceId: Neither user 10174 nor current process has android.permission.READ_PHONE_STATE.</div></pre></td></tr></table></figure>
<p>这个问题是由于android6.0的动态权限引起的<br>首先看下google怎么说的</p>
<blockquote>
<p>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app’s functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app’s Settings screen.</p>
</blockquote>
<hr>
<p>从6.0起，权限分成两类，一个是普通权限，一个是危险权限</p>
<ul>
<li>普通权限就是手机本身的权限，跟以前一样在AndroidManifest.xml里面申请就可以了</li>
<li>危险权限就是需要获取用户信息的一些权限，比如</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-ade5fbdd6a047148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>在activity里面，加入这俩方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void getPermission()&#123;</div><div class="line">               if (Build.VERSION.SDK_INT &gt;= 23) &#123;</div><div class="line">           int checkCallPhonePermission = ContextCompat.checkSelfPermission(mContext,Manifest.permission.READ_PHONE_STATE);</div><div class="line">           if(checkCallPhonePermission != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">               ActivityCompat.requestPermissions(mContext,new String[]&#123;Manifest.permission.READ_PHONE_STATE&#125;,REQUEST_CODE_READ_PHONE_STATE);</div><div class="line">               return;</div><div class="line">           &#125;else&#123;</div><div class="line">               //原本需要做的事情</div><div class="line">           &#125;</div><div class="line">       &#125; else &#123;</div><div class="line">           //原本需要做的事情</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</div><div class="line">        switch (requestCode) &#123;</div><div class="line">            case REQUEST_CODE_READ_PHONE_STATE:</div><div class="line">                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">                    // Permission Granted</div><div class="line">                    //原本需要做的事情</div><div class="line">                    </div><div class="line">                &#125; else &#123;</div><div class="line">                    // Permission Denied</div><div class="line">                    Toast.makeText(this, &quot;READ_PHONE_STATE PERMISSION Denied&quot;, Toast.LENGTH_SHORT)</div><div class="line">                            .show();</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>RxBus的工具类</title>
    <link href="http://yoursite.com/2016/08/24/20160824%20RxBus%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://yoursite.com/2016/08/24/20160824 RxBus的工具类/</id>
    <published>2016-08-24T02:46:46.000Z</published>
    <updated>2016-10-21T06:04:29.159Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>直接上代码 ，三个类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import rx.Observable;</div><div class="line">import rx.functions.Func1;</div><div class="line">import rx.subjects.PublishSubject;</div><div class="line">import rx.subjects.SerializedSubject;</div><div class="line">import rx.subjects.Subject;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author xzj</div><div class="line"> * @date 2016/8/24 14:00.</div><div class="line"> */</div><div class="line">public class RxBus &#123;</div><div class="line">    private static RxBus mRxBus = null;</div><div class="line">    /**</div><div class="line">     * PublishSubject只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者</div><div class="line">     */</div><div class="line"></div><div class="line">    private Subject&lt;Object, Object&gt; mRxBusObserverable = new SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class="line"></div><div class="line">    public static synchronized RxBus getInstance() &#123;</div><div class="line">        if (mRxBus == null) &#123;</div><div class="line">            mRxBus = new RxBus();</div><div class="line">        &#125;</div><div class="line">        return mRxBus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void send(Object o, String tag) &#123;</div><div class="line">        mRxBusObserverable.onNext(new RxBusObject(tag, o));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">//    public Observable&lt;Object&gt; toObserverable() &#123;</div><div class="line">//        return mRxBusObserverable;</div><div class="line">//    &#125;</div><div class="line"></div><div class="line">    public &lt;T&gt; Observable&lt;T&gt; toObservable(final Class&lt;T&gt; eventType, final String tag) &#123;</div><div class="line">        return mRxBusObserverable.filter(new Func1&lt;Object, Boolean&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public Boolean call(Object o) &#123;</div><div class="line">                if (!(o instanceof RxBusObject)) return false;</div><div class="line">                RxBusObject ro = (RxBusObject) o;</div><div class="line">                return eventType.isInstance(ro.getObj()) &amp;&amp; tag != null</div><div class="line">                        &amp;&amp; tag.equals(ro.getTag());</div><div class="line">            &#125;</div><div class="line">        &#125;).map(new Func1&lt;Object, T&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public T call(Object o) &#123;</div><div class="line">                RxBusObject ro = (RxBusObject) o;</div><div class="line">                return (T) ro.getObj();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 判断是否有订阅者</div><div class="line">     */</div><div class="line">    public boolean hasObservers() &#123;</div><div class="line">        return mRxBusObserverable.hasObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * @author xzj</div><div class="line"> * @date 2016/8/24 14:22.</div><div class="line"> */</div><div class="line">public class RxBusObject &#123;</div><div class="line">    private String tag;</div><div class="line">    private Object obj;</div><div class="line"></div><div class="line">    public RxBusObject(String tag, Object obj) &#123;</div><div class="line">        this.tag = tag;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getTag() &#123;</div><div class="line">        return tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setTag(String tag) &#123;</div><div class="line">        this.tag = tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object getObj() &#123;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setObj(Object obj) &#123;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static RxBusObject newInstance(String tag, Object obj) &#123;</div><div class="line">        return new RxBusObject(tag, obj);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * @author xzj</div><div class="line"> * @date 2016/8/24 14:24.</div><div class="line"> */</div><div class="line"></div><div class="line">import rx.Subscriber;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 请使用此类来subscribe RxBus返回的Observable以简化onError与onCompleted函数.</div><div class="line"> */</div><div class="line">public abstract class RxBusSubscriber&lt;T&gt; extends Subscriber&lt;T&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public void onCompleted() &#123;</div><div class="line">        completed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onError(Throwable e) &#123;</div><div class="line">        error(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onNext(T t) &#123;</div><div class="line">        receive(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public abstract void receive(T data);</div><div class="line">    public void error(Throwable e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    public void completed() &#123;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>用法</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/2524531-d4b703f7adcb771c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>一个简单的例子<br>就是上下两个fragment，change按钮是在fragment里的，点击随机生成一个color发给下面的fragment2，下面的fragmeng2收到了，更改背景<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class MyFragment extends Fragment &#123;</div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        View view = inflater.inflate(R.layout.layout_fragment, null);</div><div class="line">        Button btn = (Button) view.findViewById(R.id.btn);</div><div class="line"></div><div class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                Random random = new Random();</div><div class="line">                int color = Color.argb(random.nextInt(256), random.nextInt(256), random.nextInt(256), random.nextInt(256));</div><div class="line">                RxBus.getInstance().send(color,&quot;color&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MyFragment2 extends Fragment &#123;</div><div class="line"></div><div class="line">    private Subscription subscribe;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        final View view = inflater.inflate(R.layout.layout_fragment2, null);</div><div class="line">        //标记发过来的是个int，tag是“color”，和被观测者send（）方法里参数能匹配上，才会被这里观测到</div><div class="line">        subscribe = RxBus.getInstance().toObservable(Integer.class, &quot;color&quot;) </div><div class="line">                .subscribe(new RxBusSubscriber&lt;Integer&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void receive(Integer data) &#123;</div><div class="line">                        view.setBackgroundColor(data);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroyView() &#123;</div><div class="line">        super.onDestroyView();</div><div class="line">        if (!subscribe.isUnsubscribed()) &#123;</div><div class="line">            subscribe.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;直接上代码 ，三个类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>onStartCommand中的intent为null</title>
    <link href="http://yoursite.com/2016/08/24/20160824onStartCommand%E4%B8%AD%E7%9A%84intent%E4%B8%BAnull/"/>
    <id>http://yoursite.com/2016/08/24/20160824onStartCommand中的intent为null/</id>
    <published>2016-08-24T02:46:46.000Z</published>
    <updated>2016-10-21T02:56:59.757Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>当需要在服务中，对intent做什么事情的时候，先加入这个判断，特别是那个getAction不能忘了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (intent!=null &amp;&amp; intent.getAction()!=null) &#123; </div><div class="line">            //do something</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;当需要在服务中，对intent做什么事情的时候，先加入这个判断，特别是那个getAction不能忘了&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>SPUtils</title>
    <link href="http://yoursite.com/2016/08/24/20160824%20SPUtils/"/>
    <id>http://yoursite.com/2016/08/24/20160824 SPUtils/</id>
    <published>2016-08-24T02:46:46.000Z</published>
    <updated>2016-10-21T06:05:10.990Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @author xzj</div><div class="line"> * @date 2016/8/24 15:40.</div><div class="line"> */</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.SharedPreferences;</div><div class="line"></div><div class="line">import com.google.gson.Gson;</div><div class="line">import com.google.gson.reflect.TypeToken;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * SharedPreferences工具类, 可以通过传入实体对象保存其至SharedPreferences中,</div><div class="line"> * 并通过实体的类型Class将保存的对象取出. 支持不带泛型的对象以及List集合</div><div class="line"> */</div><div class="line">public class SPUtils &#123;</div><div class="line"></div><div class="line">    private static final String LIST_TAG = &quot;.LIST&quot;;</div><div class="line">    private static SharedPreferences sharedPreferences;</div><div class="line">    private static Gson gson;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 使用之前初始化, 可在Application中调用</div><div class="line">     * @param context 请传入ApplicationContext避免内存泄漏</div><div class="line">     */</div><div class="line">    public static void init(Context context) &#123;</div><div class="line">        sharedPreferences = context.getSharedPreferences(&quot;shared_files&quot;,</div><div class="line">                Context.MODE_PRIVATE);</div><div class="line">        gson = new Gson();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void checkInit() &#123;</div><div class="line">        if (sharedPreferences == null || gson == null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;Please call init(context) first.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存对象数据至SharedPreferences, key默认为类名, 如</div><div class="line">     * &lt;pre&gt;</div><div class="line">     * PreferencesHelper.putData(saveUser);</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     * @param data 不带泛型的任意数据类型实例</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; void putData(T data) &#123;</div><div class="line">        putData(data.getClass().getName(), data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据key保存对象数据至SharedPreferences, 如</div><div class="line">     * &lt;pre&gt;</div><div class="line">     * PreferencesHelper.putData(key, saveUser);</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     * @param data 不带泛型的任意数据类型实例</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; void putData(String key, T data) &#123;</div><div class="line">        checkInit();</div><div class="line">        if (data == null)</div><div class="line">            throw new IllegalStateException(&quot;data should not be null.&quot;);</div><div class="line">        sharedPreferences.edit().putString(key, gson.toJson(data)).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存List集合数据至SharedPreferences, 请确保List至少含有一个元素, 如</div><div class="line">     * &lt;pre&gt;</div><div class="line">     * PreferencesHelper.putData(users);</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     * @param data List类型实例</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; void putData(List&lt;T&gt; data) &#123;</div><div class="line">        checkInit();</div><div class="line">        if (data == null || data.size() &lt;= 0)</div><div class="line">            throw new IllegalStateException(</div><div class="line">                    &quot;List should not be null or at least contains one element.&quot;);</div><div class="line">        Class returnType = data.get(0).getClass();</div><div class="line">        sharedPreferences.edit().putString(returnType.getName() + LIST_TAG,</div><div class="line">                gson.toJson(data)).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将数据从SharedPreferences中取出, key默认为类名, 如</div><div class="line">     * &lt;pre&gt;</div><div class="line">     * User user = PreferencesHelper.getData(key, User.class)</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; T getData(Class&lt;T&gt; clz) &#123;</div><div class="line">        return getData(clz.getName(), clz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据key将数据从SharedPreferences中取出, 如</div><div class="line">     * &lt;pre&gt;</div><div class="line">     * User user = PreferencesHelper.getData(User.class)</div><div class="line">     * &lt;/pre&gt;</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; T getData(String key, Class&lt;T&gt; clz) &#123;</div><div class="line">        checkInit();</div><div class="line">        String json = sharedPreferences.getString(key, &quot;&quot;);</div><div class="line">        return gson.fromJson(json, clz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将数据从SharedPreferences中取出, 如</div><div class="line">     * &lt;pre&gt;List&lt;User&gt; users = PreferencesHelper.getData(List.class, User.class)&lt;/pre&gt;</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; List&lt;T&gt; getData(Class&lt;List&gt; clz,  Class&lt;T&gt; gClz) &#123;</div><div class="line">        checkInit();</div><div class="line">        String json = sharedPreferences.getString(gClz.getName() + LIST_TAG, &quot;&quot;);</div><div class="line">        return gson.fromJson(json, new TypeToken&lt;List&gt;()&#123;&#125;.getType());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 简易字符串保存, 仅支持字符串</div><div class="line">     */</div><div class="line">    public static void putString(String key, String data) &#123;</div><div class="line">        sharedPreferences.edit().putString(key, data).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 简易字符串获取, 仅支持字符串</div><div class="line">     */</div><div class="line">    public static String getString(String key) &#123;</div><div class="line">        return sharedPreferences.getString(key, &quot;&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void putInt(String key, int data) &#123;</div><div class="line">        sharedPreferences.edit().putInt(key,data).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int getInt(String key) &#123;</div><div class="line">        return sharedPreferences.getInt(key, -1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void putBoolean(String key, boolean data) &#123;</div><div class="line">        sharedPreferences.edit().putBoolean(key,data).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean getBoolean(String key,boolean defaultData) &#123;</div><div class="line">        return sharedPreferences.getBoolean(key, defaultData);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void putFloat(String key, float data) &#123;</div><div class="line">        sharedPreferences.edit().putFloat(key,data).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static float getFloat(String key,float defaultData) &#123;</div><div class="line">        return sharedPreferences.getFloat(key, defaultData);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void putLong(String key, long data) &#123;</div><div class="line">        sharedPreferences.edit().putLong(key,data).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static float getLong(String key,long defaultData) &#123;</div><div class="line">        return sharedPreferences.getLong(key, defaultData);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void clear() &#123;</div><div class="line">        sharedPreferences.edit().clear().apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除保存的对象</div><div class="line">     */</div><div class="line">    public static void remove(String key) &#123;</div><div class="line">        sharedPreferences.edit().remove(key).apply();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除保存的对象</div><div class="line">     */</div><div class="line">    public static void remove(Class clz) &#123;</div><div class="line">        remove(clz.getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 删除保存的数组</div><div class="line">     */</div><div class="line">    public static void removeList(Class clz) &#123;</div><div class="line">        sharedPreferences.edit().remove(clz.getName() + LIST_TAG).apply();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>onStartCommand中的intent为null</title>
    <link href="http://yoursite.com/2016/08/24/20160824%20onStartCommand%E4%B8%AD%E7%9A%84intent%E4%B8%BAnull/"/>
    <id>http://yoursite.com/2016/08/24/20160824 onStartCommand中的intent为null/</id>
    <published>2016-08-24T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:53.641Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>当需要在服务中，对intent做什么事情的时候，先加入这个判断，特别是那个getAction不能忘了<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (intent!=null &amp;&amp; intent.getAction()!=null) &#123; </div><div class="line">            //do something</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;当需要在服务中，对intent做什么事情的时候，先加入这个判断，特别是那个getAction不能忘了&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>snackbar 修改文本颜色</title>
    <link href="http://yoursite.com/2016/08/19/20160819%20snackbar%20%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2/"/>
    <id>http://yoursite.com/2016/08/19/20160819 snackbar 修改文本颜色/</id>
    <published>2016-08-19T02:46:46.000Z</published>
    <updated>2016-10-21T02:32:16.304Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>看源码 snackbar其实就是两个textview组成的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mMessageView = (TextView) findViewById(R.id.snackbar_text);</div><div class="line">mActionView = (Button) findViewById(R.id.snackbar_action);</div></pre></td></tr></table></figure>
<p>见名知意，一个是信息文本，一个是动作文本<br>然而，他虽然提供给了修改actoinView的颜色方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Sets the text color of the action specified in</div><div class="line">     * &#123;@link #setAction(CharSequence, View.OnClickListener)&#125;.</div><div class="line">     */</div><div class="line">    @NonNull</div><div class="line">    public Snackbar setActionTextColor(@ColorInt int color) &#123;</div><div class="line">        final TextView tv = mView.getActionView();</div><div class="line">        tv.setTextColor(color);</div><div class="line">        return this;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>但是没有提供修改mMessageView颜色的方法，而且是私有的<br>可是呢，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Returns the &#123;@link Snackbar&#125;&apos;s view.</div><div class="line">     */</div><div class="line">    @NonNull</div><div class="line">    public View getView() &#123;</div><div class="line">        return mView;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>那么我们可以拿到snackbar的view!!,那后面的事情就好办了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Snackbar snackbar = Snackbar.make(container, &quot;hehe&quot;, Snackbar.LENGTH_SHORT)</div><div class="line">                        .setAction(&quot;なに？？&quot;, new View.OnClickListener() &#123;</div><div class="line">                            @Override</div><div class="line">                            public void onClick(View view) &#123;</div><div class="line">                                Toast.makeText(MainActivity.this, &quot;whattttt&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                            &#125;</div><div class="line">                        &#125;)</div><div class="line">                        .setActionTextColor(0xffffc0cb);</div><div class="line">                //findViewById拿到文本textview，然后修改颜色就是了</div><div class="line">                ((TextView)snackbar.getView().findViewById(R.id.snackbar_text)).setTextColor(0xffffc0cb);</div><div class="line">                snackbar.show();</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;看源码 snackbar其实就是两个textview组成的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/di
    
    </summary>
    
    
      <category term="豆知识" scheme="http://yoursite.com/tags/%E8%B1%86%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>无法收到开机广播</title>
    <link href="http://yoursite.com/2016/08/17/20160817%E6%97%A0%E6%B3%95%E6%94%B6%E5%88%B0%E5%BC%80%E6%9C%BA%E5%B9%BF%E6%92%AD/"/>
    <id>http://yoursite.com/2016/08/17/20160817无法收到开机广播/</id>
    <published>2016-08-17T02:46:46.000Z</published>
    <updated>2016-10-21T02:32:20.354Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>国内第三方厂商对自启动做了一些限制，<br>比如小米要在安全中心–&gt;授权管理–自启动管理里添加<br>三星要在智能管理器里面添加…</li>
</ul>
<p>注意：<br>1、2.3版本以后 系统提供快速启动选项，如果使用，系统不会发开机完成的系统广播；<br>2、3.1以后，安装程序要启动一次才会运行接受系统广播，为了防止恶意的内置应用；<br>3、手机软件如360，定制系统如小米等，会设置禁止应用自启动，如果不在白名单，同样收不到系统广播；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--关机重启时启动服务，重新设置闹钟--&gt;</div><div class="line">&lt;receiver android:name=&quot;.receiver.BootCompletedReceiver&quot;&gt;</div><div class="line">    &lt;intent-filter android:priority=&quot;1000&quot;&gt;</div><div class="line">        &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;</div><div class="line">        &lt;action android:name=&quot;android.intent.action.QUICKBOOT_POWERON&quot; /&gt;  //快速启动，对！就是这玩意惹的锅！</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;国内第三方厂商对自启动做了一些限制，&lt;br&gt;比如小米要在安全中心–&amp;gt;授权管理–自启动管理里添加&lt;br&gt;三星要在智能管理器里面添加…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;br&gt;1、2.3版本以后 系统提供快速启动选项，如果使用，系统不会发开机完成的系统广播；
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>用okhttp/retrofit下载文件</title>
    <link href="http://yoursite.com/2016/08/08/20160808%20%E7%94%A8okhttp%20retrofit%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/08/08/20160808 用okhttp retrofit下载文件/</id>
    <published>2016-08-08T02:46:46.000Z</published>
    <updated>2016-10-21T02:32:23.561Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要在开屏页下载东西，在github上发现一个好用的框架<br>大家可以去<code>https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md</code>查看<br>关于retrofit的用法就不多说了，<strong>这个框架依赖于okhttp 3.4.1</strong></p>
<ol>
<li>首先在项目中引用<br><code>compile &#39;com.liulishuo.filedownloader:library:0.3.4&#39;</code></li>
<li>然后在Application的onCreate()中初始化<br><code>FileDownloader.init(applicationContext);</code></li>
<li><p>在工具类中丢进这2个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 单任务下载</div><div class="line">     */</div><div class="line">    public static void downloadFile(String path, String url) &#123;</div><div class="line">        FileDownloader.getImpl().create(url)</div><div class="line">                .setPath(path)</div><div class="line">                .setListener(new FileDownloadListener() &#123;</div><div class="line">                    @Override</div><div class="line">                    protected void pending(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void connected(BaseDownloadTask task, String etag, boolean isContinue, int soFarBytes, int totalBytes) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void progress(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void blockComplete(BaseDownloadTask task) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void retry(final BaseDownloadTask task, final Throwable ex, final int retryingTimes, final int soFarBytes) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void completed(BaseDownloadTask task) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void paused(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void error(BaseDownloadTask task, Throwable e) &#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    protected void warn(BaseDownloadTask task) &#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 多任务下载</div><div class="line">     * 参数1：url的集合   参数2：下载的路径</div><div class="line">     */</div><div class="line"></div><div class="line">    public static void downloadFiles(List&lt;RingListJson.RingBean&gt; urls,File dir) &#123;</div><div class="line">        final FileDownloadListener downloadListener = new FileDownloadListener() &#123;</div><div class="line">            @Override</div><div class="line">            protected void pending(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void connected(BaseDownloadTask task, String etag, boolean isContinue, int soFarBytes, int totalBytes) &#123;</div><div class="line">            </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void progress(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void blockComplete(BaseDownloadTask task) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void retry(final BaseDownloadTask task, final Throwable ex, final int retryingTimes, final int soFarBytes) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void completed(BaseDownloadTask task) &#123;</div><div class="line">            </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void paused(BaseDownloadTask task, int soFarBytes, int totalBytes) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void error(BaseDownloadTask task, Throwable e) &#123;</div><div class="line">             &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            protected void warn(BaseDownloadTask task) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        final FileDownloadQueueSet queueSet = new FileDownloadQueueSet(downloadListener);</div><div class="line"></div><div class="line">        final List&lt;BaseDownloadTask&gt; tasks = new ArrayList&lt;&gt;();</div><div class="line">        for (int i = 0; i &lt; urls.size(); i++) &#123;</div><div class="line">            if (FileDownloader.getImpl().create((urls.get(i).url)).isReusedOldFile()) &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            tasks.add(FileDownloader.getImpl()</div><div class="line">                    .create(urls.get(i).url)</div><div class="line">                    .setTag(i + 1)</div><div class="line">                    .setPath(dir.getAbsolutePath()+ File.separator+urls.get(i).name.concat(&quot;.aac&quot;)));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    /*由于是队列任务, 这里是我们假设了现在不需要每个任务都回调`FileDownloadListener#progress`, </div><div class="line">      我们只关系每个任务是否完成, </div><div class="line">      所以这里这样设置可以很有效的减少ipc.*/</div><div class="line">        queueSet.disableCallbackProgressTimes(); </div><div class="line"></div><div class="line">        // 所有任务在下载失败的时候都自动重试一次</div><div class="line">        queueSet.setAutoRetryTimes(1);</div><div class="line"></div><div class="line">        queueSet.downloadTogether(tasks);</div><div class="line">        queueSet.start();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在需要下载的地方调用者2个方法即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = new Retrofit.Builder().baseUrl(&quot;http:/xxx.xxx.com&quot;).addConverterFactory(GsonConverterFactory.create()).build();</div><div class="line">        RingListResult ringListResult = retrofit.create(RingListResult.class);</div><div class="line">        Call&lt;RingListJson&gt; call = ringListResult.getRings();</div><div class="line">        </div><div class="line">            final File dir = D8Application.applicationContext.getFilesDir();</div><div class="line">            final File rings = new File(dir + &quot;/rings&quot;);</div><div class="line">            if (!rings.exists()) &#123;</div><div class="line">                rings.mkdirs();</div><div class="line">            &#125;</div><div class="line">        call.enqueue(new Callback&lt;RingListJson&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void onResponse(Call&lt;RingListJson&gt; call, Response&lt;RingListJson&gt; response) &#123;</div><div class="line">                RingListJson ringListJson = response.body();</div><div class="line">                List&lt;RingListJson.RingBean&gt; ringList = ringListJson.ring; //在服务器拿到url的集合</div><div class="line">                Api.downloadFiles(ringList,rings);    //传进方法里  Api是自己的工具类</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onFailure(Call&lt;RingListJson&gt; call, Throwable t) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中需要在开屏页下载东西，在github上发现一个好用的框架&lt;br&gt;大家可以去&lt;code&gt;https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md&lt;/code&gt;查看&lt;br&gt;关于retrofi
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>TextView中添加下划线、不同颜色、点击跳转的字</title>
    <link href="http://yoursite.com/2016/07/30/20160730%20TextView%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%8B%E5%88%92%E7%BA%BF%E3%80%81%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E3%80%81%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%AD%97/"/>
    <id>http://yoursite.com/2016/07/30/20160730 TextView中添加下划线、不同颜色、点击跳转的字/</id>
    <published>2016-07-30T02:46:46.000Z</published>
    <updated>2016-10-21T02:32:40.751Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><img src="http://upload-images.jianshu.io/upload_images/2524531-ec6611c0ac42e704.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot_2016-07-30-13-36-50_com.aidebar.spandemo_1469857042549.jpg"><br>如果需要实现这种效果，<br>直接上代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">tv = (TextView) findViewById(R.id.tv);</div><div class="line"></div><div class="line">        tv.append(&quot;hehehehahaha&quot;);</div><div class="line"></div><div class="line">        SpannableString ssb = new SpannableString(&quot;点击跳转&quot;);</div><div class="line">        ssb.setSpan(new ClickableSpan() &#123;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onClick(View view) &#123;</div><div class="line">                startActivity(new Intent(MainActivity.this,SecondActivity.class)); //点击跳转</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void updateDrawState(TextPaint ds) &#123;  //设置样式</div><div class="line">                super.updateDrawState(ds);</div><div class="line">                ds.setColor(getResources().getColor(R.color.textclick));  //字体颜色</div><div class="line">                ds.setUnderlineText(true);      //下划线</div><div class="line">            &#125;</div><div class="line">        &#125;,0,ssb.length(),SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);</div><div class="line">        tv.append(ssb);</div><div class="line">        tv.setMovementMethod(LinkMovementMethod.getInstance());     //开始响应点击事件</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里设置的是ClickableSpan，即点击效果，同时在updateDrawState中设置了字体样式，</p>
<p>如果仅仅是想要下划线或者字体变色的话，那么<br><code>ssb.setSpan(new ForegroundColorSpan(Color.MAGENTA),0,ssb.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</code><br><code>ssb.setSpan(new UnderlineSpan(),0,ssb.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</code><br>即可，还有很多各式各样的span类型，大家自己试吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2524531-ec6611c0ac42e704.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/
    
    </summary>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>ExpandableListView中childview的数据出现了2次</title>
    <link href="http://yoursite.com/2016/07/27/ExpandableListView%E4%B8%ADchildview%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%BA%862%E6%AC%A1/"/>
    <id>http://yoursite.com/2016/07/27/ExpandableListView中childview的数据出现了2次/</id>
    <published>2016-07-27T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:20.687Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>问题：给child的集合个数是3个，但是打开折叠，出现了6个数据，debug发现getChildView执行了groupCount×childCount×2次，这显然是不合理的</li>
<li>原因：<br>虽然ExpandableListView提供了点击、展开、折叠的监听<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">listview.setOnGroupClickListener()</div><div class="line">listview.setOnGroupExpandListener()</div><div class="line">listview.setOnGroupCollapseListener()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>但ExpandableListView自己就实现了点击group展开，再次点击折叠，不需要手动去写这个操作。<br>除非需要同一时间只允许打开一个group，那么可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//展开监听，展开的时候遍历所有组，将其他的折叠起来</div><div class="line">        listview.setOnGroupExpandListener(new ExpandableListView.OnGroupExpandListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onGroupExpand(int groupPosition) &#123;</div><div class="line">                for (int i = 0; i &lt; ringAdapter.getGroupCount(); i++) &#123;</div><div class="line">                    if (groupPosition != i) &#123;</div><div class="line">                        listview.collapseGroup(i);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>前方高能</strong><br>如果<strong>手欠</strong>再次去实现了一遍展开和折叠的操作的话，比如这样，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">listview.setOnGroupClickListener(new ExpandableListView.OnGroupClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean onGroupClick(ExpandableListView parent, View v, int groupPosition, long id) &#123;</div><div class="line">                //如果是展开的，就合上，如果合上的点击展开</div><div class="line">                if (listview.isGroupExpanded(groupPosition)) &#123;</div><div class="line">                    listview.collapseGroup(groupPosition);</div><div class="line">                &#125; else &#123;</div><div class="line">                    listview.expandGroup(groupPosition);</div><div class="line">                &#125;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>那么就会被认为展开了2次操作，会多调一遍getChildView()，造成数据重复！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;问题：给child的集合个数是3个，但是打开折叠，出现了6个数据，debug发现getChildView执行了groupCount×childCount×2次，这显然是不合理的&lt;/li&gt;
&lt;li&gt;原因：&lt;br&gt;虽然ExpandableListView提供了点击、
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>解决toggleButton关闭状态初始化背景无效</title>
    <link href="http://yoursite.com/2016/07/27/%E8%A7%A3%E5%86%B3toggleButton%E5%85%B3%E9%97%AD%E7%8A%B6%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/"/>
    <id>http://yoursite.com/2016/07/27/解决toggleButton关闭状态初始化背景无效/</id>
    <published>2016-07-27T02:46:46.000Z</published>
    <updated>2016-10-21T02:30:51.552Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>做安卓开发想必最头疼的是“与IOS一样”了，<br>询问IOS这个怎么做的，那个怎么做的，<br>答曰：系统默认的/系统提供了···</li>
</ul>
<p>安卓也提供了toggleButton，不过项目开发中为了保持一致性，设计师基本需要用到开关的时候基本用的还是IOS得那种，于是我找到了<br><a href="https://github.com/zcweng/ToggleButton" target="_blank" rel="external">https://github.com/zcweng/ToggleButton</a>                      这哥们写的<br>用的时候发现在初始化的时候，会出现<strong>不绘制背景</strong>的问题。。。</p>
<ul>
<li>解决：<br>将onLayout中最后一句<code>offLineWidth = 0;</code>改成<code>calculateEffect(toggleOn?1:0);</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;做安卓开发想必最头疼的是“与IOS一样”了，&lt;br&gt;询问IOS这个怎么做的，那个怎么做的，&lt;br&gt;答曰：系统默认的/系统提供了···&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安卓也提供了toggleButton，不过项目开发中为了保持一致性，设计师基本需要用到开关的时候基本
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>radioGroup.check()执行了多次OnCheckedChangeListener()</title>
    <link href="http://yoursite.com/2016/07/24/radioGroup.check()%E6%89%A7%E8%A1%8C%E4%BA%86%E5%A4%9A%E6%AC%A1OnCheckedChangeListener()/"/>
    <id>http://yoursite.com/2016/07/24/radioGroup.check()执行了多次OnCheckedChangeListener()/</id>
    <published>2016-07-24T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:09.917Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>问题：<br>我对某个radioButton里面写了个startActivity跳转到另一个界面，然后那个界面finish()之前需要调用radioGroup.check(),发现又跳转进这个界面了，纳闷之下，debug走起，发现OnCheckedChangeListener()走了好几次，所以页面又被启动了。</p>
</li>
<li><p>解决：<br>将radioGroup.check() 替换成radioButton.setChecked(true);</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题：&lt;br&gt;我对某个radioButton里面写了个startActivity跳转到另一个界面，然后那个界面finish()之前需要调用radioGroup.check(),发现又跳转进这个界面了，纳闷之下，debug走起，发现OnCheckedChan
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>Unique Constraint Failded</title>
    <link href="http://yoursite.com/2016/07/20/Unique%20Constraint%20Failded/"/>
    <id>http://yoursite.com/2016/07/20/Unique Constraint Failded/</id>
    <published>2016-07-20T02:46:46.000Z</published>
    <updated>2016-10-21T02:31:03.124Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>今天碰到个奇怪的问题<br>数据库建表的时候，主键是这样的<code>_id INTEGER PRIMARY KEY AUTOINCREMENT</code><br>插入第一条数据没问题，插入第2条数据的时候却弹了个Unique Constraint Failded xxx._id,<br>说主键的唯一性约束出错？？<br>通过debug发现插入的第一条数据的_id为0，我们知道设置的主键应该是从1开始自增的，那0是怎么回事？</p>
</li>
<li><p>解决问题<br>排查发现是<strong>插入的时候多了一个表中没有的字段</strong>，此时插入不会出错，只是会插在0的位置，如果继续插入不存在的字段，sqlite还会插在0的位置，就导致了唯一性约束出错。<br>将插入的代码改掉就好了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;今天碰到个奇怪的问题&lt;br&gt;数据库建表的时候，主键是这样的&lt;code&gt;_id INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;br&gt;插入第一条数据没问题，插入第2条数据的时候却弹了个Unique Constraint Fa
    
    </summary>
    
    
      <category term="problems" scheme="http://yoursite.com/tags/problems/"/>
    
  </entry>
  
</feed>
