<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AS的一些设置</title>
      <link href="/2021/05/31/20210531%20AS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/05/31/20210531%20AS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><ol><li>注释快捷键的时候，不要顶格，而与上一行对齐</li></ol><p>Editor-Code Style-Kotlin-Code Generation<br>将Line comment at first column 勾去掉<br>将Add a space at comment start勾上</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20210310 flutter web 页面空白 canvaskit</title>
      <link href="/2021/03/10/20210310%20flutter%20web%20%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%20canvaskit/"/>
      <url>/2021/03/10/20210310%20flutter%20web%20%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD%20canvaskit/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><p>问题：flutter web页面空白</p></li><li><p>原因：flutter会在不同平台自动选择渲染引擎，你当前如果使用的事canvaskit并且无法加载，就白屏了</p></li><li><p>解决：</p><ol><li><p>F12，检查是否有<code>Failed to load resource: net::ERR_CONNECTION_CLOSED ---&gt; canvaskit.js</code></p></li><li><p>如果有，就是你网页没下载成功（这玩意可能要科学上网，并且还挺大的 7M左右）。</p><p>找到你flutter sdk的安装目录下的flutter\bin\cache\flutter_web_sdk\lib_engine\engine\canvaskit\initialization.dart，</p><p>定位到</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> canvasKitBaseUrl = <span class="built_in">String</span>.fromEnvironment(</span><br><span class="line">  <span class="string">'FLUTTER_WEB_CANVASKIT_URL'</span>,</span><br><span class="line">  defaultValue: <span class="string">'https://unpkg.com/canvaskit-wasm@0.24.0/bin/'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>去上面那网址把文件全部下载到你本地，包括profiling文件夹、canvaskit.js、canvaskit.wasm，并将本地路径配置给defaultValue即可，注意要以<code>/</code>结尾。</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绘制文字的对齐与跳过图片</title>
      <link href="/2020/09/11/20200911%20%E7%BB%98%E5%88%B6%E6%96%87%E5%AD%97%E7%9A%84%E5%AF%B9%E9%BD%90%E4%B8%8E%E8%B7%B3%E8%BF%87%E5%9B%BE%E7%89%87/"/>
      <url>/2020/09/11/20200911%20%E7%BB%98%E5%88%B6%E6%96%87%E5%AD%97%E7%9A%84%E5%AF%B9%E9%BD%90%E4%B8%8E%E8%B7%B3%E8%BF%87%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h6 id="绘制空心圆stroke问题"><a href="#绘制空心圆stroke问题" class="headerlink" title="绘制空心圆stroke问题"></a>绘制空心圆stroke问题</h6><p>stroke并不是在圆的半径外面，再往外绘制一个圆，而是就在圆周处绘制，绘制粗细等于<code>paint.strokeWidth</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleView</span></span>(context: Context?, attrs: AttributeSet?) : View(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> paint = Paint(Paint.ANTI_ALIAS_FLAG)</span><br><span class="line">    <span class="keyword">val</span> RADIUS = <span class="number">150F</span>.dp</span><br><span class="line">    <span class="keyword">var</span> centerX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">var</span> centerY = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSizeChanged</span><span class="params">(w: <span class="type">Int</span>, h: <span class="type">Int</span>, oldw: <span class="type">Int</span>, oldh: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh)</span><br><span class="line">        centerX = w/<span class="number">2f</span></span><br><span class="line">        centerY = h/<span class="number">2f</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">        <span class="comment">// 描个灰色的边，宽15dp</span></span><br><span class="line">        paint.color = Color.LTGRAY</span><br><span class="line">        paint.strokeWidth = <span class="number">15f</span>.dp</span><br><span class="line">        paint.style = Paint.Style.STROKE</span><br><span class="line">        canvas.drawCircle(centerX,centerY,RADIUS,paint)</span><br><span class="line">        <span class="comment">// 描个青色的边，宽8dp</span></span><br><span class="line">        paint.color = Color.CYAN</span><br><span class="line">        paint.strokeCap = Paint.Cap.ROUND</span><br><span class="line">        paint.strokeWidth = <span class="number">8f</span>.dp</span><br><span class="line">        canvas.drawCircle(centerX,centerY,RADIUS,paint)</span><br><span class="line">        <span class="comment">// 在圆周画2条竖线，表示圆周在哪</span></span><br><span class="line">        paint.strokeWidth = <span class="number">1f</span></span><br><span class="line">        paint.color = Color.RED</span><br><span class="line">        canvas.drawLine(centerX-RADIUS,<span class="number">0f</span>,centerX-RADIUS,<span class="number">1000f</span>,paint)</span><br><span class="line">        canvas.drawLine(centerX+RADIUS,<span class="number">0f</span>,centerX+RADIUS,<span class="number">1000f</span>,paint)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/09/11/Vu5otkOwPThyd39.png" alt="1.png"></p><p>可以看到，stroke并不是在圆的<strong>外面</strong>绘制，而是就在圆周处绘制，15的宽度会是圆外画7，圆内画7。<br>顺便画圆也可以用drawArc和drawOval来实现。</p><hr><p>进入正题</p><h3 id="绘制文字纵向居中和左对齐"><a href="#绘制文字纵向居中和左对齐" class="headerlink" title="绘制文字纵向居中和左对齐"></a>绘制文字纵向居中和左对齐</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleView</span></span>(context: Context?, attrs: AttributeSet?) : View(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> paint = Paint(Paint.ANTI_ALIAS_FLAG).apply &#123;</span><br><span class="line">        style = Paint.Style.STROKE</span><br><span class="line">        strokeCap = Paint.Cap.ROUND</span><br><span class="line"></span><br><span class="line">        strokeWidth = <span class="number">15f</span>.dp</span><br><span class="line">        textSize = <span class="number">34f</span>.dp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> RADIUS = <span class="number">150F</span>.dp</span><br><span class="line">    <span class="keyword">var</span> centerX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">var</span> centerY = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSizeChanged</span><span class="params">(w: <span class="type">Int</span>, h: <span class="type">Int</span>, oldw: <span class="type">Int</span>, oldh: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh)</span><br><span class="line">        centerX = w / <span class="number">2f</span></span><br><span class="line">        centerY = h / <span class="number">2f</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testStr = <span class="string">"abab"</span></span><br><span class="line">    <span class="keyword">val</span> textBound = Rect()</span><br><span class="line">    <span class="keyword">val</span> fontMetrics = Paint.FontMetricsInt()</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line"></span><br><span class="line">        paint.color = Color.LTGRAY</span><br><span class="line">        canvas.drawArc(</span><br><span class="line">            centerX - RADIUS,</span><br><span class="line">            centerY - RADIUS,</span><br><span class="line">            centerX + RADIUS,</span><br><span class="line">            centerY + RADIUS,</span><br><span class="line">            -<span class="number">90f</span>,</span><br><span class="line">            <span class="number">360f</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            paint</span><br><span class="line">        )</span><br><span class="line">        paint.color = Color.BLUE</span><br><span class="line">        canvas.drawArc(</span><br><span class="line">            centerX - RADIUS,</span><br><span class="line">            centerY - RADIUS,</span><br><span class="line">            centerX + RADIUS,</span><br><span class="line">            centerY + RADIUS,</span><br><span class="line">            -<span class="number">90f</span>,</span><br><span class="line">            <span class="number">250f</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            paint</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 画个圆心，定个位置，方便比较文字的纵向坐标</span></span><br><span class="line">        paint.strokeWidth = <span class="number">5f</span>.dp</span><br><span class="line">        canvas.drawPoint(centerX, centerY, paint)</span><br><span class="line">        paint.strokeWidth = <span class="number">0f</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ————————————————————— 下面为调整文字居中对齐的2种方式 ———————————————————————</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法一、静态文字，可以直接测量高度,这是从[1,0]开始测量的，top为负数</span></span><br><span class="line">        <span class="comment">// [2,-39][112,1]</span></span><br><span class="line">        paint.getTextBounds(testStr, <span class="number">0</span>, testStr.length, textBound)</span><br><span class="line">        canvas.drawText(</span><br><span class="line">            testStr,</span><br><span class="line">            centerX - (textBound.right + textBound.left) / <span class="number">2</span>,</span><br><span class="line">            centerY - (textBound.top + textBound.bottom) / <span class="number">2</span>,</span><br><span class="line">            paint</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 方法二、动态文字，可以用文字五条定位线中的top~bottom （包含留白）或 ascent ~ descent（文字主体部分）</span></span><br><span class="line">        <span class="comment">// FontMetricsInt: top=-54 ascent=-47 descent=12 bottom=14 leading=0</span></span><br><span class="line">        <span class="comment">// 和textBound一样，这玩意也是top负数</span></span><br><span class="line">        paint.getFontMetricsInt(fontMetrics)</span><br><span class="line">        Log.d(javaClass.simpleName,fontMetrics.toString())</span><br><span class="line">        canvas.drawText(</span><br><span class="line">            testStr, centerX - (textBound.right + textBound.left) / <span class="number">2</span>,</span><br><span class="line">            centerY - (fontMetrics.top + fontMetrics.bottom) / <span class="number">2</span>,</span><br><span class="line">            paint</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ————————————————————— 下面为调整文字左对齐 ———————————————————————</span></span><br><span class="line">        <span class="comment">// 横坐标为0的话，如果2行的字体大小差距很大，依然不会对齐，因为每个字符有自然间距</span></span><br><span class="line">        <span class="comment">// 通过textBound.left进行调整后，基本就对齐了，但还是会差几个像素，这是系统问题，没法解决</span></span><br><span class="line">        paint.color = Color.BLACK</span><br><span class="line">        paint.textSize = <span class="number">14f</span>.dp</span><br><span class="line">        paint.getTextBounds(testStr,<span class="number">0</span>,testStr.length,textBound)</span><br><span class="line">        canvas.drawText(testStr, -textBound.left.toFloat(),-textBound.top.toFloat(), paint)</span><br><span class="line"></span><br><span class="line">        paint.textSize = <span class="number">150f</span>.dp</span><br><span class="line">        paint.getTextBounds(testStr,<span class="number">0</span>,testStr.length,textBound)</span><br><span class="line">        canvas.drawText(testStr,  -textBound.left.toFloat(),-textBound.top.toFloat(), paint)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绘制文字跳过图片"><a href="#绘制文字跳过图片" class="headerlink" title="绘制文字跳过图片"></a>绘制文字跳过图片</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiTextView</span></span>(context: Context?, attrs: AttributeSet?) : View(context, attrs) &#123;</span><br><span class="line">    <span class="keyword">val</span> testStr =</span><br><span class="line">        <span class="string">"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et turpis tortor. Sed efficitur arcu tellus, vitae elementum ante bibendum in. Proin id tortor sapien. Donec sit amet dictum elit. Nam bibendum quam elit, vel malesuada dolor rhoncus sit amet. Aliquam congue finibus dui, ut finibus tellus sollicitudin vitae. Aliquam finibus felis sed imperdiet viverra. Phasellus id lorem justo. Donec vehicula a augue at lacinia. Etiam tincidunt eros sed euismod aliquam.\n"</span> +</span><br><span class="line">                <span class="string">"In hac habitasse platea dictumst. Ut tempor maximus mauris et semper. In facilisis, augue sit amet imperdiet porttitor, turpis sapien pharetra quam, vitae porta neque ligula nec ligula. Sed sed elit erat. Praesent viverra dui ac velit pretium, non volutpat nisi euismod. Praesent at condimentum felis, ut convallis augue. Nam ut velit eros. Curabitur tristique, nisl eget porta pretium, justo quam mollis nisi, at posuere orci dolor eu enim. Integer ac dui vitae tellus vestibulum egestas. Sed congue vitae elit ac posuere. Pellentesque ut risus id nibh porttitor consequat ut luctus neque. Duis a lectus facilisis, eleifend massa a, lobortis libero."</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> paint = Paint(Paint.ANTI_ALIAS_FLAG)</span><br><span class="line">    <span class="keyword">val</span> bmpWidth = <span class="number">200f</span>.dp.toInt()</span><br><span class="line">    <span class="keyword">val</span> bmpTopPadding = <span class="number">100</span></span><br><span class="line">    <span class="keyword">val</span> options = BitmapFactory.Options()</span><br><span class="line">    <span class="keyword">val</span> fontMetrics = Paint.FontMetricsInt()</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> bmp: Bitmap</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSizeChanged</span><span class="params">(w: <span class="type">Int</span>, h: <span class="type">Int</span>, oldw: <span class="type">Int</span>, oldh: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh)</span><br><span class="line"></span><br><span class="line">        options.inJustDecodeBounds = <span class="literal">true</span> <span class="comment">// 不实际读取像素，只测量大小，几乎不消耗时间和空间</span></span><br><span class="line">        BitmapFactory.decodeResource(resources, R.drawable.kana, options)</span><br><span class="line">        options.inJustDecodeBounds = <span class="literal">false</span></span><br><span class="line">        options.inDensity = options.outWidth</span><br><span class="line">        options.inTargetDensity = bmpWidth</span><br><span class="line">        bmp = BitmapFactory.decodeResource(resources, R.drawable.kana, options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制图片 图片在[onSizeChanged]中初始化了</span></span><br><span class="line">        canvas.drawBitmap(bmp, width.toFloat() - bmpWidth, bmpTopPadding.toFloat(), paint)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制文字,绕过图片</span></span><br><span class="line">        paint.textSize = <span class="number">20f</span>.dp</span><br><span class="line">        paint.getFontMetricsInt(fontMetrics)</span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> verticalOffset = -fontMetrics.top <span class="comment">//纵向初始偏移量</span></span><br><span class="line">        <span class="keyword">while</span> (start &lt; testStr.length) &#123;</span><br><span class="line">            <span class="keyword">var</span> maxWidth =</span><br><span class="line">                <span class="keyword">if</span> (verticalOffset + fontMetrics.bottom &lt; bmpTopPadding</span><br><span class="line">                    || verticalOffset + fontMetrics.top &gt; bmpTopPadding + bmp.height</span><br><span class="line">                ) &#123;</span><br><span class="line">                    width</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    width - bmpWidth</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">val</span> count =</span><br><span class="line">                paint.breakText(testStr, start, testStr.length, <span class="literal">true</span>, maxWidth.toFloat(), <span class="literal">null</span>)</span><br><span class="line">            canvas.drawText(testStr, start, start + count, <span class="number">0f</span>, verticalOffset.toFloat(), paint)</span><br><span class="line">            start += count</span><br><span class="line">            <span class="comment">//fontSpacing是基于字体和textSize定下的一行所占空间</span></span><br><span class="line">            verticalOffset += paint.fontSpacing.toInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/09/11/fyR3sdtn4K5juFe.png" alt="2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ObjectBox增加新字段的问题</title>
      <link href="/2020/07/24/20200724%20ObjectBox%E5%A2%9E%E5%8A%A0%E6%96%B0%E5%AD%97%E6%AE%B5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/24/20200724%20ObjectBox%E5%A2%9E%E5%8A%A0%E6%96%B0%E5%AD%97%E6%AE%B5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>新加字段后，数据库新加一列，老数据为null，但kotlin定义为非null，此时若字段为number则ObjectBox查询后会给一个默认的0，但若是string就会报错了。<br>在2.6.0之后，官方有了报错提示，可以查看到具体报错信息。<br>若新加字段为string的话，在字段上增加<code>@DefaultValue(&quot;&quot;)</code>即可</p><p><a href="https://github.com/objectbox/objectbox-java/issues/876" target="_blank" rel="noopener">NativeCrash Cursor.nativeGetEntity</a></p><p><a href="https://github.com/objectbox/objectbox-java/issues/157" target="_blank" rel="noopener">Default values for new properties</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ObjectBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学</title>
      <link href="/2020/07/13/20200713%20%E7%BB%8F%E6%B5%8E%E5%AD%A6/"/>
      <url>/2020/07/13/20200713%20%E7%BB%8F%E6%B5%8E%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/av5525125" target="_blank" rel="noopener">视频</a></p><h3 id="1-经济学简介"><a href="#1-经济学简介" class="headerlink" title="1. 经济学简介"></a>1. 经济学简介</h3><p>经济学是研究人与决策的科学。资源是有限的，如何合理的配置资源是经济学的研究目的。<br>宏观经济学：关注整体，国家产出、就业率、通货膨胀、经济发展，预测经济走向等；<br>微观经济学：关注如企业决策、个人决策、特定经济现象、问题等；</p><h3 id="2-专业化与贸易"><a href="#2-专业化与贸易" class="headerlink" title="2. 专业化与贸易"></a>2. 专业化与贸易</h3><p>专业化：专业的人做专业的事可以提升生产效率。<br>贸易：使人和国家变得富有。《国富论》</p><p>个人层面：如果没有专业化，想制作个披萨得自己种庄稼，自己设计、制造烘焙机器，自己下厨房等等，这样效率极低。</p><p>国家层面：每个国家的工业体系都不一样，所以在生产每一种产品都有绝对优势和相对优势。由于生产可能性边界（ppc）的存在，每个国家生产最具优势的产品可以获得最大的利益（但因为政治因素，这是不可能的）。<br>生产可能性边界：<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/QRijxwmMus5cZ1h.png" alt="1.png"><br>横轴表示举全国之力可以生产的鞋子总量，纵轴表示举全国之力可以生产的飞机总量。<br>如果消耗工人、工厂、原材料等资源去生产鞋子，那么飞机产量就会降低，形成的曲线就是图中黄线。在黄线内的某一点都是资源没有得到有效利用的生产方式，黄线外的所有点都是用尽所有资源都不可能达到的。</p><p>绝对优势：都是用尽所有资源的前提下，美国能生产1000吨鞋子，中国能生产800吨，美国就拥有绝对优势。</p><p>相对优势：美国生产1架飞机，鞋子减产2吨。中国生产1架飞机，鞋子减产8吨。这样美国的飞机拥有相对优势，中国的鞋子拥有相对优势。</p><p>比如美国用1架飞机换中国的4吨鞋子。<br>对美国来说，1架飞机就能换4吨鞋子，自己造的话得用2架飞机才能换4吨鞋子，划算！<br>对中国来说，4吨鞋子换1架飞机，自己造的话得8吨鞋子才能换1架飞机，划算！<br>国际贸易可以使双方都受益。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/LFhXkJHoBrAuVSQ.png" alt="2.png"></p><h3 id="3-经济体系"><a href="#3-经济体系" class="headerlink" title="3. 经济体系"></a>3. 经济体系</h3><p>资源是有限的，欲望是无穷的。没有无线的原材料、工人和时间。<br>经济体系就是3个问题：<br>生产什么？怎么生产？生产给谁？<br>当前世界分为2种经济体系：市场经济、计划经济，区别是生产资料由谁控制（土地、劳动力、资本）。现在世界没有完全的市场经济和计划经济。美国也需要政府出面维持治安、消防，设立环保法规来限制企业。完全的市场经济完全逐利，对于国家的工业体系会出问题。中国也是既有私有制公有制并存。</p><h3 id="4-供给和需求"><a href="#4-供给和需求" class="headerlink" title="4. 供给和需求"></a>4. 供给和需求</h3><h5 id="过剩"><a href="#过剩" class="headerlink" title="过剩"></a>过剩</h5><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/J1B26HyqnG8X3gc.png" alt="3.png"><br>横坐标是草莓的量，纵坐标是草莓的单价。<br>黄线表示需求曲线，价格越高，能卖出的越少，价格越低，卖的越多。<br>绿线表示供给曲线，价格越高，利润越高，果农当然愿意种的更多。<br>图中10刀的时候，供给量达到1000，可是需求量只有200，就是过剩。</p><h5 id="短缺"><a href="#短缺" class="headerlink" title="短缺"></a>短缺</h5><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/6MgYCk9o35VhA4m.png" alt="4.png"><br>如果卖的很便宜，只要1刀，利润低，果农不愿意种，供给量就低，只有200。<br>但因为便宜，买的人多，需求量达到1000，货物供不应求，这就是短缺。<br>#####均衡价格与均衡数量<br>两线相交时的纵坐标就是均衡价格，横坐标就是均衡数量。<br>但价格总是不断波动的，也会有外部因素使曲线发生偏移，比如天气影响产量，不同草莓的种类、种植成本都会影响最终价格</p><p>当需求量降低，需求曲线左移，均衡价格和均衡数量都要降低，政府也就没有必要补贴果农，因为市场上的草莓够多了，再继续生产就资源配置来说是低效的。</p><h5 id="价格波动"><a href="#价格波动" class="headerlink" title="价格波动"></a>价格波动</h5><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/9eXczQdE5jMbDU6.png" alt="5.png"></p><p>2014年美国汽油价格下降，世界经济下行，降低了汽油的需求量，需求曲线左移。同时中东改进汽油水平，使供给量提升，供给曲线右移。两者结合，市场价会趋近均衡价，从图中看来，就是降低了。</p><p>但完全的市场化是有问题的，比如消防，医疗等。你家着火了，消防跟你慢慢谈价格？器官捐赠会永远落在富人手里等。</p><h3 id="5-宏观经济"><a href="#5-宏观经济" class="headerlink" title="5.宏观经济"></a>5.宏观经济</h3><p>研究繁荣与萧条、就业与税收等；可以理解经济运行的原理；<br>决策目标：<strong>1.保持经济增长；2.降低失业率；3.保持物价稳定；</strong><br>3个目标同时达成，通常国民是幸福的。</p><p>是否达到上述3个条件的评判指标：<br><strong>a.国内生产总值GDP（GrossDomesticProduct）；b.失业率；c.通货膨胀率；</strong><br>GDP：一段时间，通常是一年内一个国家境内所有最终产品和服务的价值；必须是新产生的；（买二手商品不算入GDP，买金融商品比如股票，公司收购等，因为这些不是新产生的。当然非法交易毒品军火也不算入GDP，因为交易记录不会告诉政府。）<br>使用同样的货币衡量GDP以便对比，但是通货膨胀导致不准确（比如用中商品不同国家价格不同）；<br>采用校正后的GDP衡量（RealGDP）；原本用于核算国民收入，可能并不完全反应国家经济状况；<br>失业率：失业人口数量除以劳动人口数量x100；劳动人口不包括选择不工作的人及无劳动力和未到法定年龄的人；<br>摩擦性失业：暂时性的，如找工作间隙；结构性失业：市场不再需要的，比如科技进步造成的某些岗位不再被需要；<br>周期性失业：由衰退引起，需要避免；<br>当只有摩擦性失业及结构性失业时，叫充分就业；这时的失业率叫自然失业率；<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/aDTuMSXJpFLfz3Y.png" alt="6.png"></p><p>通货膨胀：通过追踪一定量一般采购物品的价格（即marketbasket），通货膨胀率就是价格随时间变化的百分比；同样的钱能买的东西少了，物价上涨，工人要求涨薪，企业成本上升；<br>通货紧缩：物价下降，企业利润降低，裁员，导致消费下降，企业更得不到利润；物价下跌，严重衰退往往伴随通货紧缩；<br>经济繁荣与萧条的循环叫商业周期（businesscycle）；<br>经济成分：消费支出、企业支出（投资）、政府支出、尽出口；任何一个成分出问题都会导致经济放缓；</p><h3 id="6-生产力与增长"><a href="#6-生产力与增长" class="headerlink" title="6.生产力与增长"></a>6.生产力与增长</h3><p>为什么有的国家gdp高有的低？<br>联合国调查人类发展指数HDI，发现人均gdp高的国家有更低的贫穷、疾病和死亡率。<br>科技发展带来的生产力提升，会提高人均gdp，现在美国人均gdp是100年前的8倍。近些年也一直在稳定增长，可中产家庭收入没有变化——<strong>收入不平等</strong>。</p><h3 id="7-通货膨胀与泡沫"><a href="#7-通货膨胀与泡沫" class="headerlink" title="7.通货膨胀与泡沫"></a>7.通货膨胀与泡沫</h3><p>CPI：消费者物价指数，一年内消费商品/基准年消费*100，用于衡量通胀率。这个指数能显示物价增长速度。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/CrjlXShKwTfE5RQ.png" alt="美、日、委内瑞拉的通胀率"><br>通货膨胀：钱多了，商品和服务少了。<br>需求推动通胀：钱多了，竞价导致物价上涨。<br>成本推动通胀：资源减少，比如石油，运输成本上升，所有商品涨价。<br>泡沫：<a href="https://nanayaharuki.github.io/2019/11/19/20191118%20%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86%E7%AF%87%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">另一边文章</a>提过，投机分子认为某个东西会永远涨价，引发大家都去购买，需求推动通胀，该商品价格远超价值就是泡沫。当不能卖给下一家时，泡沫就会破灭。</p><h3 id="8-财政政策"><a href="#8-财政政策" class="headerlink" title="8.财政政策"></a>8.财政政策</h3><p>高失业率带来高自杀率、家庭暴力和社会动荡。高通胀和高消费榨干存款，带来抗议和动乱。<br>扩张性财政政策：经济下行，政府提高支出、减少税收。政府提高支出（比如基建），创造工作岗位，提升收入，从而提高消费，刺激经济增长。可是政府提高支出却又不能收税，因为提高税收会进一步降低消费者的支出，与政策相悖。<br>减少税收是一样的道理，可支配收入的提高可以刺激消费。<br>紧缩性财政政策：经济下行，政府减少支出，提高税收。延缓通胀。</p><h3 id="9-赤字与负债"><a href="#9-赤字与负债" class="headerlink" title="9. 赤字与负债"></a>9. 赤字与负债</h3><p>赤字：一年的支出大于税收<br>负债：赤字的积累<br>负债率：负债/GDP,GDP高，还钱就更容易，负债率用来表示偿还能力</p><h3 id="10-货币政策"><a href="#10-货币政策" class="headerlink" title="10.货币政策"></a>10.货币政策</h3><p>中央银行：美联储Fed、欧洲中央银行ECB等有2个重要工作：<br>1.调控和监管商业银行，确保他们有足够的准备金应付挤兑。<br>2.货币政策，增加减少货币供给来调整经济</p><p>央行增加货币供给、商业银行有更多的钱借，人们会比较不同银行利率选择低的，利率越低，还钱越容易，能刺激消费者借钱花钱 从而刺激经济，即<strong>扩张性货币政策</strong>。<br><strong>那么央行怎么控制货币供给？</strong><br>1、存款准备金率。<br>用户存款到银行，存款准备金率如果是5%，则这5%的钱是要存入央行或者就在商业银行，这5%叫准备金。准备金的钱不允许借出去再投资。央行通过更改准备金率来控制货币供给，比如从5%提高到10%，能流向市场的钱就变少了。<br>2、贴现率<br>商业银行可以向央行借钱，借钱的利率就是贴现率，降低贴现率让借钱更容易，就可以提高货币供给。<br>3、公开市场操作<br>央行购买或出售政府短期债券，商业银行持有这些债券有利息，风险又小。央行从银行购买债券，商业银行有了更多的现金，就提高了货币供给。</p><h3 id="11-货币与金融"><a href="#11-货币与金融" class="headerlink" title="11.货币与金融"></a>11.货币与金融</h3><p>金融市场有股票和债券，让借款人从很多人那里获得资本，分散了风险。对借出方来说，钱被分散给了几十几百个机构，风险同样被分散了。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航栏的去除和显示（不是隐藏）</title>
      <link href="/2020/06/29/20200629%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E5%8E%BB%E9%99%A4%E5%92%8C%E6%98%BE%E7%A4%BA(%E4%B8%8D%E6%98%AF%E9%9A%90%E8%97%8F)/"/>
      <url>/2020/06/29/20200629%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E5%8E%BB%E9%99%A4%E5%92%8C%E6%98%BE%E7%A4%BA(%E4%B8%8D%E6%98%AF%E9%9A%90%E8%97%8F)/</url>
      
        <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>搜了很多文章，控制导航栏是这么干的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.decorView.systemUiVisibility &#x3D;</span><br><span class="line">View.SYSTEM_UI_FLAG_FULLSCREEN or</span><br><span class="line">View.SYSTEM_UI_FLAG_HIDE_NAVIGATION  or</span><br><span class="line">        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or</span><br><span class="line">View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY</span><br></pre></td></tr></table></figure><p>这种只是隐藏了，触摸屏幕还是能划出来的，而且点击<code>EditText</code>也会因为输入法的弹出而与导航栏联动。</p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>在Android源码<code>PhoneWindowManager.java</code>中可以看到这么一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String navBarOverride &#x3D; SystemProperties.get(&quot;qemu.hw.mainkeys&quot;);</span><br><span class="line">if (&quot;1&quot;.equals(navBarOverride)) &#123;</span><br><span class="line">    mHasNavigationBar &#x3D; false;</span><br><span class="line">&#125; else if (&quot;0&quot;.equals(navBarOverride)) &#123;</span><br><span class="line">    mHasNavigationBar &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在<code>system/build.prop</code>内增加一行<code>qemu.hw.mainkeys=1</code>，即可去掉导航栏。改为0即可显示导航栏。<br>android没有vim，编辑文件我是pull到电脑中改完了再push进去的。</p><p><code>adb pull /system/build.prop d:/test/build.prop</code><br><code>adb push d:/test/build.prop /system/build.prop</code>  </p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MaterialButtonToggleGroup中按钮样式</title>
      <link href="/2020/05/20/20200520%20MaterialButtonToggleGroup%E4%B8%AD%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/"/>
      <url>/2020/05/20/20200520%20MaterialButtonToggleGroup%E4%B8%AD%E6%8C%89%E9%92%AE%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>我这边做因为数据是动态获取的，本来想用recyclerview来做，突然想起来某个版本加了这东西。看演示，别人的是这样的，</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/cVT7HzqbjBiUZrS.gif" alt="aaq7i-muy3j.gif"><br>我做完是这样，注意这不是全选中，而是全没选中的样子。。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/vKVjuy7O59FBNAa.png" alt="21.png"><br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/14/Y7Fzi6NkrHGX25h.png" alt="22.png"></p><p>然后查了下<a href="[https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup](https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup)">官网</a>，发现要对<code>MaterialButtonToggleGroup</code>内部的<code>MaterialButton</code>加上<code>style=&quot;?attr/materialButtonOutlinedStyle&quot;</code>的样式。<br>因为我是动态添加的，所以没有在xml写了，代码是这样的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">btnToggleGroup.addView(createBtnToggle( <span class="string">"-"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createBtnToggle</span><span class="params">(content: <span class="type">String</span>)</span></span>: Button &#123;</span><br><span class="line">    <span class="keyword">val</span> btn = MaterialButton(</span><br><span class="line">        requireContext(),</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        R.attr.materialButtonOutlinedStyle</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> layoutParam = ViewGroup.LayoutParams(</span><br><span class="line">        ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">        ViewGroup.LayoutParams.WRAP_CONTENT</span><br><span class="line">    )</span><br><span class="line">    btn.layoutParams = layoutParam</span><br><span class="line">    btn.setPadding(<span class="number">16f</span>.dp.toInt(), <span class="number">8f</span>.dp.toInt(), <span class="number">16f</span>.dp.toInt(), <span class="number">8f</span>.dp.toInt())</span><br><span class="line">    btn.text = content</span><br><span class="line">    btn.textSize = <span class="number">20f</span>.sp</span><br><span class="line">    <span class="keyword">return</span> btn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在xml里用，那直接官网上这样就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.google.android.material.button.MaterialButtonToggleGroup</span><br><span class="line">     xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">     android:id&#x3D;&quot;@+id&#x2F;toggle_button_group&quot;</span><br><span class="line">     android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">     android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">     &lt;com.google.android.material.button.MaterialButton</span><br><span class="line">         style&#x3D;&quot;?attr&#x2F;materialButtonOutlinedStyle&quot;</span><br><span class="line">         android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:text&#x3D;&quot;@string&#x2F;button_label_private&quot;&#x2F;&gt;</span><br><span class="line">     &lt;com.google.android.material.button.MaterialButton</span><br><span class="line">         style&#x3D;&quot;?attr&#x2F;materialButtonOutlinedStyle&quot;</span><br><span class="line">         android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:text&#x3D;&quot;@string&#x2F;button_label_team&quot;&#x2F;&gt;</span><br><span class="line">     &lt;com.google.android.material.button.MaterialButton</span><br><span class="line">         style&#x3D;&quot;?attr&#x2F;materialButtonOutlinedStyle&quot;</span><br><span class="line">         android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:text&#x3D;&quot;@string&#x2F;button_label_everyone&quot;&#x2F;&gt;</span><br><span class="line">     &lt;com.google.android.material.button.MaterialButton</span><br><span class="line">         style&#x3D;&quot;?attr&#x2F;materialButtonOutlinedStyle&quot;</span><br><span class="line">         android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">         android:text&#x3D;&quot;@string&#x2F;button_label_custom&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;com.google.android.material.button.MaterialButtonToggleGroup&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio3.6.3 没有new flutter project</title>
      <link href="/2020/05/12/20200512%20AndroidStudio3.6.3%20%E6%B2%A1%E6%9C%89new%20flutter%20project/"/>
      <url>/2020/05/12/20200512%20AndroidStudio3.6.3%20%E6%B2%A1%E6%9C%89new%20flutter%20project/</url>
      
        <content type="html"><![CDATA[<p>很久之前，AS就提示更新了，因为有项目做，不敢贸然改变环境就放下来了。现在有空就升级了一波，然后就发生了标题上的事情。直接上解决办法。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/Cbzq6x9seiZNcLW.png" alt="1.png"><br>点击Help- About，查看当前AS的版本，图上的是192.7142.xxxxxx。</p><p>去<a href="[https://plugins.jetbrains.com/plugin/6351-dart/versions](https://plugins.jetbrains.com/plugin/6351-dart/versions)">dart</a>和<a href="[https://plugins.jetbrains.com/plugin/9212-flutter/versions](https://plugins.jetbrains.com/plugin/9212-flutter/versions)">flutter</a>网站上查询与你AS匹配的插件版本。</p><p>注意这里先切换成AS<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/rg874HbhFxWvCkn.png" alt="2.png"></p><p>我AS3.6.3的版本是192.7142，所以用这个，将dart和flutter都下载下来。<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/syNu9JIc8lvD6OU.png" alt="3.png"></p><p>然后回到AS，File-Settings-Plugins<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/fkFQ2JZLuBhRNCy.png" alt="4.png"><br>点这个齿轮，Install Plugin from Disk,选择你刚刚下载好的插件压缩包安装，然后重启AS即可。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin 数字操作符运算结果不对的问题</title>
      <link href="/2020/03/13/20200313%20kotlin%20%E6%95%B0%E5%AD%97%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C%E4%B8%8D%E5%AF%B9%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/13/20200313%20kotlin%20%E6%95%B0%E5%AD%97%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C%E4%B8%8D%E5%AF%B9%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">data class M(val int: Int?)</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">fun test() &#123;</span><br><span class="line">    val m1 &#x3D; M(0)</span><br><span class="line">    val m2 &#x3D; M(1)</span><br><span class="line">    val m3 &#x3D; M(0)</span><br><span class="line"></span><br><span class="line">    val i &#x3D; (m1.int ?: 0) + (m2.int ?: 0) + (m3.int ?: 0)</span><br><span class="line"></span><br><span class="line">    val j &#x3D; (m1.int ?: 0)</span><br><span class="line">                +(m2.int ?: 0)</span><br><span class="line">                +(m3.int ?: 0)</span><br><span class="line"></span><br><span class="line">    println(i)</span><br><span class="line">    println(j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果<code>i</code> <code>j</code>分别是1和0，百思不得骑姐。<br>后来发现kotlin是将<code>val j = (m1.int?:0)</code>当做一行，直接将<code>m1.int</code>赋值给了<code>j</code><br><code>+(m2.int?:0)</code>和<code>(m3?:int?:0)</code>当做另起一行了。</p><p>你要是<code>++(int)</code>当做一行还能理解，<code>+（int）</code>居然不报错是为啥。。谁加谁啊<br>以后碰到运算<code>j</code>这种情况，在最外面多加个括号吧</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误[ObjectBox] Relation target class &#39;Long&#39; defined in class &#39;LocalMessage&#39; could not be foun...</title>
      <link href="/2020/02/28/20200228%20%5BObjectBox%5D%20Relation%20target%20class%20&#39;Long&#39;%20defined%20in%20class%20&#39;LocalMessage&#39;%20could%20not%20be%20foun.../"/>
      <url>/2020/02/28/20200228%20%5BObjectBox%5D%20Relation%20target%20class%20&#39;Long&#39;%20defined%20in%20class%20&#39;LocalMessage&#39;%20could%20not%20be%20foun.../</url>
      
        <content type="html"><![CDATA[<p>使用<code>ObjectBox</code>时遇到的迷之问题，看到这个提示，怎么检查那个类都是加了<code>@Entity</code>注解的。<br>发生原因是：类里定义了<code>ObjectBox</code>不能理解的字段，比如<code>var atIds: MutableList&lt;Long&gt; = mutableListOf()</code>，要写个转换类加上去</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">DataX</span>（</span></span><br><span class="line">    <span class="meta">@Convert(converter = LongList2StringConverter::class, dbType = String::class)</span></span><br><span class="line">    <span class="keyword">var</span> atIds: MutableList&lt;<span class="built_in">Long</span>&gt; = mutableListOf()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LongList2StringConverter</span> : <span class="type">PropertyConverter</span>&lt;<span class="type">MutableList&lt;Long</span>&gt;, <span class="type">String&gt; &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">convertToDatabaseValue</span><span class="params">(entityProperty: <span class="type">MutableList</span>&lt;<span class="type">Long</span>&gt;?)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (entityProperty.isNullOrEmpty()) &#123;</span><br><span class="line">            <span class="string">"[]"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> jsa = JSONArray()</span><br><span class="line">            entityProperty.forEach &#123;</span><br><span class="line">                jsa.put(it)</span><br><span class="line">            &#125;</span><br><span class="line">            jsa.toString()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">convertToEntityProperty</span><span class="params">(databaseValue: <span class="type">String</span>?)</span></span>: MutableList&lt;<span class="built_in">Long</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> result = mutableListOf&lt;<span class="built_in">Long</span>&gt;()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (databaseValue.isNullOrEmpty()) &#123;</span><br><span class="line">            result</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> jsa = JSONArray(databaseValue)</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until jsa.length()) &#123;</span><br><span class="line">                result.add(jsa[i] <span class="keyword">as</span> <span class="built_in">Long</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法预料返回的是个什么，那不妨就从LinkedTreeMap中直接取数据。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ObjectBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端返回json相同字段，类型不同的处理方式（retrofit+gson）</title>
      <link href="/2020/02/28/20200228%20%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9Ejson%E7%9B%B8%E5%90%8C%E5%AD%97%E6%AE%B5%EF%BC%8C%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%EF%BC%88retrofit+gson%EF%BC%89/"/>
      <url>/2020/02/28/20200228%20%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9Ejson%E7%9B%B8%E5%90%8C%E5%AD%97%E6%AE%B5%EF%BC%8C%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%90%8C%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%EF%BC%88retrofit+gson%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>方法有很多，你可以自己拿<code>responseBody</code>里的<code>json</code>，一个个字段自己解析；也可以给<code>okhttp</code>添加拦截器来处理response内容。<br>这里提供一种简便的方法。</p><blockquote><p><code>Gson</code>在反序列化的时候，默认是将<code>{}</code>转成<code>LinkedTreeMap</code>，<code>[]</code> 转成<code>ArrayList</code>，value是数字的全部定义为了double。<br> 如果后端返回格式不规矩或者会变化的时候，将bean里定义的是<code>Any</code>或<code>*</code>即可</p></blockquote><p>比如有时返回的是这样<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/uIr83PATClWknd5.png" alt="1.png"><br>有时是这样<br><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/JyHfgh8mn1ltK7G.png" alt="2.png"><br>可以看到<code>event</code>虽然都是个数组，可里面的内容完全就不一样，于是我就定义俩个<code>data class</code>，分别为<code>ZulipMessage</code>和<code>DelMsgEventDTO</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ZulipEventDTO</span></span>(</span><br><span class="line">    <span class="keyword">val</span> events: List&lt;LinkedTreeMap&lt;String,Any&gt;&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>event</code>定义是一个集合，泛型就是<code>Gson</code>默认的<code>LinkedTreeMap&lt;String,Any&gt;</code>,这样不管是那种数据都可以接受到。并且存入map中。<br>解析的时候，根据<code>event.type</code>的类型，解析成不同的类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                          </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> parseMapGson = GsonBuilder().enableComplexMapKeySerialization().create() <span class="comment">//重点行  </span></span><br><span class="line">eventDTO.events.forEach &#123; event -&gt;</span><br><span class="line">    <span class="keyword">when</span> (event[<span class="string">"type"</span>]) &#123;</span><br><span class="line">       <span class="comment">//根据type类型，解析成不同的类</span></span><br><span class="line">        ZulipConst.EVENT_TYPE_MESSAGE -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> messageJson = parseMapGson.toJson(event[ZulipConst.EVENT_TYPE_MESSAGE]) <span class="comment">// 先将LinkedList转成json</span></span><br><span class="line">            <span class="keyword">val</span> zulipMessage = parseMapGson.fromJson&lt;ZulipMessage&gt;(messageJson, ZulipMessage::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>) //再根据类型转成<span class="title">bean</span>对象</span></span><br><span class="line">            saveMsg2Database(zulipMessage)</span><br><span class="line">        &#125;</span><br><span class="line">        ZulipConst.EVENT_TYPE_DELETE_MESSAGE -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> messageJson = parseMapGson.toJson(event[ZulipConst.EVENT_TYPE_DELETE_MESSAGE])</span><br><span class="line">            <span class="keyword">val</span> delMsgEventDTO = parseMapGson.fromJson&lt;ZulipMessage&gt;(messageJson, DelMsgEventDTO::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            delMsgFromDb(delMsgEventDTO)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Any被转成LinkedTreeMap时，所有数字都是double</span></span><br><span class="line">    <span class="keyword">val</span> eventId = (event[<span class="string">"id"</span>] <span class="keyword">as</span> <span class="built_in">Double</span>).toLong()</span><br><span class="line">    <span class="keyword">if</span> (eventId &gt; lastEventId) &#123;</span><br><span class="line">        lastEventId = eventId</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>总结：有<code>type</code>能帮忙判断返回数据类型的，那就根据类型定义不同的类，先用<code>LinkedTreeMap</code>接住数据，再根据类型转就是了。<br>如果没有<code>type</code>这种字段，完全无法预料返回的是个什么，那不妨就从LinkedTreeMap中直接取数据。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>View的五个构造函数的区别</title>
      <link href="/2019/12/11/20191211%20View%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/12/11/20191211%20View%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/2524531-af7b822ab4edd6c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol><li><code>View()</code>,没有暴露出来，等于没有，过过过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;**</span><br><span class="line"> * Non-public constructor for use in testing</span><br><span class="line"> *&#x2F;</span><br><span class="line">View() &#123;</span><br><span class="line">    mResources &#x3D; null;</span><br><span class="line">    mRenderNode &#x3D; RenderNode.create(getClass().getName(), this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><code>View(Context context)</code>,当在代码中创建view时使用，传入一个上下文，使该View运行在其中，并且可以通过这个上下文获取主题、资源等。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Simple constructor to use when creating a view from code.</span><br><span class="line"> *</span><br><span class="line"> * @param context The Context the view is running in, through which it can</span><br><span class="line"> *        access the current theme, resources, etc.</span><br><span class="line"> *&#x2F;</span><br><span class="line">public View(Context context) &#123;...&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="3"><li>从布局文件xml中填充出来的view使用这个2参的构造函数。<br>第1个参数<code>context</code>上文说过了，第2个参数<code>attr</code>包含了在xml中定义的属性，初始化的时候需要把这些属性拿出来用。可以看到这个构造直接调用了一个三参构造。那么继续走<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Constructor that is called when inflating a view from XML. This is called</span><br><span class="line"> * when a view is being constructed from an XML file, supplying attributes</span><br><span class="line"> * that were specified in the XML file. This version uses a default style of</span><br><span class="line"> * 0, so the only attribute values applied are those in the Context&#39;s Theme</span><br><span class="line"> * and the given AttributeSet.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The method onFinishInflate() will be called after all children have been</span><br><span class="line"> * added.</span><br><span class="line"> *</span><br><span class="line"> * @param context The Context the view is running in, through which it can</span><br><span class="line"> *        access the current theme, resources, etc.</span><br><span class="line"> * @param attrs The attributes of the XML tag that is inflating the view.</span><br><span class="line"> * @see #View(Context, AttributeSet, int)</span><br><span class="line"> *&#x2F;</span><br><span class="line">public View(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">    this(context, attrs, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="4"><li>三参构造<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Perform inflation from XML and apply a class-specific base style from a</span><br><span class="line"> * theme attribute. This constructor of View allows subclasses to use their</span><br><span class="line"> * own base style when they are inflating. For example, a Button class&#39;s</span><br><span class="line"> * constructor would call this version of the super class constructor and</span><br><span class="line"> * supply &lt;code&gt;R.attr.buttonStyle&lt;&#x2F;code&gt; for &lt;var&gt;defStyleAttr&lt;&#x2F;var&gt;; this</span><br><span class="line"> * allows the theme&#39;s button style to modify all of the base view attributes</span><br><span class="line"> * (in particular its background) as well as the Button class&#39;s attributes.</span><br><span class="line"> *</span><br><span class="line"> * @param context The Context the view is running in, through which it can</span><br><span class="line"> *        access the current theme, resources, etc.</span><br><span class="line"> * @param attrs The attributes of the XML tag that is inflating the view.</span><br><span class="line"> * @param defStyleAttr An attribute in the current theme that contains a</span><br><span class="line"> *        reference to a style resource that supplies default values for</span><br><span class="line"> *        the view. Can be 0 to not look for defaults.</span><br><span class="line"> * @see #View(Context, AttributeSet)</span><br><span class="line"> *&#x2F;</span><br><span class="line">public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">    this(context, attrs, defStyleAttr, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2参构造会调用这个3参构造，多了一个默认样式<code>defStyleAttr</code>，比如<code>Button</code>的构造会传一个Button的样式，然后调用了自己的四参构造<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Button(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        this(context, attrs, com.android.internal.R.attr.buttonStyle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>而四参构造会调用父类<code>TextView</code>的四参构造，<code>TextView</code>会继续调用父类<code>View</code>的四参构造。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Button(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123;</span><br><span class="line">    super(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>所以这个三参构造的<strong>第三个参数<code>defStyleAttr</code>是给<code>View</code>的子类传自己用的属性配置的。</strong></li></ol><hr><ol start="5"><li>四参构造<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Perform inflation from XML and apply a class-specific base style from a</span><br><span class="line"> * theme attribute or style resource. This constructor of View allows</span><br><span class="line"> * subclasses to use their own base style when they are inflating.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * When determining the final value of a particular attribute, there are</span><br><span class="line"> * four inputs that come into play:</span><br><span class="line"> * &lt;ol&gt;</span><br><span class="line"> * &lt;li&gt;Any attribute values in the given AttributeSet.</span><br><span class="line"> * &lt;li&gt;The style resource specified in the AttributeSet (named &quot;style&quot;).</span><br><span class="line"> * &lt;li&gt;The default style specified by &lt;var&gt;defStyleAttr&lt;&#x2F;var&gt;.</span><br><span class="line"> * &lt;li&gt;The default style specified by &lt;var&gt;defStyleRes&lt;&#x2F;var&gt;.</span><br><span class="line"> * &lt;li&gt;The base values in this theme.</span><br><span class="line"> * &lt;&#x2F;ol&gt;</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Each of these inputs is considered in-order, with the first listed taking</span><br><span class="line"> * precedence over the following ones. In other words, if in the</span><br><span class="line"> * AttributeSet you have supplied &lt;code&gt;&lt;Button * textColor&#x3D;&quot;#ff000000&quot;&gt;&lt;&#x2F;code&gt;</span><br><span class="line"> * , then the button&#39;s text will &lt;em&gt;always&lt;&#x2F;em&gt; be black, regardless of</span><br><span class="line"> * what is specified in any of the styles.</span><br><span class="line"> *</span><br><span class="line"> * @param context The Context the view is running in, through which it can</span><br><span class="line"> *        access the current theme, resources, etc.</span><br><span class="line"> * @param attrs The attributes of the XML tag that is inflating the view.</span><br><span class="line"> * @param defStyleAttr An attribute in the current theme that contains a</span><br><span class="line"> *        reference to a style resource that supplies default values for</span><br><span class="line"> *        the view. Can be 0 to not look for defaults.</span><br><span class="line"> * @param defStyleRes A resource identifier of a style resource that</span><br><span class="line"> *        supplies default values for the view, used only if</span><br><span class="line"> *        defStyleAttr is 0 or can not be found in the theme. Can be 0</span><br><span class="line"> *        to not look for defaults.</span><br><span class="line"> * @see #View(Context, AttributeSet, int)</span><br><span class="line"> *&#x2F;</span><br><span class="line">public View(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) &#123;</span><br><span class="line">    this(context);</span><br><span class="line"></span><br><span class="line">    final TypedArray a &#x3D; context.obtainStyledAttributes(</span><br><span class="line">            attrs, com.android.internal.R.styleable.View, defStyleAttr, defStyleRes);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>比三参多了个<code>defStyleRes</code>，子类在覆写构造的时候可以传入样式资源到这里。可以看到，四参构造也是先调用了<code>this(context)</code>，然后获取到<code>TypeArray</code>拿各种属性,再继续对view进行初始化操作。</li></ol><p>#####总结：View(Context)是从代码中创建view走的构造。 View(Context,AttributeSet),是从xml中填充的view走的构造,2参会调用3参，3参调用4参，4参最后会调用1参，然后拿到所有属性再初始化。这样子类的构造可以传入特定的attr和style来初始化。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信qq建群时，选中人与搜索框联动</title>
      <link href="/2019/12/03/20191203%20%E5%BE%AE%E4%BF%A1qq%E5%BB%BA%E7%BE%A4%E6%97%B6%EF%BC%8C%E9%80%89%E4%B8%AD%E4%BA%BA%E4%B8%8E%E6%90%9C%E7%B4%A2%E6%A1%86%E8%81%94%E5%8A%A8/"/>
      <url>/2019/12/03/20191203%20%E5%BE%AE%E4%BF%A1qq%E5%BB%BA%E7%BE%A4%E6%97%B6%EF%BC%8C%E9%80%89%E4%B8%AD%E4%BA%BA%E4%B8%8E%E6%90%9C%E7%B4%A2%E6%A1%86%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">    android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;40dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;rv_select_member&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;et_search_member&quot;</span><br><span class="line">        android:hint&#x3D;&quot;搜索联系人&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;0dp&quot;</span><br><span class="line">        android:layout_weight&#x3D;&quot;1&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;16sp&quot;</span><br><span class="line">        android:layout_gravity&#x3D;&quot;center_vertical&quot;</span><br><span class="line">        android:paddingLeft&#x3D;&quot;@dimen&#x2F;space_tiny&quot;</span><br><span class="line">        android:textColor&#x3D;&quot;@color&#x2F;font_black&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure><p>在添加或删除数据后，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.add()</span><br><span class="line">adapter.notifyItemInsert()</span><br></pre></td></tr></table></figure><p>执行下面的变更布局</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取layoutParams</span></span><br><span class="line"><span class="keyword">val</span> lp = rv_select_member.layoutParams</span><br><span class="line"><span class="comment">// 获取当前数据量</span></span><br><span class="line"><span class="keyword">val</span> itemCount = mSelectMemberAdapter.<span class="keyword">data</span>.size</span><br><span class="line"><span class="comment">// 数量大于4的时候，固定宽度</span></span><br><span class="line"><span class="keyword">if</span> (mSelectMemberAdapter.itemCount &gt; <span class="number">4</span>) &#123;</span><br><span class="line">    lp.width = SizeUtils.dp2px(<span class="number">40F</span>)*<span class="number">4</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    lp.width = SizeUtils.dp2px(<span class="number">40F</span>)*itemCount</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置好layoutParams后，将recyclerview滚动到最后一个元素位置</span></span><br><span class="line">rv_select_member.layoutParams = lp</span><br><span class="line">rv_select_member.smoothScrollToPosition(mSelectMemberAdapter.<span class="keyword">data</span>.lastIndex)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画经济学-经济危机篇》读书笔记</title>
      <link href="/2019/11/19/20191118%20%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86%E7%AF%87%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/19/20191118%20%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%94%9F%E6%B4%BB%E5%B8%B8%E8%AF%86%E7%AF%87%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>经济的定义：价值的创造、转化、实现。<br>大自然的水，经工厂消毒净化为矿泉水，卖给口渴的人。水实现了应有的价值。这就是<strong>资源配置</strong>。<br>资源配置出现问题，经济时好时坏，就是<strong>经济周期</strong>。<br><strong>经济危机</strong>：产品太多。<br><strong>金融危机</strong>：钱太多。<br>除了战争、天灾等特殊情况，经济危机都是金融危机引起的。</p><p>#####美国大萧条<br>1929年，美股崩盘，大萧条席卷世界。二战开打，军工业发达，美国国内失业解决，同时获取大量财富。<br>#####亚洲金融危机<br>97年香港回归后，98年索罗斯搞垮英国英格兰银行、泰国、马来西亚后将眼睛瞄向香港。见<a href="https://www.jianshu.com/p/dfdb93e57674" target="_blank" rel="noopener">香港金融保卫战</a>。<br>#####美国次贷危机<br>08年，雷曼银行破产，其他公司也随之大裁员，失业潮形成，中产不能还房贷，房子被银行收走，中产变破产。</p><hr><p>###金融不稳定假说，明斯基时刻</p><blockquote><p>明斯基时刻 ： 经济由好到坏的时刻</p></blockquote><p>####对冲融资<br>银行相信未来能还钱，从而借钱给你，叫<strong>信贷</strong>。<br>拿着借的钱，买原材料、生产、销售，赚了钱连本带息还给银行。大家都赚钱，就叫<strong>经济增长</strong>。特点：<strong>能还上本金和利息</strong>，处在经济增长初期。</p><p>####投机融资<br>银行发现多借钱就多赚钱，就降低借贷标准，这叫<strong>信贷扩张</strong>。特点：<strong>只还得起利息</strong>，处在经济增长中期。</p><h4 id="庞氏融资"><a href="#庞氏融资" class="headerlink" title="庞氏融资"></a>庞氏融资</h4><p>盲目自信，投资过大，利息都还不上了，只能借钱来还钱。商品供过于求，就会降价，一降就更收不回投资，银行开始少借钱，这叫<strong>信贷紧缩</strong>。表现就是经济下滑，公司倒闭、员工失业、股市大跌。</p><p>政府通常会做三点来去杠杆：</p><ol><li>债务违约重组。延长还款期限等。</li><li>财富再分配，更改税收机制，创造就业岗位，让失业的人慢慢还钱。</li><li>央行调节货币。</li></ol><hr><p>###郁金香泡沫<br>荷兰地处欧洲西北低地，农业不兴，只能出海捕鱼，出海卖鱼，卖了鱼空船回来很亏，就开始形成了重商文化。法兰克王国、神圣罗马帝国、勃艮第公国（现在的法国）、西班牙都统治过荷兰。但西班牙的宗教迫害、封建专制以及重税，导致<strong>尼德兰革命</strong>，打了80年，建立荷兰共和国。历史上第一个资本主义国家。<br>下海经商，创业融资将公司资产分成很多份就称为<strong>股份</strong>，买股份的票据就是<strong>股票</strong>，赚钱就分工，赔钱承担有限责任，<strong>历史上第一个股份有限公司成立：荷兰东印度公司</strong>。<br>有的人后悔买了股票，有的人后悔没买到，人多了，政府就成立了<strong>世上第一家证券交易所：阿姆斯特丹证券交易所</strong>。<br>荷兰港口多，很快形成欧洲交易服务区，货币不同不利于交易，<strong>世上第一家现代银行：阿姆斯特兰银行</strong>成立。<br>种种金融创新，大家都来荷兰做生意，荷兰变得无比有钱。同时东印度公司殖民、垄断掠夺财富。同时成立西印度公司，跨国大西洋去了北美，建了个城叫“新阿姆斯特丹”，还造了墙防止印第安人和英国人进来，最后英国人赶跑了荷兰人，更名<strong>纽约</strong>。英国人拆了墙（wall），建了街（street），叫<strong>华尔街</strong>（wall street）。<br>        有了钱，就想炫富，好看又难种的郁金香就走进荷兰富人的眼中。随着郁金香价格暴涨，穷人和投机者也开始购买郁金香。投机者在没开花就预约了，并且将合同转手卖掉，就是<strong>期货</strong>。荷兰人放下工作，砸锅卖铁购买郁金香，当一个商品的售价远大于他的使用价值，这就是<strong>金融泡沫</strong>。</p><blockquote><p>荷兰商船上一个英国水手顺手拿走一颗郁金香球茎（永恒的奥古斯都），以为是洋葱，被船长起诉。有聪明人醒悟过来，这玩意为啥卖这么贵？于是开始抛售，市场纷纷跟风抛售，合同到期到处违约，市场就崩了</p></blockquote><p>历史在不断的重演，当看到一个东西很贵，明显不值那个价，人人还在一直往里砸钱，就应该知道，那是金融泡沫。</p><hr><p>###南海泡沫<br>先说西班牙王位继承战争，大体就是法国和西班牙打起来了，英法向来不对付，英国帮助西班牙打仗，花了很多钱。于是发行国债向百姓借钱，可是还不了。英国财务大臣牛津伯爵带领一批富豪成立南海公司，由英国政府特批允许去南美洲淘金。西班牙规定每年只能去三艘船，南海公司赚不到钱，开始忽悠国内韭菜买他们的股票，也可以用国债来换。人们见状，纷纷开起股份公司，最后由政府颁布《泡沫法案》，股票价格断崖下跌。严重制约了股份公司在英国的发展。</p><hr><p>###密西西比泡沫<br>与英国南海泡沫神似，大致就是发国债，炒股，印钞票，通胀崩盘。<br>路易十四在欧洲到处打仗，还打赢了都，但是挥霍无度，建立凡尔赛宫。儿子孙子都没活过他，由曾孙子路易十五继位，印钞票，开银行发国债，成立密西西比公司去美国淘金，炒股，法国经济繁荣建立在股票上。直到有一年法国旱灾，路易十六还在收重税，最终被送上断头台，这就是法国大革命。</p><hr><p>###1837年美国大恐慌<br>17世纪，英国占领北美，地处殖民地的英国人受英国政府压榨导致不和，爆发第一次独立战争，自己建国：美国。<br>打完仗没钱，建立银行发行纸币，从老百姓手里换黄金还外债。中央银行建立，州银行萧条。信贷紧缩，经济不景气。杰克逊当选美国总统后，关闭中央银行，州银行有了黄金就开始印纸币，印多了。。1803年，从法国买了路易斯安纳，1819年从西班牙买了佛罗里达，这就是美国的<strong>西进运动</strong>。<br>随着西部大开发，炒房团进场，4年间，美国土地销售额达2500万美元（200年前），但美国刚建国，哪里有那么多人接盘，泡沫出现。杰克逊签发限购令，不能用纸币买房了。于是银行遭受黄金挤兑，破产。同时英国开始加息，在美投资者纷纷撤资，资本回归英国。很快美国国内，纸币没人信，黄金没有，股票暴跌，行业破产，失业。史称<strong>美国大恐慌</strong>。<br>1848年，在旧金山发现金矿，突然有了黄金，史称淘金热。随后美国经济再次复兴。</p><hr><p>###1907年美国银行危机<br>美国独立后，南方种棉花，北方搞工业，就打了起来，史称<strong>南北战争</strong>（1861-1865）。林肯带领北边打赢，美国大一统。修铁路、分土地，美国经济一片繁荣，工业化迅猛发展，美国股民喜提牛市。<br>有钱人委托信托公司管理资金，信托公司投向股市。<br>没钱的向银行借钱，投入股市。<br>欧洲人也纷纷跑来投资。</p><p>于此同时，欧洲一片乱斗，全体穷光蛋，于是集体加息。资金回流欧洲，曾经拯救美国的旧金山出现大地震，需要救灾，美国股市被国内国外同时掏空，泡沫破灭。<br>银行—》股民—》信托—》股市<br>一个环节出问题，链条就断。1907年尼克伯克信托公司收购矿业公司失败，当时美国正风声鹤唳，于是该信托公司的人纷纷来要钱，尼克伯克信托破产，其他信托跟着倒霉。而信托的钱有很多由股民从银行贷款来的，银行储户担心储蓄于是去银行挤兑，银行拿不出钱关门歇业，经济危机来临。</p><p>摩根出钱救市，银行有钱不怕挤兑破产了，股价也回温，经济危机就解除了。据说摩根是看上了钢铁公司，但因为反垄断只能想想，此时救了美国，再提收购就方便许多。</p><p>之后，美国发现还是需要一个中央银行，叫<strong>美国联邦储备银行</strong>，也就是美联储。</p><hr><p>###美国梦：泰罗制、福特制、猪<br>美国大萧条分4个阶段：柯立芝繁荣、大萧条、关税战、罗斯福新政<br>萨拉热窝事件后，一战发动，欧洲打的一团糊，年轻人都上战场了，美国出口农产品的同时又发展了农业。同时借钱给英法捞了一笔。又是战胜国，战争赔款也捞了一笔。有钱了！然后就开始攀科技升级装备。<br><strong>泰罗制</strong><br>1.挑人：合适的人做合适的事。<br>2.标准：操作手册、用什么工具、劳作时间等<br>3.步骤<br>4.进度：工作分为一类管理类，负责计划和监督；一类执行类负责执行计划。<br>5.工资：实行激励性工资制度。干的越多赚的越多，调动工人积极性。<br>将工人与老板的斗争转为合作。</p><p><strong>福特制</strong><br>受泰罗制影响，福特发现杀猪都是流程化，效率非常高，将造车也拆分，专人专干，创立了流水线造车法就是福特制。</p><p>泰罗制与福特制理论实践两开花，各工厂争相学习，政府又放任自由与低税收，引来一波经济繁荣。<br>欧洲打烂后，英控加拿大区域与南美欧洲实控区的市场被美国一举拿下。同时资助欧洲战后恢复。20世纪20年代的繁荣，史称<strong>柯立芝繁荣</strong>。</p><hr><p>###1929-1933 美国大萧条<br>美国实行自由放任主义，相信市场会自己调节，结果小企业一个个倒下，大企业开始垄断。穷人越来越穷，消费力下降。资本为了利润还在不断生产，造成<strong>产能过剩</strong>。<br>埋雷1：银行。<br>银行开始发行分期付款，继续借贷消费，民众又有钱了。<br>埋雷2：企业<br>借着贷款，消费力提升，企业继续扩大生产。<br>埋雷3：股市<br>企业不断发展，股市一路上扬，很多人去炒股，指望赚钱还银行。<br>1929年10月第一个星期四，一批人带头抛售股票引起慌乱，众人纷纷抛售，这就是<strong>黑色星期四</strong>。<br>股市一炸，股民没钱，银行破产，一家破产引起挤兑，其他银行也纷纷遭殃，这场危机倒了美国一半银行。大家都没钱，企业没钱续命，也纷纷倒闭，引发失业潮。</p><hr><p>###二位总统：胡佛与罗斯福<br>胡佛干预市场：</p><ol><li>补贴银行，贷款慢慢恢复，经济些许好转。</li><li>工资不能降  企业没钱，不给降薪就只能裁员，失业率继续走高。</li><li>提关税 引起欧洲的关税大战<br>罗斯福：</li><li>补贴银行，废除金本位。美元贬值</li><li>调整工业，颁布《全国工业复兴法》，规定最低工资和最高工作时长。</li><li>调整农业，颁布《农业调整法》，减少生产，政府补贴。</li><li>加强民生，以工代赈，政府搞基建，发工资给工人。既不提高产能，又创造就业。<br>这就是<strong>罗斯福新政</strong>。</li></ol><p>欧洲发动关税战后，欧洲更穷了，于是德国挑起第二次世界大战，美国开心的很，将国内过剩的产能卖给欧洲，又双叒赚了一笔，走向世界霸主。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香港金融保卫战</title>
      <link href="/2019/11/18/20191118%20%E9%A6%99%E6%B8%AF%E9%87%91%E8%9E%8D%E4%BF%9D%E5%8D%AB%E6%88%98/"/>
      <url>/2019/11/18/20191118%20%E9%A6%99%E6%B8%AF%E9%87%91%E8%9E%8D%E4%BF%9D%E5%8D%AB%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p><strong>巫师财经视频观后总结。</strong><br>二战后，英法式微，德国分裂，美国崛起，欧洲为提升政治地位，建立欧共体（后来的欧盟），强调经济共同发展。欧元诞生前，制定欧洲汇率机制（ERM-The European Exchange Rage Mechanism）。</p><p>具体做法是将各国汇率与德国马克挂钩，大家一起升值一起贬值，交易不用考虑汇率影响，推动欧洲一体化经济。</p><p>但汇率一体化，就得利率一体化。否则英国利率10%，德国5%，大家都将钱换成英镑吃利息，就造成英镑升值，马克贬值。所以汇率同步必须利息同步。</p><p>89年柏林墙倒塌，德国统一，东德人大量涌入西德，政府财政赤字，开始印钱，加剧了通胀，通胀又是中央银行提高利率。德国被迫提高利率，而英国经济衰退，通胀紧缩，需要降低利率来刺激市场经济。</p><blockquote><p>（大量印钱，通胀就是市场上钱多了，提高利率大家就会开始投资或者存起来吃利息，市场上的钱就收回来了）</p></blockquote><p>但英国受迫ERM，必须与德国维持相同的高利率。根据三元悖论，货币政策独立、汇率稳定、资本完全流动。三者不可兼得。想要汇率稳定、资本自由，就不可能保持货币独立，那么英国必须退出欧盟。而一旦退出，被高估的英镑就会断崖式下跌。索罗斯开始做空英镑，开始借英镑抛售，同时媒体制造恐慌，英镑开始下跌。英国政府开始买入英镑，抵不住国际游资的做空，最后退出ERM。索罗斯准备150亿美元，砸了120亿，赚了10亿。同时多头也帮他赚了不少。</p><blockquote><p>空头借英镑做空，政府为了防止借贷，提高利率，增加借贷成本，提高利率多头就能赚钱。</p></blockquote><p>随后，日本广场协议后，国内用工成本很高，工厂转移东南亚，泰国经济迅速发展。泰铢实行绑定美元25：1的策略，与美元一起升值贬值。当时美元贬值，泰铢跟着贬值，刺激了泰国出口经济。86-94年泰国经济迅猛发展。</p><blockquote><p>25泰铢：1美元，贬值后25泰铢兑0.8美元，本来卖1美元的商品，现在卖0.8美元也有的赚，出口商品性价比提升。</p></blockquote><p>随着93年美国互联网兴起，美元升值，与上面相反，泰国经济遭受打击，泰国政府开放金融，用高利率吸引外资补贴国内赤字。实体经济不行，大量境外资本涌入房地产，93-96年泰国房价飙升4倍。97年2月，索罗斯来了，通过之前买入的房产抵押，借入大量泰铢，在外汇市场抛售换成美元。剧情再次重复上演，索罗斯通过媒体制造恐慌，泰国政府被迫提高利率，禁止借贷，动用外汇储备接盘，国际游资的空军抛售多少就得接多少，最终崩盘，泰国几十年发展成果被洗劫一空。国际游资血赚40亿美元。</p><p>同样的招数席卷东南亚，汇率下降，工厂破产，银行倒闭，物价上涨，百姓失业。数百亿财富被洗劫。不满足的索罗斯盯上国际金融中心——香港。</p><p>与泰国固定汇率相似，香港是联系汇率。每发行7.8港币就向金融管理局交1美元，以此让港币与美元联系起来。05年后增加浮动汇率管制，让港币兑美元在7.75-7.85浮动，一旦触边就会受管制。同样，索罗斯开始借入港币，任志刚发现一次就提高一次短期利率，同时对借入港币者进行惩罚，导致港币流通性进一步下跌，于是资本开始卖资产还钱，港股下跌，索罗斯在这等着，你不让我借港币，我就让你股市承压，通过空头赚钱。空头获利后，继续在媒体发动舆论战，直到98年8月，恒生每下跌1000点，国际游资就获利40亿港币。8月数百亿港币砸盘，5个交易日，恒生指数下跌900点，2500亿港币化为乌有。16000点跌穿6600点。港府入市救灾（中央没有直接证据救市），8月28日结算日当天，交易额790亿港币，被港府全盘吃下，国际游资巨亏离场。但前期做空，为索罗斯也赚了不少，最受打击的是香港的中产阶级、小型投资者</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画经济学-生活常识篇》读书笔记</title>
      <link href="/2019/11/18/20191119%20%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA%E7%AF%87%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/18/20191119%20%E3%80%8A%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6-%E7%BB%8F%E6%B5%8E%E5%8D%B1%E6%9C%BA%E7%AF%87%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>人类历史就是一部经济史。<br>历史上，没有哪一场仗是因为爱和正义,深层次的原因都是经济。<br>美国独立战争：<br>南方经济出口棉花，进口日用品，要求国家降税。<br>北方工业怕国外抢生意，要求提税。</p><p>##经济起源<br>采集狩猎—获得种子—发展农业—农业人口过剩，细化分工，产生工业。生活水平不断提高，就是经济发展。<br>##货币起源<br>以物易物，牛羊猪的肥瘦不好切割，选择贝壳。汉字与钱有关都是贝字旁，财购贼。矿业发展慢慢形成金银本位。随着经济发展，商品越来越多，就需要更多的货币，纸币电子货币出现。</p><p>#社保诞生<br>十六七世纪，英国纺织业发达，贵族圈地养羊，农业人口降低，社会动荡，政府发布《济贫法》，工业革命席卷欧洲。俾斯麦统一德国，发展工业流水线，机器复杂伤亡率高，工人罢工。政府、工厂、工人各拿出一笔钱用于救济受伤工人。《医疗保险法》、《事故保险法》、《养老保险法》等颁布，现代社保雏形诞生。</p><p><strong>增值税</strong><br>商品从原材料，到不断加工，到商业化，商品价值不断增加，中间环节每个个体都挣了钱，所以都要缴纳增值税。石油、烟酒、奢饰品等还要额外缴纳消费税，因为这些商品会造成浪费和增加社会成本。</p><p><strong>关税</strong><br>保护国内企业，外国商品缴纳关税后为了维持利益就会提价，从而降低市场竞争力。</p><h2 id="人口与经济"><a href="#人口与经济" class="headerlink" title="人口与经济"></a>人口与经济</h2><p>人口发展规律：<br>原始：娃多，但狩猎等生存环境差，死的也多，世界总人口变化不大。<br>传统：进入农业社会后，高出生，低死亡带来的高增长。<br>现代：经济越发达、育儿成本、生活节奏等原因，低出生、低死亡、低增长。</p><p>人口就是资源，人多资源多，劳力多，生产多，缴税多，经济发展。人口红利。<br>人口过多，土地、住房、资源不够。</p><p><strong>我国人口政策</strong><br>49-78年，新中国百废待兴需求大量人口，鼓励多生。<br>78-02年，计划生育。农村吃不饱，城市没工作。知青上山下乡从事农业。<br>随着计划生育，老年人口比例增加到7%，99年进入老龄化社会。老人创造财富能力低、消费能力低，养老金缺口大，02年开始开放二胎。<br>依照规律，生育率2.1才能人口正常更替。目前远远达不到。<br>原因：1. 经济好，读书久，结婚迟。2.育儿成本高。</p><p>优贷：借给富人，能偿还债务。<br>次贷：借给穷人，收不回债务。<br>次贷危机：金融机构借给穷人，收不回成本引发动荡。<br>P2P：谁都能借、谁都敢贷，出问题是迟早的事。</p><p>##消费心理<br>###心理账户：为了不同的目的，愿意花的钱不同。<br>比如：为自己买围巾，用的是生活账户，不愿意买。为家人买用的是情感账户，贵点也愿意买。</p><h3 id="比例偏见：比如算数字，人们更愿意算比例。"><a href="#比例偏见：比如算数字，人们更愿意算比例。" class="headerlink" title="比例偏见：比如算数字，人们更愿意算比例。"></a>比例偏见：比如算数字，人们更愿意算比例。</h3><p>比如：买围巾送帽子，会觉得帽子是个便宜货。会用帽子跟围巾比较，但是加一元换购帽子，会用1元与帽子做比较，就觉得划算。<br>100块降10块，觉得打9折。20块降10块，觉得打5折，同样是便宜十块，就觉得打5折的更划算。商家通常可以使用高价商品标降价数字，低价商品标折扣来诱导心理。</p><h3 id="价格锚点：货比三家，买东西选择中间价的东西更多。"><a href="#价格锚点：货比三家，买东西选择中间价的东西更多。" class="headerlink" title="价格锚点：货比三家，买东西选择中间价的东西更多。"></a>价格锚点：货比三家，买东西选择中间价的东西更多。</h3><p>比如：看到500的衣服，觉得挺贵，看到同样的衣服卖999，又觉得500的似乎还可以。看到100的又觉得是不是质量太差。最终选择了500</p><h3 id="损失规避：得到东西，好心情-20，失去东西，坏心情-100。"><a href="#损失规避：得到东西，好心情-20，失去东西，坏心情-100。" class="headerlink" title="损失规避：得到东西，好心情+20，失去东西，坏心情+100。"></a>损失规避：得到东西，好心情+20，失去东西，坏心情+100。</h3><p>比如得到，如果有损失风险，更多人的选择是宁愿不要。<br>商家给你包邮、给你退换，都是这个原因。</p><h3 id="沉没成本：付出越多越不想放手。这就是订金的由来。"><a href="#沉没成本：付出越多越不想放手。这就是订金的由来。" class="headerlink" title="沉没成本：付出越多越不想放手。这就是订金的由来。"></a>沉没成本：付出越多越不想放手。这就是订金的由来。</h3><p>##庞氏骗局<br>邮票在欧洲便宜，美国贵，有人就想利用海淘赚钱，但关税、汇率非常复杂。庞兹利用这个心理，骗人说代办业务。这样大家将钱交给他，他叫后来的钱交给先来的人，整个过程没有商品实体。一旦没有后来的人，设局人就会跑路。</p><p>传销也是庞氏骗局，不要产品只要人，发展下线靠入会费挣钱，一旦没有下线，这个组织就会瓦解。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>retrofit提交文件时附带参数错误</title>
      <link href="/2019/11/16/20191116%20retrofit%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E6%97%B6%E9%99%84%E5%B8%A6%E5%8F%82%E6%95%B0%E9%94%99%E8%AF%AF/"/>
      <url>/2019/11/16/20191116%20retrofit%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E6%97%B6%E9%99%84%E5%B8%A6%E5%8F%82%E6%95%B0%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>如下图所示，uploadFile是文件，relationId、type这种是提交时附带的参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="meta">@POST(<span class="meta-string">"api/common/upload/user/pic"</span>)</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">uploadAvatar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part(<span class="meta-string">"relationId"</span>)</span> relationId :<span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part(<span class="meta-string">"type"</span>)</span> type :<span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part</span> uploadFile :<span class="type">MultipartBody</span>.<span class="type">Part</span> <span class="comment">//此处part不能设置value，提交名称在下面设置</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>:Response&lt;BaseDTO&lt;*&gt;&gt;</span><br></pre></td></tr></table></figure><p>如果retrofit添加了<code>.addConverterFactory(GsonConverterFactory.create())</code>,提交时会当做json提交，如果直接在接口中定义<code>@Part(&quot;relationId&quot;) relationId :String</code>,<code>contentType</code>会是<code>application-json</code>，提交的字符串会<strong>多拼上一堆双引号</strong>。</p><p>将接口修改为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="meta">@POST(<span class="meta-string">"api/common/upload/user/pic"</span>)</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">uploadAvatar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part(<span class="meta-string">"relationId"</span>)</span> relationId :<span class="type">RequestBody</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part(<span class="meta-string">"type"</span>)</span> type :<span class="type">RequestBody</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Part</span> uploadFile :<span class="type">MultipartBody</span>.<span class="type">Part</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>:Response&lt;BaseDTO&lt;*&gt;&gt;</span><br></pre></td></tr></table></figure><p>参数用下面方式生成即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fileToMultiPart</span><span class="params">(file: <span class="type">File</span>,name:<span class="type">String</span>=uploadFile)</span></span>:MultipartBody.Part &#123;</span><br><span class="line">    <span class="keyword">val</span> requestBody = RequestBody.create(MultipartBody.FORM, file)</span><br><span class="line">    <span class="keyword">val</span> part = MultipartBody.Part.createFormData(name, file.name, requestBody) <span class="comment">//提交名称在这设置</span></span><br><span class="line">    <span class="keyword">return</span> part</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getImgRequestBody</span><span class="params">(file:<span class="type">File</span>)</span></span> = RequestBody.create(MediaType.parse(<span class="string">"image/*"</span>),  file)</span><br><span class="line"><span class="comment">// 字符串，上面的接口中 type和relationId用这个生成requestBody</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getTextRequestBody</span><span class="params">(txt:<span class="type">String</span>)</span></span> = RequestBody.create(MediaType.parse(<span class="string">"text/plain"</span>),  txt)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----------- 下面都是生成json的requestBody---------------------*/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBody</span><span class="params">(params: <span class="type">Map</span>&lt;<span class="type">String</span>, Any&gt;)</span></span>: RequestBody &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>), JSONObject(params).toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBody</span><span class="params">(jsonObject: <span class="type">JSONObject</span>)</span></span>: RequestBody &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>), jsonObject.toString())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBody</span><span class="params">(json: <span class="type">String</span>)</span></span>: RequestBody &#123;</span><br><span class="line">    <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>), json)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getRequestBody</span><span class="params">(`<span class="keyword">object</span>`: <span class="type">Any</span>)</span></span>: RequestBody &#123;</span><br><span class="line">    <span class="keyword">val</span> json = Gson().toJson(`<span class="keyword">object</span>`)</span><br><span class="line">    <span class="keyword">return</span> RequestBody.create(MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>), json)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《穷爸爸富爸爸》读书记录</title>
      <link href="/2019/11/14/20191114%20%E3%80%8A%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8%E3%80%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/11/14/20191114%20%E3%80%8A%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8%E3%80%8B%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、富人不为钱工作"><a href="#一、富人不为钱工作" class="headerlink" title="一、富人不为钱工作"></a>一、富人不为钱工作</h2><p>对多数人来说，学校就是学习的终点而不是起点。<br>穷人和中产为钱工作，富人让钱为他工作。</p><p>生活推着所有人，有人抗争，有人放弃，少数人学会生活这门课，他们欢迎生活推着他们。停止责备、抱怨（政策、雇主等），不要认为是他们的问题，这样就会想改变他们（这是徒劳的），改变自己，让自己更聪明。</p><p>出于恐惧，害怕付不起账单，被解雇，为了获得保障，去学习技能，为钱工作，然后将怨气发泄到老板身上，感情替代了他们思考。</p><h2 id="二、为什么要教授财务知识"><a href="#二、为什么要教授财务知识" class="headerlink" title="二、为什么要教授财务知识"></a>二、为什么要教授财务知识</h2><blockquote><p>21世纪的文盲不是那些不能读写的人，而是不能学习、忘记、再学习的人</p></blockquote><p>富人购买资产，穷人购买负债，只是他们以为那是资产。</p><p>钱能进你口袋的是资产，从你口袋中掏钱的是负债。<br>多数人认为解决负债的方法就是挣更多钱，然而工作是付出了劳动，被资本家剥削剩余价值，被政府抽税，被银行拿走房贷车贷后，才进口袋的收入途径。</p><h2 id="三、关注自己的事业"><a href="#三、关注自己的事业" class="headerlink" title="三、关注自己的事业"></a>三、关注自己的事业</h2><p>职业：学习技能，从事的工作，比如医生、律师、工程师。为别人工作。关注重心是收入。<br>事业：为自己工作。关注重心是资产。<br>存在财务问题的人，耗费一生为别人工作。将额外收入购买可产生收入的资产，才能获得财务安全。</p><p>多数穷人与中产的<strong>财务保守</strong>（无法承担风险）的原因在于：他们<strong>没有经济基础</strong>，必须依赖工作，<strong>必须安全运作</strong>。</p><p>经济衰退到来是，数以万计的人们会发现，他们认为的最大资产<strong>房子</strong>，在吞噬他们的生活，因为每月都要花钱，（在房子无限期涨价时，可以认为资产，但这不会永远发生）。车子也是如此，车子开出4S店就开始贬值25%了。没有工作的收入，就失去了依靠，这些“资产”无法保障渡过财务危机。</p><p>资产：无需我到场，不需花费我的时间，可以由别人经营管理的。<br>职业：需要我亲自处理，花费我的时间。</p><p>资产：股票、债券、能产生收入的房产（收租，或优质地段不断升值的房产）。票据（借据）、版税（音乐、手稿、专利）、其他有价值可产生收入有增值潜力且销路好的东西。</p><p>构筑资产项，投入1块钱就别拿出来了，让它成为你的雇员，让它24小时为你工作。现金流增加时，富人最后才利用资产产生的收入购买奢饰品，而穷人利用血汗钱先去买奢饰品，他们的生活乏味，需要点新玩意刺激，然后入借贷陷阱。</p><h2 id="四、税收的历史和公司的力量"><a href="#四、税收的历史和公司的力量" class="headerlink" title="四、税收的历史和公司的力量"></a>四、税收的历史和公司的力量</h2><p>英美原来并不收税，英国为了与拿破仑战斗开始收税，美国为了打独立战争开始收税。富人有很多方式摆脱税收，比如公司的很多支出可以用税前收入。而穷人越努力工作，交税越高。</p><p>财商：</p><ol><li>会计<br>解读数字的财务知识能力。管理的钱越多越需要精确。需要左脑处理，是细节的部分。财务知识帮助读懂报表，分辨生意的优劣。</li><li>投资<br>投资是钱生钱的科学。投资涉及策略和方案，需要右脑来做，属于创造的部分。</li><li>了解市场<br>供给与需求的科学。要求了解感情驱动市场的“技术面”与投资经济意义的“基本面”。投资有无意义取决于当前市场状况。</li><li>法律<br>了解减税优惠政策。利用会计、投资、市场运营的企业会使财富爆炸性增长。</li></ol><ul><li>减税优惠。 公司可以做很多个人无法做的事。利用税前收入支付开支。雇员挣钱、纳税、用剩下的钱为生。企业挣钱、花钱，用剩下的钱纳税。</li></ul><p>拥有公司的富人   为公司工作的人<br>挣钱                      挣钱<br>支出                      缴税<br>缴税                      支出</p><h2 id="五、富人的投资"><a href="#五、富人的投资" class="headerlink" title="五、富人的投资"></a>五、富人的投资</h2><h2 id="六、学会不为钱工作"><a href="#六、学会不为钱工作" class="headerlink" title="六、学会不为钱工作"></a>六、学会不为钱工作</h2><p>为了学东西，为知识工作。job just over broke。</p><h2 id="七、克服困难"><a href="#七、克服困难" class="headerlink" title="七、克服困难"></a>七、克服困难</h2><blockquote><p>失败会激励胜利者，击垮失败者。</p></blockquote><p>禁止说“我可付不起”这种话，改成“我要怎样才能付得起”来迫使大脑去思考并寻求答案。</p><ul><li>克服恐惧<br>唯一没出现过投资亏损的人，是从未做过任何投资的人。<br>尽早可是积累资产，让复利为你服务。</li><li>克服愤世嫉俗<br>怀疑使我们保持警惕，采取保守，也会与机会失之交臂。<br>看起来最糟糕的时期正是挣钱的最佳时机。其他人害怕时，精明的投资者已经获得了回报。<br>疑虑和愤世嫉俗使多数人安于贫困。<strong>愤世者抱怨现实，成功者分析现实</strong><br>房产、股市..</li><li>克服懒惰<br>懒惰的常见形式是忙碌掩饰下的懒惰，太忙了以至于没有时间管理财富、健康与社会关系。<br>怎么治疗：贪婪一点。贪婪刺激不断前行。</li><li>克服坏习惯</li><li>克服骄傲<br>许多人用傲慢掩饰无知。学会分析现实，而不是只会批评。愤世者喜欢批评，胜利者分析并抓住他人错过、忽视的机会。用好喜欢克服坏习惯，比如先支付自己，而不是最后支付自己。<h2 id="八、开始行动"><a href="#八、开始行动" class="headerlink" title="八、开始行动"></a>八、开始行动</h2>首先支付自己</li></ul><ol><li>不要让自己背上过大的债务包袱。保持低支出。建立资产项，然后用资产项购买大项支出（房车）。<br>2、资金短缺时，让压力发挥作用，不要动用储蓄和投资。利用压力激发理财天赋，想出赚钱方法，然后支付你的账单。这样不但能挣钱还能提高财商。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google N年前的Plaid重构了！学习笔记</title>
      <link href="/2019/11/13/20191013%20Google%20N%E5%B9%B4%E5%89%8D%E7%9A%84Plaid%E9%87%8D%E6%9E%84%E4%BA%86%EF%BC%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/13/20191013%20Google%20N%E5%B9%B4%E5%89%8D%E7%9A%84Plaid%E9%87%8D%E6%9E%84%E4%BA%86%EF%BC%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>recyclerview的<code>android:clipToPadding=&quot;false&quot;</code>,可以让内容滑到padding所占用的空间。</p></li><li><p>AS里可以直接将svg和psd转成矢量图来用的，这些图是不用按照分辨率提供不同的图了，有些系统图标也挺好用的~<br><img src= "/img/loading.gif" data-src="https://upload-images.jianshu.io/upload_images/2524531-e5129e1a39d9bf47?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p></li><li><p>应用启动的时候，根据有没有连接网络，会有一些不同的逻辑，所以在Activity的onCreate中有这么一段</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">connectivityChecker?.apply &#123;</span><br><span class="line">    lifecycle.addObserver(<span class="keyword">this</span>)<span class="comment">//增加对UI生命周期的监听</span></span><br><span class="line">    <span class="comment">// 这是个LiveData，当发生变化的时候，走自己的业务逻辑</span></span><br><span class="line">    connectedStatus.observe(<span class="keyword">this</span><span class="symbol">@HomeActivity</span>, Observer&lt;<span class="built_in">Boolean</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (it) &#123;</span><br><span class="line">            handleNetworkConnected()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handleNoNetworkConnection()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; ?: handleNoNetworkConnection()</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectivityChecker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> connectivityManager: ConnectivityManager</span><br><span class="line">) : LifecycleObserver &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 是否在监听连接状态 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> monitoringConnectivity = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 这里用两个LiveData的目的应该是只允许私有可变，所以必须有私有的MutableLiveData</span></span><br><span class="line"><span class="comment">      提供给外部的不允许postValue，所以用个LiveData */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _connectedStatus = MutableLiveData&lt;<span class="built_in">Boolean</span>&gt;()</span><br><span class="line">    <span class="keyword">val</span> connectedStatus: LiveData&lt;<span class="built_in">Boolean</span>&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _connectedStatus</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 连接状态回调 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> connectivityCallback = <span class="keyword">object</span> : ConnectivityManager.NetworkCallback() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAvailable</span><span class="params">(network: <span class="type">Network</span>)</span></span> &#123;</span><br><span class="line">            _connectedStatus.postValue(<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// 已经连上了，就断掉监听</span></span><br><span class="line">            connectivityManager.unregisterNetworkCallback(<span class="keyword">this</span>)</span><br><span class="line">            monitoringConnectivity = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLost</span><span class="params">(network: <span class="type">Network</span>)</span></span> &#123;</span><br><span class="line">            _connectedStatus.postValue(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在Activity中注册了生命周期，当发生变化的时候会走到这里 */</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stopMonitoringConnectivity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (monitoringConnectivity) &#123;</span><br><span class="line">            connectivityManager.unregisterNetworkCallback(connectivityCallback)</span><br><span class="line">            monitoringConnectivity = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">startMonitoringConnectivity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> activeNetworkInfo: NetworkInfo? = connectivityManager.activeNetworkInfo</span><br><span class="line">        <span class="keyword">val</span> connected = activeNetworkInfo != <span class="literal">null</span> &amp;&amp; activeNetworkInfo.isConnected</span><br><span class="line">        _connectedStatus.postValue(connected)</span><br><span class="line">        <span class="keyword">if</span> (!connected) &#123;</span><br><span class="line">            <span class="comment">// we don't have internet connection, so we listen to notifications in connection status</span></span><br><span class="line">            connectivityManager.registerNetworkCallback(</span><br><span class="line">                NetworkRequest.Builder()</span><br><span class="line">                    .addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).build(),</span><br><span class="line">                connectivityCallback</span><br><span class="line">            )</span><br><span class="line">            monitoringConnectivity = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>toolbar的布局是在<code>res/menu/...</code>里定义的，里面会有一些item。<br>那些item可以设置图标<code>android:icon=&quot;@drawable/ic_search_24dp&quot;</code>，这个search图标就是上面说的矢量图，以后app要用，就直接复制过去好了。</p><p> 也可以设置文字<code>android:title=&quot;@string/search&quot;</code>,还有显示方式<code>android:showAsAction=&quot;always&quot;</code>这种知道的，这里略微提一下。</p><p> 还可以指定他是个什么控件，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;item</span><br><span class="line">       android:id&#x3D;&quot;@+id&#x2F;menu_theme&quot;</span><br><span class="line">       android:title&#x3D;&quot;@string&#x2F;theme&quot;</span><br><span class="line">       android:actionViewClass&#x3D;&quot;android.widget.CheckBox&quot;</span><br><span class="line">       android:showAsAction&#x3D;&quot;always&quot;</span><br><span class="line">       tools:ignore&#x3D;&quot;AppCompatResource&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这就是个<code>CheckBox</code>,然后可以拿出来进行一顿操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toolbar.inflateMenu(R.menu.main)</span><br><span class="line">val toggleTheme &#x3D; toolbar.menu.findItem(R.id.menu_theme)</span><br><span class="line">val actionView &#x3D; toggleTheme.actionView</span><br><span class="line"></span><br><span class="line">(actionView as CheckBox?)?.apply &#123;</span><br><span class="line">    setButtonDrawable(R.drawable.asl_theme)&#x2F;&#x2F;这里设置的是图标图片和动画了，</span><br><span class="line">    isChecked &#x3D; ColorUtils.isDarkTheme(this@HomeActivity)</span><br><span class="line">    jumpDrawablesToCurrentState()</span><br><span class="line">    setOnCheckedChangeListener &#123; _, isChecked -&gt;&#125;</span><br></pre></td></tr></table></figure><p><code>setButtonDrawable(R.drawable.asl_theme)</code>这里设置的是图标图片和动画了，在<code>drawable</code>文件夹下,<br>需要的话自己复制吧，这里不贴了，动画和矢量那一堆坐标得靠美工来了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">animated-selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/night"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_theme_night"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/day"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_theme_day"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromId</span>=<span class="string">"@id/night"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toId</span>=<span class="string">"@id/day"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/avd_night_to_day"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromId</span>=<span class="string">"@id/day"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toId</span>=<span class="string">"@id/night"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/avd_day_to_night"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animated-selector</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MD风格下，UI是有高度的，高度就可以是<code>android:elevation=&quot;@dimen/z_app_bar&quot;</code></p></li><li><p>转场动画，俩个view设置相同的动画名称,比如<code>android:transitionName=&quot;@string/transition_search_back&quot;</code>，然后转场的时候，<code>ActivityOptions.makeSceneTransitionAnimation()</code>将view和对应的动画名添加进去</p></li><li><p>在各个模块都有其对应的数据仓库xxxRepository，里面全是kotlin 协程的suspend方法发动网络请求。然后在viewmodle里调回，viewmodle是有自己的scope的直接调<code>viewModelScope</code>即可启动协程。这个协程域会在viewmodle被clear的时候取消。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin协程在android的应用</title>
      <link href="/2019/11/13/20191113%20kotlin%E5%8D%8F%E7%A8%8B%E5%9C%A8android%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/11/13/20191113%20kotlin%E5%8D%8F%E7%A8%8B%E5%9C%A8android%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<ol><li>可以让View层继承<code>CoroutineScope by MainScope</code>，就可以直接使用<code>launch</code>调用协程<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span>:<span class="type">Fragment</span></span>() ,CoroutineScope <span class="keyword">by</span> MainScope()&#123;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">xxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">          launch&#123;</span><br><span class="line">          <span class="comment">//...业务逻辑，默认在主线程执行</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如果使用了ViewModle的话，可以在vm内直接使用<code>viewModelScope.launch {  }</code>开启协程，也是在主线程内执行。</li><li>那么协程是怎么协的呢，举个栗子，retrofit网络请求，可以这样（<strong><em>注意这是举个栗子，实际开发用retrofit一般不会这么做，返回要么是Call，要么是Response，要么是Rxjava的Observable，否则服务端给个响应码404就异常了，捕获异常也只能拿到异常信息 ，拿不到errorBody中的信息</em></strong>）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">interface Api&#123;</span><br><span class="line">    @GET(&quot;xxx&#x2F;xxx&quot;)</span><br><span class="line">    suspend fun getData(): BaseDTO&lt;*&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suspend fun getData() : BaseDTO&lt;*&gt; &#x3D; withContext(Dispatchers.IO)&#123;</span><br><span class="line">    Retrofit.Builder().baseUrl(&quot;&quot;).build().create(Api::class.java).getData()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun test()&#123;</span><br><span class="line">    launch &#123; </span><br><span class="line">        val data &#x3D; getData() &#x2F;&#x2F; getData是个suspend方法，withContext指定了运行在IO线程池</span><br><span class="line">        refeshUI(data)&#x2F;&#x2F; 回到launch下面，这里是运行在主线程的，可以拿到data后刷新UI</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>3.如果suspend不能直接返回结果呢，比如回调的时候怎么办？还是用retrofit举栗子</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span></span>&#123;</span><br><span class="line">     <span class="meta">@GET(<span class="meta-string">"xxx/xxx"</span>)</span></span><br><span class="line">     <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getData</span><span class="params">()</span></span>: BaseDTO&lt;*&gt;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@GET(<span class="meta-string">"xxx/xxx"</span>)</span></span><br><span class="line">     <span class="keyword">suspend</span>  <span class="function"><span class="keyword">fun</span> <span class="title">getData2</span><span class="params">()</span></span>:Call&lt;BaseDTO&lt;*&gt;&gt;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个suspend方法一样能返回BaseDTO的数据</span></span><br><span class="line"> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">getData2</span><span class="params">()</span></span> :BaseDTO&lt;*&gt;? = suspendCoroutine &#123;continuation-&gt;</span><br><span class="line">     <span class="keyword">val</span> call = Retrofit.Builder().baseUrl(<span class="string">""</span>).build().create(Api::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>).<span class="title">getData2</span></span>()</span><br><span class="line">     call.enqueue(<span class="keyword">object</span>:Callback&lt;BaseDTO&lt;*&gt;&gt;&#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">BaseDTO</span>&lt;*&gt;&gt;, t: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">             continuation.resume(<span class="literal">null</span>)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">BaseDTO</span>&lt;*&gt;&gt;, response: <span class="type">Response</span>&lt;<span class="type">BaseDTO</span>&lt;*&gt;&gt;)</span></span> &#123;</span><br><span class="line">             continuation.resume(response.body())</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">     launch &#123; </span><br><span class="line">         <span class="keyword">val</span> data2 = getData2() <span class="comment">// getData2是个suspend方法，withContext指定了运行在IO线程池</span></span><br><span class="line">         refeshUI(data2)<span class="comment">// 回到launch下面，这里是运行在主线程的，可以拿到data后刷新UI</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>协程的优势就是可以直接在一个花括号内，像写同步代码一样写异步代码，线程协作运行。一些不必要的LiveData、EventBus、Handler之类跳来跳去的通知可以省去了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> kotlin </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android仿ios锁屏的验证小滑块</title>
      <link href="/2019/10/12/20191012%20Android%E4%BB%BFios%E9%94%81%E5%B1%8F%E7%9A%84%E9%AA%8C%E8%AF%81%E5%B0%8F%E6%BB%91%E5%9D%97/"/>
      <url>/2019/10/12/20191012%20Android%E4%BB%BFios%E9%94%81%E5%B1%8F%E7%9A%84%E9%AA%8C%E8%AF%81%E5%B0%8F%E6%BB%91%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.appcompat.widget.AppCompatSeekBar</span><br><span class="line">         android:layout_marginLeft&#x3D;&quot;40dp&quot;</span><br><span class="line">         android:layout_marginRight&#x3D;&quot;40dp&quot;</span><br><span class="line">         android:id&#x3D;&quot;@+id&#x2F;seekbar&quot;</span><br><span class="line">         android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">         android:layout_height&#x3D;&quot;50dp&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/10/12/16dbedd0b0c0599d?w=379&h=58&f=png&s=3572" alt=""><br>代码中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">val</span> dp25 = SizeUtils.dp2px(<span class="number">25F</span>)</span><br><span class="line">        <span class="comment">// 画背景，圆角为宽度一半，画出矩形</span></span><br><span class="line">        seekbar.background = GradientDrawable().apply &#123;</span><br><span class="line">            shape = GradientDrawable.RECTANGLE</span><br><span class="line">            cornerRadius = dp25.toFloat()</span><br><span class="line">            color = ColorStateList.valueOf(resources.getColor(R.color.colorPrimary))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置padding，值为滑块的半径。这样progress为0和100的时候，滑块会刚好顶住两边。</span></span><br><span class="line">        <span class="comment">// 否则滑块会凸出去，难看。</span></span><br><span class="line">        seekbar.setPadding(dp25, <span class="number">0</span>, dp25, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 偏移量，我这都自定义的drawable，如果有图片的话可能会用到</span></span><br><span class="line">        seekbar.thumbOffset = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 同上，滑块显示透明啥的出问题可能会用上这个</span></span><br><span class="line">        seekbar.splitTrack = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 滑块的drawable</span></span><br><span class="line">        seekbar.thumb = GradientDrawable().apply &#123;</span><br><span class="line">            shape = GradientDrawable.OVAL</span><br><span class="line">            color = ColorStateList.valueOf(Color.GRAY)</span><br><span class="line">            <span class="keyword">val</span> dp50 = SizeUtils.dp2px(<span class="number">50f</span>)</span><br><span class="line">            setSize(dp50, dp50)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证滑块嘛，要禁止直接点击，只允许拖动</span></span><br><span class="line">        seekbar.setOnSeekBarChangeListener(<span class="keyword">object</span> : SeekBar.OnSeekBarChangeListener &#123;</span><br><span class="line">            <span class="keyword">var</span> progress = seekbar.progress <span class="comment">// 默认的progress</span></span><br><span class="line">            <span class="keyword">var</span> started = <span class="literal">false</span> <span class="comment">// 默认未开始</span></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onProgressChanged</span><span class="params">(seekBar: <span class="type">SeekBar</span>?, progressValue: <span class="type">Int</span>, fromUser: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    <span class="comment">//求出滑块的大小所在的progress范围，在这范围内才响应</span></span><br><span class="line">                    <span class="comment">//seekbar.max.toFloat()/seekbar.width 是求出一个像素对应多少progress</span></span><br><span class="line">                    <span class="comment">//seekbar.thumb.intrinsicWidth/2  再乘以这个球的半径，就是阈值了</span></span><br><span class="line">                    <span class="keyword">val</span> threshold = seekbar.max.toFloat()/seekbar.width*seekbar.thumb.intrinsicWidth/<span class="number">2</span></span><br><span class="line">                    <span class="comment">// 原progress与当前progress的绝对值小于阈值，且是用户操作的，更改标记</span></span><br><span class="line">                    <span class="keyword">if</span> (abs(progressValue - progress) &lt; threshold) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                            started = <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        seekbar.progress = progress</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (started) &#123;</span><br><span class="line">                    progress = progressValue</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartTrackingTouch</span><span class="params">(seekBar: <span class="type">SeekBar</span>?)</span></span> &#123;</span><br><span class="line">                LogUtils.d(<span class="string">"on start touch <span class="subst">$&#123;seekBar?.progress&#125;</span>"</span>)</span><br><span class="line"><span class="comment">//                if(abs(seekbar?.progress?:0 - progress) &gt;10)&#123;</span></span><br><span class="line"><span class="comment">//                    seekbar?.progress = progress</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopTrackingTouch</span><span class="params">(seekBar: <span class="type">SeekBar</span>?)</span></span> &#123;</span><br><span class="line">                LogUtils.d(<span class="string">"on stop touch"</span>)</span><br><span class="line">                started = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//  其他逻辑，比如什么滑块滑到头，滑块要变化图片，那自己设置`setThumb`就是了。</span></span><br><span class="line">        <span class="comment">//  滑到头，通常用禁用seekbar不允许再划回去。。之类的，自己加`setEnabled`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INSTALL_FAILED_UID_CHANGED</title>
      <link href="/2019/08/28/20190828%20INSTALL_FAILED_UID_CHANGED/"/>
      <url>/2019/08/28/20190828%20INSTALL_FAILED_UID_CHANGED/</url>
      
        <content type="html"><![CDATA[<p>错误：安装出现<code>INSTALL_FAILED_UID_CHANGED</code></p><p>原因：设备已root，清单配置了系统应用，签名也是额外用系统签名打包的，在<code>AndroidManifest.xml</code>中设置了<code>android:sharedUserId=&quot;android.uid.system</code>，而打包时忘了添加上。导致的UID错误不同从而安装失败。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin使用Gson、Moshi、KotlinSerialization转换json的区别</title>
      <link href="/2019/05/02/20190502%20Kotlin%20%20%E4%BD%BF%E7%94%A8Gson%E3%80%81Moshi%E3%80%81KotlinSerialization%E8%BD%AC%E6%8D%A2json%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/05/02/20190502%20Kotlin%20%20%E4%BD%BF%E7%94%A8Gson%E3%80%81Moshi%E3%80%81KotlinSerialization%E8%BD%AC%E6%8D%A2json%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>简介：</strong><br><code>Gson</code>是google出的，<code>Moshi</code>是square出的，KotlinSerializatin（以下简称KS）是kotlin官方的。</p></blockquote><p>测试用数据类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonClass(generateAdapter = true)</span> <span class="comment">//这个注解是moshi用</span></span><br><span class="line"><span class="meta">@Serializable</span>                       <span class="comment">//这个注解KS用</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">        <span class="keyword">val</span> age :<span class="built_in">Int</span>=<span class="number">11</span>,</span><br><span class="line">        <span class="keyword">val</span> name :String= <span class="string">"lucy"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Moshi</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> moshi = Moshi.Builder().build()</span><br><span class="line">    <span class="keyword">val</span> user1 = moshi.adapter(User::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>).<span class="title">fromJson</span></span>(json)</span><br><span class="line">    Log.d(<span class="string">"moshi"</span>,user1.toString())</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    Log.e(<span class="string">"moshi"</span>,e.message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Gson</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> user2 = Gson().fromJson(json, User::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    Log.d(<span class="string">"Gson"</span>, user2.toString())</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    Log.e(<span class="string">"Gson"</span>,e.message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// KS</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> userJson = Json.parse(User.serializer(), json)</span><br><span class="line">    Log.d(<span class="string">"KS"</span>,userJson.toString())</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    Log.e(<span class="string">"KS"</span>,e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-测试一，参数空缺时，三家的处理。测试json为"><a href="#1-测试一，参数空缺时，三家的处理。测试json为" class="headerlink" title="1. 测试一，参数空缺时，三家的处理。测试json为"></a>1. 测试一，参数空缺时，三家的处理。测试json为</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val json &#x3D; &quot;&quot;&quot;</span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &quot;&quot;&quot;.trimIndent()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/5/2/16a78f8f57828b2b?w=363&h=50&f=png&s=5827" alt=""><br><code>Moshi</code>和<code>Gson</code>可以正常解析，并且可以将默认值赋值，<code>KS</code>抛了个参数缺失的异常。。</p><h2 id="2-测试二，多给了些数据类没有定义的参数"><a href="#2-测试二，多给了些数据类没有定义的参数" class="headerlink" title="2.测试二，多给了些数据类没有定义的参数"></a>2.测试二，多给了些数据类没有定义的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val json &#x3D; &quot;&quot;&quot;</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:&quot;tom&quot;,</span><br><span class="line">                &quot;isFemale&quot;:false,</span><br><span class="line">                &quot;age&quot;:24</span><br><span class="line">            &#125;</span><br><span class="line">        &quot;&quot;&quot;.trimIndent()</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/5/2/16a78fd143925fbf?w=709&h=68&f=png&s=16319" alt=""><br>KS报了个未知key，但可以取消严格模式来过滤。在改为<code>val userJson = Json.nonstrict.parse(User.serializer(), json)</code>后，三家都能正常解析。</p><h2 id="3-测试三，从测试一得知，不给参数是可以正常拿到默认值的，那么给定null呢？"><a href="#3-测试三，从测试一得知，不给参数是可以正常拿到默认值的，那么给定null呢？" class="headerlink" title="3. 测试三，从测试一得知，不给参数是可以正常拿到默认值的，那么给定null呢？"></a>3. 测试三，从测试一得知，不给参数是可以正常拿到默认值的，那么给定null呢？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val json &#x3D; &quot;&quot;&quot;</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;name&quot;:null</span><br><span class="line">            &#125;</span><br><span class="line">        &quot;&quot;&quot;.trimIndent()</span><br></pre></td></tr></table></figure><p>结果：<br><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/5/2/16a79024c38c7d68?w=455&h=57&f=png&s=8938" alt=""><br>三家都有点问题。<br><code>moshi</code>和<code>KS</code>一样，都能认得出来<code>kotlin</code>有定义了<code>name</code>是<code>notnull</code>的，json给定了null都报错了，<code>Gson</code>看起来是正常解析的，但是它没有认出kotlin的非空定义。</p><h2 id="4-测试四-上述用例中User都是用默认值的，现在我们去除掉"><a href="#4-测试四-上述用例中User都是用默认值的，现在我们去除掉" class="headerlink" title="4.测试四 上述用例中User都是用默认值的，现在我们去除掉"></a>4.测试四 上述用例中User都是用默认值的，现在我们去除掉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class User(</span><br><span class="line">            val age :Int,</span><br><span class="line">            val name :String</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>给一个空串去解析，理所当然的，moshi和KS都报错了，Gson能正常解析，然而与测试一不同，同样是空串去解析，这次Gson并没有拿到默认值。<br><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/5/2/16a79095eb08068e?w=363&h=53&f=png&s=7772" alt=""></p><blockquote><p>从结果来看，Gson还是比较稳的，至少在java层面来说，它没有太大问题。只是在对kotlin的支持不够。一个是空类型认不出；一个是它只取空构造去创建对象，kotlin在每个构造参数都有默认值的时候，会有空构造函数，然后会调用带参构造将默认值初始化，所以Gson能够正常解析。但如果没有默认值的时候，kotlin生成的字节码中是没有空构造的，此时Gson就拿不到默认值了。而moshi和ks能够认出kotlin的一些特点，但是区区一个解析json都要我去处理异常，我是不高兴的。。</p></blockquote><p>设置成所有参数都可空，且给一个默认值，那么moshi和Gson就都没有问题了。但是这样就放弃了kotlin的非空特性</p><p>谁的好的方法，比如过滤掉Gson对null的赋值，欢迎留言。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ObjectBox 数据刷新无效问题</title>
      <link href="/2019/04/12/20190412%20ObjectBox%20%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2019/04/12/20190412%20ObjectBox%20%E6%95%B0%E6%8D%AE%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>实际项目中发现没有自动刷新，于是写了个小demo测试了下，</li></ol><p>一开始是这样，tv是用来测试自动刷新的<code>TextView</code>，tv2是手动显示<code>user.age</code>的，用来对比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ObjectBox.getUserBox().query().build()</span><br><span class="line">            .subscribe()</span><br><span class="line">            .on(AndroidScheduler.mainThread())</span><br><span class="line">            .observer &#123;</span><br><span class="line">                tv.text = it.firstOrNull()?.age?.toString()</span><br><span class="line">            &#125;</span><br><span class="line">btn_modify.setOnClickListener &#123;</span><br><span class="line">            val singleUser = ObjectBox.getUserBox().all.firstOrNull()</span><br><span class="line">            <span class="comment">//数据库空的，就随便插一条数据</span></span><br><span class="line">            <span class="keyword">if</span> (singleUser==<span class="keyword">null</span>) &#123;</span><br><span class="line">                ObjectBox.getUserBox().put(User(<span class="number">0</span>,<span class="string">"lucy"</span>,<span class="number">13</span>))</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库有值，就拿出来，年龄自增一次</span></span><br><span class="line">                singleUser.age+=<span class="number">1</span></span><br><span class="line">                ObjectBox.getUserBox().put(singleUser)</span><br><span class="line">            &#125;</span><br><span class="line">            tv2.setText(singleUser?.age?.toString())</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>测试发现，一开始tv和tv2是保持同步的，随着不断点击<code>btn_modify</code>按钮，tv2还在自增，tv停了。。，我怀疑是不是observer的对象被回收了，于是改成了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> subcribtion  = DataSubscriptionList() <span class="comment">//这里是成员变量</span></span><br><span class="line"> <span class="comment">//下面是方法里的内容</span></span><br><span class="line"> ObjectBox.getUserBox().query().build()</span><br><span class="line">            .subscribe(subcribtion)  <span class="comment">//这里传进来</span></span><br><span class="line">            .on(AndroidScheduler.mainThread())</span><br><span class="line">            .observer &#123;</span><br><span class="line">                tv.text = it.firstOrNull()?.age?.toString()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>将subscribe保存在成员变量里延长生命周期，就可以一直刷新了。</p><p>用<code>DataSubscriptionList</code>可以保存多个<code>DataSubscription</code>,取消监听的时候可以一起<code>cancel</code>掉。<br>如果就一个的话，直接将observer返回的<code>DataSubscription</code>放到成员变量位置在一个个取消也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ObjectBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首页Activity重复启动问题</title>
      <link href="/2019/03/01/20190301%20%E9%A6%96%E9%A1%B5Activity%E9%87%8D%E5%A4%8D%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/01/20190301%20%E9%A6%96%E9%A1%B5Activity%E9%87%8D%E5%A4%8D%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>Activity有很多种启动方式，app启动，不同app互相调，安装完点打开、点击桌面图标等等。<br>当activity的<code>launchIntent</code>中的<code>flag</code>不同的时候，就会创建实例，从而导致重复的问题。用户比较容易感知的就是安装完点打开，然后点击home，再点击桌面，此时会出现情况如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState)</span><br><span class="line">    setContentView(R.layout.activity_main)</span><br><span class="line">    val myPid &#x3D; Process.myPid()</span><br><span class="line">    LogUtils.d(</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        isTaskRoot:$&#123;isTaskRoot&#125;</span><br><span class="line">        pid:$myPid</span><br><span class="line">        activityList:$&#123;ActivityUtils.getActivityList()&#125;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">│ isTaskRoot:true </span><br><span class="line">│ pid:10731 </span><br><span class="line">│  activityList:[com.optimais.demo.MainActivity@dfbbc47]</span><br><span class="line">└─────────────────</span><br><span class="line"></span><br><span class="line">│ isTaskRoot:false </span><br><span class="line">│ pid:10731 </span><br><span class="line">│  activityList:[com.optimais.demo.MainActivity@dfbbc47, com.optimais.demo.MainActivity@c383d34]</span><br></pre></td></tr></table></figure><p>可以看到第二次从桌面直接点击图标启动的时候，<code>pid</code>是相同的，<code>isTaskRoot</code>为<code>false</code>了，栈内压了2个<code>MainActivity</code>。</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><ol><li>在<code>onCreate</code>里默默的加上一个<code>if(isTaskRoot()) finish()</code>退掉好了。</li><li>更常见的做法是，首页的<code>launchMode</code>通常会设置为<code>android:launchMode=&quot;singleTask&quot;</code>栈内唯一即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于kotlin gson序列化时出现null的一些注意点</title>
      <link href="/2018/12/10/20181210%20%E5%85%B3%E4%BA%8Ekotlin%20gson%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E5%87%BA%E7%8E%B0null%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
      <url>/2018/12/10/20181210%20%E5%85%B3%E4%BA%8Ekotlin%20gson%E5%BA%8F%E5%88%97%E5%8C%96%E6%97%B6%E5%87%BA%E7%8E%B0null%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>现在前后端基本都用json来传输数据，kotlin因为有空校验比如这个类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXDataBean</span></span>(</span><br><span class="line">        <span class="keyword">var</span> code:<span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">data</span>: DataBean = DataBean()) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataBean</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在kotlin中定义的都是非空，可是如果给的json是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;:1,</span><br><span class="line">    &quot;data&quot;:null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Gson().fromJson(json,XXXDataBean::class.java)</code>拿到的对象中，data会为空。如果json不给data的话，那么data依然是初始化时的那个<code>DataBean()</code></p><hr><p>5.1 更新<br>发现一个新的问题</p><p>数据类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class User(</span><br><span class="line">    var age :Int,</span><br><span class="line">    var name :String&#x3D; &quot;lucy&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在AndroidStudio中点击<code>Tools-Kotlin-Show Kotlin Bytecode</code>会出现字节码，再点击<code>Decompile</code>能看到反编译的java文件<br><img src= "/img/loading.gif" data-src="https://user-gold-cdn.xitu.io/2019/5/1/16a72b5aebf780dc?w=1177&h=433&f=png&s=67604" alt=""><br>上面那个<code>User</code>的构造中，可以看到<code>age</code>没有默认值，<code>name</code>给了个默认值，此时，java中的构造为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, @NotNull String name)</span> </span>&#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(name, <span class="string">"name"</span>);</span><br><span class="line">      <span class="keyword">super</span>();</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// $FF: synthetic method</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> var1, String var2, <span class="keyword">int</span> var3, DefaultConstructorMarker var4)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ((var3 &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var2 = <span class="string">"lucy"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>(var1, var2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果<code>User</code>中的参数都给一个默认值，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data class User(</span><br><span class="line">    var age :Int&#x3D;13,</span><br><span class="line">    var name :String&#x3D; &quot;lucy&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>则对应java的构造会变成3个，多了个无参构造。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public User(int age, @NotNull String name) &#123;</span><br><span class="line">      Intrinsics.checkParameterIsNotNull(name, &quot;name&quot;);</span><br><span class="line">      super();</span><br><span class="line">      this.age &#x3D; age;</span><br><span class="line">      this.name &#x3D; name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; $FF: synthetic method</span><br><span class="line">   public User(int var1, String var2, int var3, DefaultConstructorMarker var4) &#123;</span><br><span class="line">      if ((var3 &amp; 1) !&#x3D; 0) &#123;</span><br><span class="line">         var1 &#x3D; 13;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if ((var3 &amp; 2) !&#x3D; 0) &#123;</span><br><span class="line">         var2 &#x3D; &quot;lucy&quot;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this(var1, var2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public User() &#123;</span><br><span class="line">      this(0, (String)null, 3, (DefaultConstructorMarker)null);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>那么问题来了：<br>在构造都有默认值的情况下，Gson是能够正常解析的。但如果有非默认值的时候，也就是java文件中没有空参构造时，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val json &#x3D;&quot;&quot;</span><br><span class="line">val user2 &#x3D; Gson().fromJson(json, User::class.java)</span><br><span class="line">println(&quot;gson: $user2&quot;)</span><br></pre></td></tr></table></figure><p>结果为：<code>gson: User(age=0, name=null)</code>，即使我们给了<code>name</code>一个初始值，即使我们标明了<code>name</code>是<code>@NotNull</code>，解析的结果依然是个null。</p><blockquote><p>结论：Gson解析需要一个空参构造，而kotlin如果构造中每个参数都有默认值的时候，会有一个空参，并且会正确的将默认值赋值。所以Gson可以正常解析。如果kotlin的构造有参数没有默认值，就会出问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.UnsatisfiedLinkError:找不到so等等的排查经过</title>
      <link href="/2018/11/27/20181127%20java.lang.UnsatisfiedLinkError%20%E6%89%BE%E4%B8%8D%E5%88%B0so%E7%AD%89%E7%AD%89%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E8%BF%87/"/>
      <url>/2018/11/27/20181127%20java.lang.UnsatisfiedLinkError%20%E6%89%BE%E4%B8%8D%E5%88%B0so%E7%AD%89%E7%AD%89%E7%9A%84%E6%8E%92%E6%9F%A5%E7%BB%8F%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="问题发生："><a href="#问题发生：" class="headerlink" title="问题发生："></a>问题发生：</h3><p>本来数据库用的room，发现greendao作者写了个objectbox，就导入项目玩玩，结果发生了上述问题。</p><h3 id="排查："><a href="#排查：" class="headerlink" title="排查："></a>排查：</h3><ol><li>首先检查安装文件里有没有这个so文件，<code>adb shell</code> 进入设备，在<code>data/data/包名/lib</code>下果然有一些其他的so，但是没有报错的那个so。好的，问题发现。</li><li>既然没有安装，那么打包有没有出问题呢？找到apk文件，打开，在lib中有arm、armv7、armv8等。报错的so在arm里有，在armv7、armv8里都没有。OK，问题定位了。</li></ol><blockquote><p>设备是armv7的，之前用的数据库框架room是google对sqlite的一些封装，没有引入so，打包后只有arm，兼容几乎所有android设备，故没有报错。引入objectbox后，作者认为arm已过时没有支持，而且也不是我手动引入的，是在<code>build.gradle</code>里通过插件引入的，也没有感知到这个问题。所以打包后有arm、armv7、armv8等，而设备是v7的，在安装的时候就只将armv7安装了进去，导致了报错。</p></blockquote><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>在module的<code>build.gradle下</code>对ndk支持限定只支持armv7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.optimais.scales&quot;</span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line"></span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters &#39;armeabi-v7a&#39;    &#x2F;&#x2F;只生成armv7的so</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再将报错第三方库的jnilib里的arm文件夹更名为armeabi-v7a即可。（他没提供v7，只能这么解决了）</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android端信号强度监听api23.md</title>
      <link href="/2018/11/16/20181116%20Android%E7%AB%AF%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E7%9B%91%E5%90%ACapi23/"/>
      <url>/2018/11/16/20181116%20Android%E7%AB%AF%E4%BF%A1%E5%8F%B7%E5%BC%BA%E5%BA%A6%E7%9B%91%E5%90%ACapi23/</url>
      
        <content type="html"><![CDATA[<p><code>onSignalStrengthChanged()</code>已经过期，但是监听<code>PhoneStateListener.LISTEN_SIGNAL_STRENGTHS</code>的话。<br>如果使用<code>signalStrength.level()</code>又会提示需要api23。<br>其实<code>getLevel()</code>方法并不是api23新加的，只是之前是hide方法。如下所示，用反射拿出来即可。<br>同学们也可自行加入版本判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val service1 &#x3D; getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager</span><br><span class="line">service1.listen(object:PhoneStateListener()&#123;</span><br><span class="line">    override fun onSignalStrengthsChanged(signalStrength: SignalStrength) &#123;</span><br><span class="line">        super.onSignalStrengthsChanged(signalStrength)</span><br><span class="line">        val javaClass &#x3D; signalStrength.javaClass</span><br><span class="line">        val method &#x3D; javaClass.getDeclaredMethod(&quot;getLevel&quot;)</span><br><span class="line">        if (method !&#x3D; null) &#123;</span><br><span class="line">            method.isAccessible &#x3D; true</span><br><span class="line">            val invoke &#x3D; method.invoke(signalStrength)</span><br><span class="line">            LogUtils.d(&quot;invoke:$invoke&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSONObject（map）的坑</title>
      <link href="/2018/07/13/20180721%20JSONObject%EF%BC%88map%EF%BC%89%E7%9A%84%E5%9D%91/"/>
      <url>/2018/07/13/20180721%20JSONObject%EF%BC%88map%EF%BC%89%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<ol><li>bug出现：在一个EditText中输入文字，拿到输入的文字<code>view.text.trim()</code>，存入map，继而使用了<code>JSONObject（map）</code>之后，<code>JSONObject.toString()</code>发现存进去个“null”。</li></ol><ol start="2"><li>bug原因：debug后发现<code>view.text.trim()</code>存进map的是个<code>SpannableStringBuilder</code>，<br>JSONObject的构造是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public JSONObject(Map copyFrom) &#123;</span><br><span class="line">       this();</span><br><span class="line">       Map&lt;?, ?&gt; contentsTyped &#x3D; (Map&lt;?, ?&gt;) copyFrom;</span><br><span class="line">       for (Map.Entry&lt;?, ?&gt; entry : contentsTyped.entrySet()) &#123;</span><br><span class="line">           &#x2F;*</span><br><span class="line">            * Deviate from the original by checking that keys are non-null and</span><br><span class="line">            * of the proper type. (We still defer validating the values).</span><br><span class="line">            *&#x2F;</span><br><span class="line">           String key &#x3D; (String) entry.getKey();</span><br><span class="line">           if (key &#x3D;&#x3D; null) &#123;</span><br><span class="line">               throw new NullPointerException(&quot;key &#x3D;&#x3D; null&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           nameValuePairs.put(key, wrap(entry.getValue()));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>遍历map，存起来。但是注意，并不是直接存<code>entry.getValue()</code>的。而是进行了wrap包裹，那么包裹了啥呢？<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public static Object wrap(Object o) &#123;</span><br><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        if (o instanceof JSONArray || o instanceof JSONObject) &#123;</span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line">        if (o.equals(NULL)) &#123;</span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (o instanceof Collection) &#123;</span><br><span class="line">                return new JSONArray((Collection) o);</span><br><span class="line">            &#125; else if (o.getClass().isArray()) &#123;</span><br><span class="line">                return new JSONArray(o);</span><br><span class="line">            &#125;</span><br><span class="line">            if (o instanceof Map) &#123;</span><br><span class="line">                return new JSONObject((Map) o);</span><br><span class="line">            &#125;</span><br><span class="line">            if (o instanceof Boolean ||</span><br><span class="line">                o instanceof Byte ||</span><br><span class="line">                o instanceof Character ||</span><br><span class="line">                o instanceof Double ||</span><br><span class="line">                o instanceof Float ||</span><br><span class="line">                o instanceof Integer ||</span><br><span class="line">                o instanceof Long ||</span><br><span class="line">                o instanceof Short ||</span><br><span class="line">                o instanceof String) &#123;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            if (o.getClass().getPackage().getName().startsWith(&quot;java.&quot;)) &#123;</span><br><span class="line">                return o.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><code>NULL</code>是个Object，可以看成就是个“null”<br>这个<code>wrap()</code>对<code>null</code>、<code>JSONArray</code>、 <code>JSONObject</code>、集合以及各种基本类型进行了处理，但是不能处理<code>SpannableStringBuilder</code>啊~</li><li>bug解决<br>在获取到EditText的内容的时候 还是<code>view.text.toString().trim()</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android连接指定wifi</title>
      <link href="/2018/07/13/20180713%20android%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9Awifi/"/>
      <url>/2018/07/13/20180713%20android%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9Awifi/</url>
      
        <content type="html"><![CDATA[<p> 本文牵涉<code>kotlin</code>和<code>rxjava</code>的相关知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询wifi信息需要申请权限，权限工具类就不要在意了，重点在下面</span><br><span class="line">PermissionUtils.permission(PermissionConstants.LOCATION).callback(object : PermissionUtils.SimpleCallback &#123;</span><br><span class="line">     override fun onGranted() &#123;</span><br><span class="line">     &#x2F;&#x2F;通过授权后，开启一个等待框</span><br><span class="line">         progressDialog.show()</span><br><span class="line">     &#x2F;&#x2F;    每2秒发送一次事件</span><br><span class="line">         connectObs &#x3D; Observable.interval(2, TimeUnit.SECONDS)</span><br><span class="line">     &#x2F;&#x2F;    取30次，还没连上就结束，算这次超时</span><br><span class="line">                 .take(30)</span><br><span class="line">                 .subscribeOn(Schedulers.computation())</span><br><span class="line">                 .subscribe(&#123;</span><br><span class="line">                     &#x2F;&#x2F;开启扫描</span><br><span class="line">                     WifiUtils.startScan()</span><br><span class="line">                     &#x2F;&#x2F;连接</span><br><span class="line">                     WifiUtils.connect(padHotspotSsid, padHotspotPwd)</span><br><span class="line">                 &#125;, &#123;&#125;, &#123;</span><br><span class="line">                     if (progressDialog.isShowing) progressDialog.dismiss()</span><br><span class="line">                     ToastUtils.showShort(&quot;连接屏热点超时&quot;)</span><br><span class="line">                 &#125;)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     override fun onDenied() &#123;</span><br><span class="line">         ToastUtils.showShort(&quot;您拒绝了请求位置权限，我们无法搜寻网络连接上屏，请在设置中打开&quot;)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).request()</span><br></pre></td></tr></table></figure><p>WifiUtils</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">object WifiUtils &#123;</span><br><span class="line">    val wifiManager: WifiManager &#x3D; Utils.getApp().applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager</span><br><span class="line">    val connectivityManager: ConnectivityManager &#x3D; Utils.getApp().applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager</span><br><span class="line">    fun startScan() &#123;</span><br><span class="line">        if (!wifiManager.isWifiEnabled) wifiManager.isWifiEnabled &#x3D; true;</span><br><span class="line">        wifiManager.startScan()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun getScanResult() &#x3D; wifiManager.scanResults</span><br><span class="line"></span><br><span class="line">    fun connect(ssid: String, pwd: String): Boolean &#123;</span><br><span class="line">&#x2F;&#x2F;      之前的写法是之前有连接的话先断连，后来发现小米华为这种一旦断连会特别积极的重连，导致指定的wifi抢不到</span><br><span class="line">&#x2F;&#x2F;      试过之后发现可以不用断，就注释掉了，直接走下面的代码进行连接</span><br><span class="line">&#x2F;&#x2F;        如果已经连上wifi了</span><br><span class="line">&#x2F;&#x2F;        if(NetworkUtils.isWifiConnected()) &#123;</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;            直接忘掉</span><br><span class="line">&#x2F;&#x2F;            if(!wifiManager.removeNetwork(wifiManager.connectionInfo.networkId)) &#123;</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;                忘不掉，至少尝试断连</span><br><span class="line">&#x2F;&#x2F;                wifiManager.disconnect()</span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;                断连在某些手机依然可能会失败，或者返回true其实没断掉，或者断掉了立马又被重连。。等等</span><br><span class="line">&#x2F;&#x2F;            &#125;</span><br><span class="line">&#x2F;&#x2F;        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;在扫描到的wifi中找ssid也就是wifi名相同的，如果没有说明没搜到，那么连不了，等下一次吧</span><br><span class="line">        val scanResult &#x3D; wifiManager.scanResults.singleOrNull &#123; it.SSID &#x3D;&#x3D; ssid &#125;</span><br><span class="line">        if (scanResult &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;如果找到了wifi了，从配置表中搜索该wifi的配置config，也就是以前有没有连接过</span><br><span class="line">            var success &#x3D; false</span><br><span class="line">            &#x2F;&#x2F;注意configuredNetworks中的ssid，系统源码中加上了双引号，这里比对的时候要去掉</span><br><span class="line">            val config &#x3D; wifiManager.configuredNetworks.singleOrNull &#123; it.SSID.replace(&quot;\&quot;&quot;, &quot;&quot;) &#x3D;&#x3D; ssid &#125;</span><br><span class="line">            if (config !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;如果找到了，那么直接连接，不要调用wifiManager.addNetwork  这个方法会更改config的！</span><br><span class="line">&#x2F;&#x2F;                val netId &#x3D; wifiManager.addNetwork(config)</span><br><span class="line">                success &#x3D; wifiManager. enableNetwork(config.networkId,true)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F; 没找到的话，就创建一个新的配置，然后正常的addNetWork、enableNetwork即可</span><br><span class="line">                val padWifiNetwork &#x3D; createWifiConfig(scanResult.SSID, pwd, getCipherType(scanResult.capabilities))</span><br><span class="line">                val netId &#x3D; wifiManager.addNetwork(padWifiNetwork)</span><br><span class="line">                success &#x3D; wifiManager. enableNetwork(netId,true)</span><br><span class="line">            &#125;</span><br><span class="line">            LogUtils.d(&quot;连接$&#123;scanResult.SSID&#125;...$success&quot;)</span><br><span class="line">            return success</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fun isConnected(ssid: String): Boolean &#123;</span><br><span class="line">        return if (wifiManager.isWifiEnabled) &#123;</span><br><span class="line">            wifiManager.connectionInfo.ssid.replace(&quot;\&quot;&quot;, &quot;&quot;) &#x3D;&#x3D; ssid</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun createWifiConfig(ssid: String, password: String, type: WifiCapability): WifiConfiguration &#123;</span><br><span class="line">        &#x2F;&#x2F;初始化WifiConfiguration</span><br><span class="line">        val config &#x3D; WifiConfiguration()</span><br><span class="line">        config.allowedAuthAlgorithms.clear()</span><br><span class="line">        config.allowedGroupCiphers.clear()</span><br><span class="line">        config.allowedKeyManagement.clear()</span><br><span class="line">        config.allowedPairwiseCiphers.clear()</span><br><span class="line">        config.allowedProtocols.clear()</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;指定对应的SSID</span><br><span class="line">        config.SSID &#x3D; &quot;\&quot;&quot; + ssid + &quot;\&quot;&quot;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果之前有类似的配置</span><br><span class="line">        val tempConfig &#x3D; wifiManager.configuredNetworks.singleOrNull &#123; it.SSID &#x3D;&#x3D; &quot;\&quot;$ssid\&quot;&quot; &#125;</span><br><span class="line">        if (tempConfig !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;则清除旧有配置  不是自己创建的network 这里其实是删不掉的</span><br><span class="line">            wifiManager.removeNetwork(tempConfig.networkId)</span><br><span class="line">            wifiManager.saveConfiguration()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;不需要密码的场景</span><br><span class="line">        if (type &#x3D;&#x3D; WifiCapability.WIFI_CIPHER_NO_PASS) &#123;</span><br><span class="line">            config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE)</span><br><span class="line">            &#x2F;&#x2F;以WEP加密的场景</span><br><span class="line">        &#125; else if (type &#x3D;&#x3D; WifiCapability.WIFI_CIPHER_WEP) &#123;</span><br><span class="line">            config.hiddenSSID &#x3D; true</span><br><span class="line">            config.wepKeys[0] &#x3D; &quot;\&quot;&quot; + password + &quot;\&quot;&quot;</span><br><span class="line">            config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN)</span><br><span class="line">            config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED)</span><br><span class="line">            config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE)</span><br><span class="line">            config.wepTxKeyIndex &#x3D; 0</span><br><span class="line">            &#x2F;&#x2F;以WPA加密的场景，自己测试时，发现热点以WPA2建立时，同样可以用这种配置连接</span><br><span class="line">        &#125; else if (type &#x3D;&#x3D; WifiCapability.WIFI_CIPHER_WPA) &#123;</span><br><span class="line">            config.preSharedKey &#x3D; &quot;\&quot;&quot; + password + &quot;\&quot;&quot;</span><br><span class="line">            config.hiddenSSID &#x3D; true</span><br><span class="line">            config.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN)</span><br><span class="line">            config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP)</span><br><span class="line">            config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK)</span><br><span class="line">            config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP)</span><br><span class="line">            config.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP)</span><br><span class="line">            config.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP)</span><br><span class="line">            config.status &#x3D; WifiConfiguration.Status.ENABLED</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return config</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun getCipherType(capabilities: String): WifiCapability &#123;</span><br><span class="line">        return if (capabilities.contains(&quot;WEB&quot;)) &#123;</span><br><span class="line">            WifiCapability.WIFI_CIPHER_WEP</span><br><span class="line">        &#125; else if (capabilities.contains(&quot;PSK&quot;)) &#123;</span><br><span class="line">            WifiCapability.WIFI_CIPHER_WPA</span><br><span class="line">        &#125; else if (capabilities.contains(&quot;WPS&quot;)) &#123;</span><br><span class="line">            WifiCapability.WIFI_CIPHER_NO_PASS</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            WifiCapability.WIFI_CIPHER_NO_PASS</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun getDhcpInfo(): String &#123;</span><br><span class="line">        val dhcpInfo &#x3D; wifiManager.dhcpInfo</span><br><span class="line">        return intIP2StringIP(dhcpInfo.serverAddress)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun intIP2StringIP(ip: Int): String &#123;</span><br><span class="line">        return (ip and 0xFF).toString() + &quot;.&quot; +</span><br><span class="line">                (ip shr 8 and 0xFF) + &quot;.&quot; +</span><br><span class="line">                (ip shr 16 and 0xFF) + &quot;.&quot; +</span><br><span class="line">                (ip shr 24 and 0xFF)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum class WifiCapability &#123;</span><br><span class="line">    WIFI_CIPHER_WEP, WIFI_CIPHER_WPA, WIFI_CIPHER_NO_PASS</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>databinding 双向绑定在EditText上的一些问题</title>
      <link href="/2018/02/01/20180201%20databinding%20%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%9C%A8EditText%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/01/20180201%20databinding%20%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%9C%A8EditText%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p> 有很多种方式，比如手动过滤类或名字，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D; new GsonBuilder().setExclusionStrategies(new ExclusionStrategy() &#123;   </span><br><span class="line">            @Override  </span><br><span class="line">            public boolean shouldSkipField(FieldAttributes f) &#123;  </span><br><span class="line">                 &#x2F;&#x2F;过滤掉字段名包含&quot;age&quot;  </span><br><span class="line">                return f.getName().contains(&quot;age&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">              </span><br><span class="line">            @Override  </span><br><span class="line">            public boolean shouldSkipClass(Class&lt;?&gt; clazz) &#123;  </span><br><span class="line">                &#x2F;&#x2F;过滤掉 类名包含 Bean的类  </span><br><span class="line">                return clazz.getName().contains(&quot;Bean&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).create();</span><br></pre></td></tr></table></figure><p>这里主要通过<code>@Expose</code>来处理。<br>先写个data class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    @Expose(serialize &#x3D; true, deserialize &#x3D; false)</span><br><span class="line">    var age: Int? &#x3D; null</span><br><span class="line">    @Expose(serialize &#x3D; false, deserialize &#x3D; true)</span><br><span class="line">    var name: String? &#x3D; null</span><br><span class="line"></span><br><span class="line">    @Expose(serialize &#x3D; false, deserialize &#x3D; false)</span><br><span class="line">    var isMale: Boolean? &#x3D; null</span><br><span class="line">    @Expose(serialize &#x3D; true, deserialize &#x3D; true)</span><br><span class="line">    var isFemale: Boolean? &#x3D; null</span><br><span class="line"></span><br><span class="line">    @Expose</span><br><span class="line">    var address: String? &#x3D; null</span><br><span class="line">    var phone: String? &#x3D; null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列出了6种情况。serialize 为序列化，deserialize 为反序列化，让我们看看区别吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        val json &#x3D; &quot;&quot;&quot;&#123;</span><br><span class="line">    &quot;age&quot;: 13,</span><br><span class="line">    &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">    &quot;isMale&quot;: true,</span><br><span class="line">    &quot;isFemale&quot;: false,</span><br><span class="line">    &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">    &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">&#125;&quot;&quot;&quot;</span><br><span class="line">        LogUtils.d(json)</span><br><span class="line">        val user &#x3D; Gson().fromJson(json,User::class.java)</span><br><span class="line">        val userBuilder &#x3D; GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().fromJson(json,User::class.java)</span><br><span class="line">        printUser(user)</span><br><span class="line">        printUser(userBuilder)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun printUser(user:User) &#123;</span><br><span class="line">        LogUtils.d(&quot;&quot;&quot;</span><br><span class="line">            age $&#123;user.age&#125;           true false</span><br><span class="line">            name $&#123;user.name&#125;          false true</span><br><span class="line">            isFemale $&#123;user.isFemale&#125;     false false</span><br><span class="line">            isMale $&#123;user.isMale&#125;       true true</span><br><span class="line">            address $&#123;user.address&#125;      default</span><br><span class="line">            phone $&#123;user.phone&#125;         none</span><br><span class="line">        &quot;&quot;&quot;.trimIndent())</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:44)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;age&quot;: 13,</span><br><span class="line">│     &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">│     &quot;isMale&quot;: true,</span><br><span class="line">│     &quot;isFemale&quot;: false,</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">│ &#125;</span><br><span class="line">└─────────────────────────────────────────────────</span><br><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, printUser(MainActivity.kt:52)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ age 13           true false</span><br><span class="line">│ name Lily          false true</span><br><span class="line">│ isMale true       false false</span><br><span class="line">│ isFemale false     true true</span><br><span class="line">│ address 江苏省      default</span><br><span class="line">│ phone 13999999999         none</span><br><span class="line">└─────────────────────────────────────────────────</span><br><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, printUser(MainActivity.kt:52)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ age null           true false</span><br><span class="line">│ name Lily          false true</span><br><span class="line">│ isMale null       false false</span><br><span class="line">│ isFemale false     true true</span><br><span class="line">│ address 江苏省      default</span><br><span class="line">│ phone null         none</span><br><span class="line">└─────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>直接用<code>Gson().fromJson()</code>不受影响。<br>在使用<code>GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().fromJson()</code>的时候，看到注解上标注了<code>deserialize = false</code>的<code>age</code> <code>isMale</code>和没加上注解的<code>phone</code>没有被赋值。</p><hr><p>现在来试试对象转成json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val user&#x3D;User().apply &#123;</span><br><span class="line">    age &#x3D; 14</span><br><span class="line">    name&#x3D; &quot;Lily&quot;</span><br><span class="line">    isMale &#x3D; false</span><br><span class="line">    isFemale &#x3D; true</span><br><span class="line">    address &#x3D; &quot;江苏省&quot;</span><br><span class="line">    phone &#x3D; &quot;13999999999&quot;</span><br><span class="line">&#125;</span><br><span class="line">LogUtils.json(Gson().toJson(user))</span><br><span class="line">LogUtils.json(GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().toJson(user))</span><br></pre></td></tr></table></figure><p>结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:58)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;age&quot;: 14,</span><br><span class="line">│     &quot;isFemale&quot;: true,</span><br><span class="line">│     &quot;isMale&quot;: false,</span><br><span class="line">│     &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">│     &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">│ &#125;</span><br><span class="line">└───────────────────────────────────────────────────────</span><br><span class="line">┌───────────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:59)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;age&quot;: 14,</span><br><span class="line">│     &quot;isFemale&quot;: true</span><br><span class="line">│ &#125;</span><br><span class="line">└───────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>用<code>Gson().toJson()</code>依旧不受影响。<br>而使用了<code>excludeFieldsWithoutExposeAnnotation</code>可以看到，标注了<code>serialize = false</code>的<code>name</code> <code>isMale</code>和没有加注解的<code>phone</code>没有被赋值。</p><hr><p>结论：当使用<code>GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</code>的时候，对象转json的序列化过程受到<code>@Expose(serialize = false)</code>影响。<br>json转对象的反序列化过程受到<code>@Expose(deserialize = false)</code>影响</p><p>@Expose()  默认为Expose(deserialize = true,serialize = true)</p><hr><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DataBinding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gson在序列化和反序列化忽略字段</title>
      <link href="/2018/01/26/20180126%20Gson%E5%9C%A8%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BF%BD%E7%95%A5%E5%AD%97%E6%AE%B5/"/>
      <url>/2018/01/26/20180126%20Gson%E5%9C%A8%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BF%BD%E7%95%A5%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p> 有很多种方式，比如手动过滤类或名字，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Gson gson &#x3D; new GsonBuilder().setExclusionStrategies(new ExclusionStrategy() &#123;   </span><br><span class="line">            @Override  </span><br><span class="line">            public boolean shouldSkipField(FieldAttributes f) &#123;  </span><br><span class="line">                 &#x2F;&#x2F;过滤掉字段名包含&quot;age&quot;  </span><br><span class="line">                return f.getName().contains(&quot;age&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">              </span><br><span class="line">            @Override  </span><br><span class="line">            public boolean shouldSkipClass(Class&lt;?&gt; clazz) &#123;  </span><br><span class="line">                &#x2F;&#x2F;过滤掉 类名包含 Bean的类  </span><br><span class="line">                return clazz.getName().contains(&quot;Bean&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).create();</span><br></pre></td></tr></table></figure><p>这里主要通过<code>@Expose</code>来处理。<br>先写个data class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    @Expose(serialize &#x3D; true, deserialize &#x3D; false)</span><br><span class="line">    var age: Int? &#x3D; null</span><br><span class="line">    @Expose(serialize &#x3D; false, deserialize &#x3D; true)</span><br><span class="line">    var name: String? &#x3D; null</span><br><span class="line"></span><br><span class="line">    @Expose(serialize &#x3D; false, deserialize &#x3D; false)</span><br><span class="line">    var isMale: Boolean? &#x3D; null</span><br><span class="line">    @Expose(serialize &#x3D; true, deserialize &#x3D; true)</span><br><span class="line">    var isFemale: Boolean? &#x3D; null</span><br><span class="line"></span><br><span class="line">    @Expose</span><br><span class="line">    var address: String? &#x3D; null</span><br><span class="line">    var phone: String? &#x3D; null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列出了6种情况。serialize 为序列化，deserialize 为反序列化，让我们看看区别吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        val json &#x3D; &quot;&quot;&quot;&#123;</span><br><span class="line">    &quot;age&quot;: 13,</span><br><span class="line">    &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">    &quot;isMale&quot;: true,</span><br><span class="line">    &quot;isFemale&quot;: false,</span><br><span class="line">    &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">    &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">&#125;&quot;&quot;&quot;</span><br><span class="line">        LogUtils.d(json)</span><br><span class="line">        val user &#x3D; Gson().fromJson(json,User::class.java)</span><br><span class="line">        val userBuilder &#x3D; GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().fromJson(json,User::class.java)</span><br><span class="line">        printUser(user)</span><br><span class="line">        printUser(userBuilder)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun printUser(user:User) &#123;</span><br><span class="line">        LogUtils.d(&quot;&quot;&quot;</span><br><span class="line">            age $&#123;user.age&#125;           true false</span><br><span class="line">            name $&#123;user.name&#125;          false true</span><br><span class="line">            isFemale $&#123;user.isFemale&#125;     false false</span><br><span class="line">            isMale $&#123;user.isMale&#125;       true true</span><br><span class="line">            address $&#123;user.address&#125;      default</span><br><span class="line">            phone $&#123;user.phone&#125;         none</span><br><span class="line">        &quot;&quot;&quot;.trimIndent())</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:44)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;age&quot;: 13,</span><br><span class="line">│     &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">│     &quot;isMale&quot;: true,</span><br><span class="line">│     &quot;isFemale&quot;: false,</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">│ &#125;</span><br><span class="line">└─────────────────────────────────────────────────</span><br><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, printUser(MainActivity.kt:52)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ age 13           true false</span><br><span class="line">│ name Lily          false true</span><br><span class="line">│ isMale true       false false</span><br><span class="line">│ isFemale false     true true</span><br><span class="line">│ address 江苏省      default</span><br><span class="line">│ phone 13999999999         none</span><br><span class="line">└─────────────────────────────────────────────────</span><br><span class="line">┌─────────────────────────────────────────────────</span><br><span class="line">│ main, printUser(MainActivity.kt:52)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ age null           true false</span><br><span class="line">│ name Lily          false true</span><br><span class="line">│ isMale null       false false</span><br><span class="line">│ isFemale false     true true</span><br><span class="line">│ address 江苏省      default</span><br><span class="line">│ phone null         none</span><br><span class="line">└─────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>直接用<code>Gson().fromJson()</code>不受影响。<br>在使用<code>GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().fromJson()</code>的时候，看到注解上标注了<code>deserialize = false</code>的<code>age</code> <code>isMale</code>和没加上注解的<code>phone</code>没有被赋值。</p><hr><p>现在来试试对象转成json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val user&#x3D;User().apply &#123;</span><br><span class="line">    age &#x3D; 14</span><br><span class="line">    name&#x3D; &quot;Lily&quot;</span><br><span class="line">    isMale &#x3D; false</span><br><span class="line">    isFemale &#x3D; true</span><br><span class="line">    address &#x3D; &quot;江苏省&quot;</span><br><span class="line">    phone &#x3D; &quot;13999999999&quot;</span><br><span class="line">&#125;</span><br><span class="line">LogUtils.json(Gson().toJson(user))</span><br><span class="line">LogUtils.json(GsonBuilder().excludeFieldsWithoutExposeAnnotation().create().toJson(user))</span><br></pre></td></tr></table></figure><p>结果是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:58)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;age&quot;: 14,</span><br><span class="line">│     &quot;isFemale&quot;: true,</span><br><span class="line">│     &quot;isMale&quot;: false,</span><br><span class="line">│     &quot;name&quot;: &quot;Lily&quot;,</span><br><span class="line">│     &quot;phone&quot;: &quot;13999999999&quot;</span><br><span class="line">│ &#125;</span><br><span class="line">└───────────────────────────────────────────────────────</span><br><span class="line">┌───────────────────────────────────────────────────────</span><br><span class="line">│ main, onCreate(MainActivity.kt:59)</span><br><span class="line">├┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄</span><br><span class="line">│ &#123;</span><br><span class="line">│     &quot;address&quot;: &quot;江苏省&quot;,</span><br><span class="line">│     &quot;age&quot;: 14,</span><br><span class="line">│     &quot;isFemale&quot;: true</span><br><span class="line">│ &#125;</span><br><span class="line">└───────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>用<code>Gson().toJson()</code>依旧不受影响。<br>而使用了<code>excludeFieldsWithoutExposeAnnotation</code>可以看到，标注了<code>serialize = false</code>的<code>name</code> <code>isMale</code>和没有加注解的<code>phone</code>没有被赋值。</p><hr><p>结论：当使用<code>GsonBuilder().excludeFieldsWithoutExposeAnnotation().create()</code>的时候，对象转json的序列化过程受到<code>@Expose(serialize = false)</code>影响。<br>json转对象的反序列化过程受到<code>@Expose(deserialize = false)</code>影响</p><p>@Expose()  默认为Expose(deserialize = true,serialize = true)</p><hr><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些toolbar的设置</title>
      <link href="/2018/01/17/20180117%20%E4%B8%80%E4%BA%9Btoolbar%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2018/01/17/20180117%20%E4%B8%80%E4%BA%9Btoolbar%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p> 惯例先贴代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Base application theme. --&gt;</span><br><span class="line">    &lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class="line">        &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorPrimary&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorPrimaryDark&quot;&gt;@color&#x2F;colorPrimaryDark&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;colorAccent&quot;&gt;@color&#x2F;colorAccent&lt;&#x2F;item&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;item name&#x3D;&quot;android:actionMenuTextColor&quot;&gt;@android:color&#x2F;white&lt;&#x2F;item&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;item name&#x3D;&quot;actionOverflowMenuStyle&quot;&gt;@style&#x2F;PopupMenu&lt;&#x2F;item&gt;--&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name&#x3D;&quot;toolbar_style&quot; parent&#x3D;&quot;ThemeOverlay.AppCompat.Dark.ActionBar&quot; &gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:homeAsUpIndicator&quot;&gt;@android:drawable&#x2F;ic_menu_help&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:actionMenuTextColor&quot;&gt;#11eeff&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:actionOverflowButtonStyle&quot;&gt;@style&#x2F;OverflowButtonStyle&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style name&#x3D;&quot;OverflowButtonStyle&quot; parent&#x3D;&quot;@android:style&#x2F;Widget.ActionButton.Overflow&quot;&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:src&quot;&gt;@android:drawable&#x2F;ic_lock_idle_low_battery&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;!--设置popupwindow样式--&gt;</span><br><span class="line">    &lt;style name&#x3D;&quot;PopupMenu&quot; parent&#x3D;&quot;@style&#x2F;Widget.AppCompat.Light.PopupMenu.Overflow&quot; &gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:colorBackground&quot;&gt;@color&#x2F;colorPrimary&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:textColor&quot;&gt;@android:color&#x2F;white&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;!--弹出菜单与标题栏的间距--&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:dropDownVerticalOffset&quot;&gt;1dip&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;overlapAnchor&quot;&gt;false&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure><p>在xml里给appbarLayout设置上<code>android:theme=&quot;@style/toolbar_style&quot;</code></p><ol><li><p>自定义title并居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">    android:theme&#x3D;&quot;@style&#x2F;toolbar_style&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class="line">       app:popupTheme&#x3D;&quot;@style&#x2F;PopupMenu&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:text&#x3D;&quot;title&quot;</span><br><span class="line">            android:layout_gravity&#x3D;&quot;center&quot;</span><br><span class="line">            android:textColor&#x3D;&quot;#fff&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br><span class="line">&lt;&#x2F;android.support.design.widget.AppBarLayout&gt;</span><br></pre></td></tr></table></figure><p>让toolbar不显示title，<code>supportActionBar.setDisplayShowTitleEnabled(false)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setSupportActionBar(toolbar)</span><br><span class="line">        with(supportActionBar!!) &#123;</span><br><span class="line">            setDisplayHomeAsUpEnabled(true)</span><br><span class="line">            setDisplayShowTitleEnabled(false) </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>设置R.id.home，也就是toolbar左边那个返回按钮的图标样式<br><code>supportActionBar.setDisplayHomeAsUpEnabled(true)</code>先让图标显示出来<br><code>&lt;item name=&quot;android:homeAsUpIndicator&quot;&gt;@android:drawable/ic_menu_help&lt;/item&gt;</code></p></li><li><p>上面代码中<code>ThemeOverlay.AppCompat.Dark.ActionBar</code>可以让按钮变白色</p></li><li><p><code>R.style.PopupMenu</code>里的设置是控制多出来的的optionMenu弹出pop的样式，需要在xml中给toolbar设置上这个主题</p></li><li><p>设置optionMenu的字体颜色<code>&lt;item name=&quot;android:actionMenuTextColor&quot;&gt;#11eeff&lt;/item&gt;</code></p></li></ol><p>6.设置右边那三个点的图标样式<code>&lt;item name=&quot;android:actionOverflowButtonStyle&quot;&gt;@style/OverflowButtonStyle&lt;/item&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> toolbar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PopupWindow设置宽高及设置背景问题</title>
      <link href="/2018/01/17/20180117%20PopupWindow%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E5%8F%8A%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/17/20180117%20PopupWindow%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98%E5%8F%8A%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[ <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    private val mPopTitle: PopupWindow by lazy &#123;</span><br><span class="line">        PopupWindow(initPopView()).apply &#123;</span><br><span class="line">&#x2F;&#x2F;            有了contentView后要先测量一下才能拿到正确的高度</span><br><span class="line">            contentView.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED)</span><br><span class="line">            width &#x3D; ScreenUtils.getScreenWidth()</span><br><span class="line">            height &#x3D; contentView.measuredHeight</span><br><span class="line">            isOutsideTouchable &#x3D; true</span><br><span class="line">            isFocusable &#x3D; true</span><br><span class="line">            setBackgroundDrawable(ColorDrawable(resources.getColor(R.color.black_35)))</span><br><span class="line">            setOnDismissListener &#123;</span><br><span class="line">                tvTitle.setCompoundDrawablesRelativeWithIntrinsicBounds(0, 0, R.drawable.arrow_down_white, 0)</span><br><span class="line">                PopUtils.clearDim(mContext)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在initPopView（）返回了contentView之后，要先测量一下再设置宽高。<br>contentView的xml里全是wrap_content。<br>因为需要黑色背景，直接加载popupwindow上就行了<code>setBackgroundDrawable(ColorDrawable(resources.getColor(R.color.black_35)))</code></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> PopupWindows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Room &amp; Rxjava</title>
      <link href="/2018/01/12/20180112%20Room%20&amp;%20Rxjava/"/>
      <url>/2018/01/12/20180112%20Room%20&amp;%20Rxjava/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://developer.android.com/topic/libraries/architecture/room.html" target="_blank" rel="noopener">Room</a>是google在<a href="https://developer.android.com/topic/libraries/architecture/index.html" target="_blank" rel="noopener">Architecture Components</a><br>提出的一个持久化库，可以异步查询返回LiveData和Rxjava里的Maybe,Single,Flowable,其中LiveData和Flowable是可观测的查询。它们允许自动从数据库更新数据，从而刷新UI。</p><p>可以在UserDao里这么写，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(“SELECT * FROM Users WHERE id &#x3D; :userId”)</span><br><span class="line">User getUserById(String userId);</span><br></pre></td></tr></table></figure><p>但他有两个缺点：<br>1、这是同步的，所以会阻塞。<br>2、当user被修改的时候，我们总是需要手动调用这个方法。</p><p>在返回Maybe或Single的时候，确保<code>subscribeOn</code>调用了<code>Scheduler</code>的不同线程，而不是<code>AndroidSchedulers.mainThread()</code></p><p>若想加上room对rxjava的支持，需要在<code>build.gradle</code>中添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; RxJava support for Room</span><br><span class="line">implementation “android.arch.persistence.room:rxjava2:1.0.0-alpha5”</span><br><span class="line">&#x2F;&#x2F; Testing support</span><br><span class="line">androidTestImplementation “android.arch.core:core-testing:1.0.0-alpha5”</span><br></pre></td></tr></table></figure><p>#Maybe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(“SELECT * FROM Users WHERE id &#x3D; :userId”)</span><br><span class="line">Maybe&lt;User&gt; getUserById(String userId);</span><br></pre></td></tr></table></figure><p>来说说发生了啥：<br>1、当数据库里<strong>没有这条数据</strong>的时候，<code>Maybe</code>会直接<strong><code>onComplete()</code></strong>。<br>2、当<strong>有这条数据</strong>的时候，<code>Maybe</code>会触发<strong><code>onSuccess</code></strong>，然后会正常的<strong><code>onComplete()</code></strong>。<br>3、当数据在<code>Maybe</code>的<code>onCompleted()</code>后进行了更新，那就<strong>什么都不会发生了</strong>。</p><p>#Single</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(“SELECT * FROM Users WHERE id &#x3D; :userId”)</span><br><span class="line">Single&lt;User&gt; getUserById(String userId);</span><br></pre></td></tr></table></figure><p>1、当数据库里<strong>没有这条数据</strong>的时候，<code>Single</code>会直接<strong><code>onError(EmptyResultSetException.class)</code></strong>。<br>2、当<strong>有这条数据</strong>的时候，<code>Single</code>会触发<strong><code>onSuccess</code></strong>。<br>3、当数据在<code>Single.onCompleted()</code>后进行了更新，那就<strong>什么都不会发生了</strong>,自流被关闭后。</p><p>#Flowable</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Query(“SELECT * FROM Users WHERE id &#x3D; :userId”)</span><br><span class="line">Flowable&lt;User&gt; getUserById(String userId);</span><br></pre></td></tr></table></figure><p>1、当数据库里<strong>没有这条数据</strong>的时候，<code>Flowable</code><strong>不会发射</strong>，当然也就不会有<code>onNext</code>和<code>onError</code>。<br>2、当<strong>有这条数据</strong>的时候，<code>Flowable</code>会触发<strong><code>onNext</code></strong>。<br>3、任何时候<strong>数据被更新</strong>了，<code>Flowable</code>会自动发射来让你用最新的数据来更新UI。</p><p>Room and RxJava ， google写了个简单的<a href="https://github.com/googlesamples/android-architecture-components/tree/master/BasicRxJavaSample" target="_blank" rel="noopener"> 例子</a></p><p>over~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Room </tag>
            
            <tag> Rxjava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kotlin的let、apply、run、also、with、repeat、takeIf、takeUnless</title>
      <link href="/2018/01/04/20180104%20kotlin%E7%9A%84let%E3%80%81apply%E3%80%81run%E3%80%81also%E3%80%81with%E3%80%81repeat%E3%80%81takeIf%E3%80%81takeUnless/"/>
      <url>/2018/01/04/20180104%20kotlin%E7%9A%84let%E3%80%81apply%E3%80%81run%E3%80%81also%E3%80%81with%E3%80%81repeat%E3%80%81takeIf%E3%80%81takeUnless/</url>
      
        <content type="html"><![CDATA[<p>直接上源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] and returns its result.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;R&gt; run(block: () -&gt; R): R &#x3D; block()</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] with &#96;this&#96; value as its receiver and returns its result.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R &#x3D; block()</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R &#x3D; receiver.block()</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] with &#96;this&#96; value as its receiver and returns &#96;this&#96; value.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;T&gt; T.apply(block: T.() -&gt; Unit): T &#123; block(); return this &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] with &#96;this&#96; value as its argument and returns &#96;this&#96; value.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">@SinceKotlin(&quot;1.1&quot;)</span><br><span class="line">public inline fun &lt;T&gt; T.also(block: (T) -&gt; Unit): T &#123; block(this); return this &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Calls the specified function [block] with &#96;this&#96; value as its argument and returns its result.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R &#x3D; block(this)</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Returns &#96;this&#96; value if it satisfies the given [predicate] or &#96;null&#96;, if it doesn&#39;t.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">@SinceKotlin(&quot;1.1&quot;)</span><br><span class="line">public inline fun &lt;T&gt; T.takeIf(predicate: (T) -&gt; Boolean): T? &#x3D; if (predicate(this)) this else null</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Returns &#96;this&#96; value if it _does not_ satisfy the given [predicate] or &#96;null&#96;, if it does.</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">@SinceKotlin(&quot;1.1&quot;)</span><br><span class="line">public inline fun &lt;T&gt; T.takeUnless(predicate: (T) -&gt; Boolean): T? &#x3D; if (!predicate(this)) this else null</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Executes the given function [action] specified number of [times].</span><br><span class="line"> *</span><br><span class="line"> * A zero-based index of current iteration is passed as a parameter to [action].</span><br><span class="line"> *&#x2F;</span><br><span class="line">@kotlin.internal.InlineOnly</span><br><span class="line">public inline fun repeat(times: Int, action: (Int) -&gt; Unit) &#123;</span><br><span class="line">    for (index in 0..times - 1) &#123;</span><br><span class="line">        action(index)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先说区别，apply  also  会返回自身，用法有点像建造者模式。而let、run可以在最后一行返回任意东西<br>#run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val j &#x3D; i.run &#123;</span><br><span class="line">    println(this)</span><br><span class="line">    this+2</span><br><span class="line">&#125;</span><br><span class="line">println(j)</span><br></pre></td></tr></table></figure><p>#let</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val j &#x3D; i.let &#123;</span><br><span class="line">    println(it)</span><br><span class="line">    it+2</span><br><span class="line">&#125;</span><br><span class="line">println(j)</span><br></pre></td></tr></table></figure><p>输出都是4.0   6.0<br>可以看出run和let都可以在最后一行进行return。不同在于run是用this进行引用i，而let是用it。<br>#apply</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val j &#x3D; i.apply &#123;</span><br><span class="line">   println(this)</span><br><span class="line">    println(toInt())</span><br><span class="line">&#125;</span><br><span class="line">println(i&#x3D;&#x3D;j)</span><br></pre></td></tr></table></figure><p>#also  SinceKotlin1.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val j &#x3D; i.also &#123;</span><br><span class="line">    println(it)</span><br><span class="line">    println(it.toInt())</span><br><span class="line">&#125;</span><br><span class="line">println(i&#x3D;&#x3D;j)</span><br></pre></td></tr></table></figure><p>返回的是4.0   4   true<br>可以看到，apply和also也都可以对i进行操作，区别是apply是用this来引用i，而also是用it。是不是跟上面的run和let很像？  apply和also返回的是自身，run和let是可以随意返回的。<br>#with</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val b &#x3D; with(i)&#123;</span><br><span class="line">    when  &#123;</span><br><span class="line">        this&gt;0 -&gt; true</span><br><span class="line">        else -&gt; false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(b)</span><br></pre></td></tr></table></figure><p>输出的是true<br>with不是一个扩展，可以在方法体内通过this调用，并且可以返回任意。</p><p>#repeat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val list &#x3D; mutableListOf&lt;Int&gt;()</span><br><span class="line">kotlin.repeat(3)&#123;</span><br><span class="line">    list.add(it)</span><br><span class="line">&#125;</span><br><span class="line">println(list)</span><br></pre></td></tr></table></figure><p>repeat就是重复做一些什么事情咯,传3就是从0,1,2  每次操作一次list.add(it),it就是那个0,1,2</p><p>#takeIf takeUnless</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val i &#x3D; 4.0</span><br><span class="line">val j &#x3D; i.takeIf &#123; it&gt;0 &#125;</span><br><span class="line">val k &#x3D; i.takeUnless &#123; it&gt;0 &#125;</span><br><span class="line">println(j)</span><br><span class="line">println(k)</span><br></pre></td></tr></table></figure><p>takeIf需要在方法体内最后一行返回个Boolean，如果满足条件，则返回自身，否则返回null;<br>takeUnless相反。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码 </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>google sample-android-architecture看源码学姿势</title>
      <link href="/2018/01/04/20180104%20google%20sample-android-architecture%E7%9C%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/01/04/20180104%20google%20sample-android-architecture%E7%9C%8B%E6%BA%90%E7%A0%81%E5%AD%A6%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>1、在util包下看到了几个文件，是文件不是class，打开一看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2017 The Android Open Source Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.example.android.architecture.blueprints.todoapp.util</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Various extension functions for AppCompatActivity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity</span><br><span class="line"><span class="keyword">import</span> android.arch.lifecycle.ViewModel</span><br><span class="line"><span class="keyword">import</span> android.arch.lifecycle.ViewModelProviders</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.IdRes</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentTransaction</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBar</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> com.example.android.architecture.blueprints.todoapp.ViewModelFactory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> val ADD_EDIT_RESULT_OK = Activity.RESULT_FIRST_USER + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> val DELETE_RESULT_OK = Activity.RESULT_FIRST_USER + <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> val EDIT_RESULT_OK = Activity.RESULT_FIRST_USER + <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The `fragment` is added to the container view with id `frameId`. The operation is</span></span><br><span class="line"><span class="comment"> * performed by the `fragmentManager`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fun AppCompatActivity.replaceFragmentInActivity(fragment: Fragment, frameId: Int) &#123;</span><br><span class="line">    supportFragmentManager.transact &#123;</span><br><span class="line">        replace(frameId, fragment)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The `fragment` is added to the container view with tag. The operation is</span></span><br><span class="line"><span class="comment"> * performed by the `fragmentManager`.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fun AppCompatActivity.addFragmentToActivity(fragment: Fragment, tag: String) &#123;</span><br><span class="line">    supportFragmentManager.transact &#123;</span><br><span class="line">        add(fragment, tag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun AppCompatActivity.setupActionBar(<span class="meta">@IdRes</span> toolbarId: Int, action: ActionBar.() -&gt; Unit) &#123;</span><br><span class="line">    setSupportActionBar(findViewById(toolbarId))</span><br><span class="line">    supportActionBar?.run &#123;</span><br><span class="line">        action()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun &lt;T : ViewModel&gt; AppCompatActivity.obtainViewModel(viewModelClass: Class&lt;T&gt;) =</span><br><span class="line">        ViewModelProviders.of(<span class="keyword">this</span>, ViewModelFactory.getInstance(application)).get(viewModelClass)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runs a FragmentTransaction, then calls commit().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> inline fun FragmentManager.transact(action: FragmentTransaction.() -&gt; Unit) &#123;</span><br><span class="line">    beginTransaction().apply &#123;</span><br><span class="line">        action()</span><br><span class="line">    &#125;.commit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面存放着一些扩展函数，供activity直接方便的调用。还有最后的inline内联函数等都是kotlin的特点。这个文件可以看成是java的一个工具类了。<br>如果是对view进行操作的工具类 ，那就建立ViewExt.kt，里面是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Transforms static java function Snackbar.make() to an extension function on View.</span><br><span class="line"> *&#x2F;</span><br><span class="line">fun View.showSnackbar(snackbarText: String, timeLength: Int) &#123;</span><br><span class="line">    Snackbar.make(this, snackbarText, timeLength).show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Triggers a snackbar message when the value contained by snackbarTaskMessageLiveEvent is modified.</span><br><span class="line"> *&#x2F;</span><br><span class="line">fun View.setupSnackbar(lifecycleOwner: LifecycleOwner,</span><br><span class="line">        snackbarMessageLiveEvent: SingleLiveEvent&lt;Int&gt;, timeLength: Int) &#123;</span><br><span class="line">    snackbarMessageLiveEvent.observe(lifecycleOwner, Observer &#123;</span><br><span class="line">&#x2F;&#x2F;        这个it是singleLiveEvent.value，存放的是snackbar要展示的文本的resId</span><br><span class="line">&#x2F;&#x2F;        如果it不是null，才做showSnackbar的操作</span><br><span class="line">        it?.let &#123; showSnackbar(context.getString(it), timeLength) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Reloads the data when the pull-to-refresh is triggered.</span><br><span class="line"> *</span><br><span class="line"> * Creates the &#96;android:onRefresh&#96; for a [SwipeRefreshLayout].</span><br><span class="line"> *&#x2F;</span><br><span class="line">@BindingAdapter(&quot;android:onRefresh&quot;)</span><br><span class="line">fun ScrollChildSwipeRefreshLayout.setSwipeRefreshLayoutOnRefreshListener(</span><br><span class="line">        viewModel: TasksViewModel) &#123;</span><br><span class="line">    setOnRefreshListener &#123; viewModel.loadTasks(true) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了扩展函数，还包含了DataBinding的一些自定义的BindingAdapter比如上面的那个SwipeRefreshLayout的刷新监听。</p><p>2、 viewmodle在生成完之后，可以直接通过.apply{}对vm存放的一些LiveData的监听放在里面。</p><p>3、fragment的onCreateView里设置<code>setHasOptionsMenu(true)</code>之后，可以对<code>onOptionsItemSelected</code> <code>onCreateOptionsMenu</code>进行重写来操作toolbar.</p><p>4、SwipeRefreshLayout的第一个child如果不是list的话会不能触发refresh的监听，可以继承他来设置监听具体哪个childView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class ScrollChildSwipeRefreshLayout @JvmOverloads constructor(</span><br><span class="line">        context: Context,</span><br><span class="line">        attrs: AttributeSet? &#x3D; null</span><br><span class="line">) : SwipeRefreshLayout(context, attrs) &#123;</span><br><span class="line"></span><br><span class="line">    var scrollUpChild: View? &#x3D; null</span><br><span class="line"></span><br><span class="line">    override fun canChildScrollUp() &#x3D;</span><br><span class="line">            scrollUpChild?.canScrollVertically(-1) ?: super.canChildScrollUp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接绑定上刷新监听需要先弄两个静态方法，标上@BindingAdapter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">object TestBindingAdapter &#123;</span><br><span class="line">    @BindingAdapter(&quot;android:items&quot;)</span><br><span class="line">    @JvmStatic</span><br><span class="line">    fun setItems(rv: RecyclerView, items: List&lt;String&gt;) &#123;</span><br><span class="line">        with(rv.adapter as BaseQuickAdapter&lt;String,BaseBindingViewHolder&gt;)&#123;</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @BindingAdapter(&quot;android:onRefresh&quot;)</span><br><span class="line">    @JvmStatic fun SwipeRefreshLayout.setOnRefreshListener(</span><br><span class="line">            viewModel: Vm) &#123;</span><br><span class="line">        setOnRefreshListener &#123; viewModel.refresh() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在xml里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;srl&quot;</span><br><span class="line">        android:onRefresh&#x3D;&quot;@&#123;vm&#125;&quot; &#x2F;&#x2F;就直接可以这么用了</span><br><span class="line">        app:refreshing&#x3D;&quot;@&#123;vm.dataLoading&#125;&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintLeft_toLeftOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintRight_toRightOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toBottomOf&#x3D;&quot;@id&#x2F;appbar&quot; &gt;</span><br><span class="line">        &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">            android:items&#x3D;&quot;@&#123;vm.datas&#125;&quot;</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;rv&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;android.support.v4.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure><p>如果要自动更新刷新状态<code>app:refreshing=&quot;@{vm.dataLoading}&quot;</code>，那么vm.dataLoading是个ObservableBoolean(),且在<code>attrs.xml</code>中加上下面的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;declare-styleable name&#x3D;&quot;SwipeRefreshLayout&quot;&gt;</span><br><span class="line">        &lt;attr name&#x3D;&quot;refreshing&quot; format&#x3D;&quot;boolean&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;declare-styleable&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure><p>5、在fragment中对activity里的fab（floatActionButton）进行操作，就直接通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">activity.findViewById&lt;FloatingActionButton&gt;(R.id.fab_add_task).run &#123;</span><br><span class="line">            setImageResource(R.drawable.ic_add)</span><br><span class="line">            setOnClickListener &#123;</span><br><span class="line">                viewDataBinding.viewmodel?.addNewTask()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>去设置图标和点击事件，不要写在activity里再传进frag。</p><p>6、Toolbar用得少。基本都是自定义，头一次看见除了popupWindow还有个东西叫popupMenu。。用来在ActionBar上显示一个窗口</p><p>7、对于listview和databinding的使用：<br>首先申明一个单例TaskListBindings</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Contains [BindingAdapter]s for the [Task] list.</span><br><span class="line"> *&#x2F;</span><br><span class="line">object TasksListBindings &#123;</span><br><span class="line"></span><br><span class="line">    @BindingAdapter(&quot;app:items&quot;)</span><br><span class="line">    @JvmStatic fun setItems(listView: ListView, items: List&lt;Task&gt;) &#123;</span><br><span class="line">        with(listView.adapter as TasksAdapter) &#123;</span><br><span class="line">            replaceData(items)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在xml里配置上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">              android:id&#x3D;&quot;@+id&#x2F;tasks_list&quot;</span><br><span class="line">              app:items&#x3D;&quot;@&#123;viewmodel.items&#125;&quot;</span><br><span class="line">              android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">              android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>注意这个items是一个ObservableArrayList<br><code>val items: ObservableList&lt;Task&gt; = ObservableArrayList()</code><br>当他发生变化的时候，会去上面的bindingadapter里调用tasksAdapter.replaceData(items)方法进行刷新</p><p>8、因为binding与xml是绑定的，所以可以直接FragmentXXXBinding.inflate(),不用写R.layout.xxx了。</p><p>9、事件的流转通过调用vm的方法，改变vm.liveData，从而通知到注册了liveData的地方进行处理事件。比如页面的跳转，弹个snackbar，弹个dialog，弹个popupWindow，都从liveData通知到Activity，让activity去做。</p><p>10、intent包含的key 以及requestCode，往哪里去，就把这些常量写在哪里。</p><p>11、设置actionbar左上角返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这个方法在第一个代码段中定义的，往上翻↑</span><br><span class="line">setupActionBar(R.id.toolbar) &#123;</span><br><span class="line">            setDisplayHomeAsUpEnabled(true) &#x2F;&#x2F;显示返回图标</span><br><span class="line">            setDisplayShowHomeEnabled(true) &#x2F;&#x2F;显示左上图标</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> override fun onSupportNavigateUp(): Boolean &#123;</span><br><span class="line">        onBackPressed()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>12、接受单个事件或数据变动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class SingleLiveEvent&lt;T&gt; : MutableLiveData&lt;T&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    private val pending &#x3D; AtomicBoolean(false)</span><br><span class="line"></span><br><span class="line">    @MainThread</span><br><span class="line">    override fun observe(owner: LifecycleOwner, observer: Observer&lt;T&gt;) &#123;</span><br><span class="line">&#x2F;&#x2F;        判断是否曾经注册过监听了</span><br><span class="line">        if (hasActiveObservers()) &#123;</span><br><span class="line">            Log.w(TAG, &quot;Multiple observers registered but only one will be notified of changes.&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Observe the internal MutableLiveData</span><br><span class="line">        super.observe(owner, Observer&lt;T&gt; &#123; t -&gt;</span><br><span class="line">            if (pending.compareAndSet(true, false)) &#123;</span><br><span class="line">                observer.onChanged(t)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @MainThread</span><br><span class="line">    override fun setValue(t: T?) &#123;</span><br><span class="line">        pending.set(true)</span><br><span class="line">        super.setValue(t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Used for cases where T is Void, to make calls cleaner.</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @MainThread</span><br><span class="line">    fun call() &#123;</span><br><span class="line">        value &#x3D; null</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        private const val TAG &#x3D; &quot;SingleLiveEvent&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vm中建立一个对象 <code>val newTaskEvent= SingleLiveEvent&lt;Void&gt;()</code><br>在某个Activity或Fragment中注册监听。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">viewModel &#x3D; obtainViewModel().apply &#123;</span><br><span class="line">            &#x2F;&#x2F; Subscribe to &quot;new task&quot; event</span><br><span class="line">            newTaskEvent.observe(this@TasksActivity, Observer&lt;Void&gt; &#123;</span><br><span class="line">                this@TasksActivity.addNewTask()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>13、<img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-f5d65d2b6b278195.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以看到分包是根据PBF（package by feature）的，而不是PBL （package by layer），根据业务特征来分类。而其中有一个data包是这样的<br><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-1f89abb7c19b6ac1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>分为了本地数据和远程数据。<br>在TasksDataSource中定义了操作数据的接口。在LocalDataSource和RemoteDataSource中具体实现。比如本地就用room去数据库拿，remote就去操作retrofit去网络获取。<br>TaskRepository数据仓库 也是继承自TasksDataSource，且同时持有本地和远程的DataSource，综合获取、处理并对外提供数据。<br>可以看到层次非常清晰。我想起了一张图，等我去google官网找下。。<br>找到了，是这个<br><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-255d01b3ae072217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle：download...下载不下来的时候应该..</title>
      <link href="/2018/01/03/20180103%20Gradle%EF%BC%9Adownload...%E4%B8%8B%E8%BD%BD%E4%B8%8D%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E5%BA%94%E8%AF%A5../"/>
      <url>/2018/01/03/20180103%20Gradle%EF%BC%9Adownload...%E4%B8%8B%E8%BD%BD%E4%B8%8D%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%97%B6%E5%80%99%E5%BA%94%E8%AF%A5../</url>
      
        <content type="html"><![CDATA[<p>有时候compile一些库，特别是谷歌自己的库的时候，下不动。<br>在项目里的<code>gradle.properties</code>下加上<br><code>org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080</code>试试。<br>此法对于gradle下载库有效，下载gradle本身应该是无效的。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级AS3.0 kotlin、databinding、glide的一些问题</title>
      <link href="/2017/10/31/20171031%20%20%E5%8D%87%E7%BA%A7AS3.0%20kotlin%E3%80%81databinding%E3%80%81glide%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2017/10/31/20171031%20%20%E5%8D%87%E7%BA%A7AS3.0%20kotlin%E3%80%81databinding%E3%80%81glide%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先是<code>Unresolved reference: databinding</code>这个东西。<br>折腾过程不说了，贴出<strong>项目</strong>的的build.gradle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version &#x3D; &#39;1.1.51&#39;</span><br><span class="line">    ext.android_plugin_version &#x3D; &#39;3.0.0&#39;  </span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#39;com.android.tools.build:gradle:3.0.0&#39;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        &#x2F;&#x2F; in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &quot;https:&#x2F;&#x2F;jitpack.io&quot; &#125;</span><br><span class="line">        maven &#123; url &#39;https:&#x2F;&#x2F;dl.google.com&#x2F;dl&#x2F;android&#x2F;maven2&#x2F;&#39; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在module的build.gradle里加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kapt &#123;</span><br><span class="line">        generateStubs &#x3D; true</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>编译之后，发现GlideApp找不到了，怎么都生成不了。难道这也是kotlin的锅？<br>好吧，既然java的注解生成不了，那么用kotlin来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;annotationProcessor &#39;com.github.bumptech.glide:compiler:4.2.0&#39;</span><br><span class="line">kapt &#39;com.github.bumptech.glide:compiler:4.2.0&#39;</span><br></pre></td></tr></table></figure><p>然后将glidemodule注解的java类改成kotlin类<br>按下CTRL+F9 make project<br>全部解决。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>parameter must be a descendant of this view</title>
      <link href="/2017/10/12/20171012%20%20parameter%20must%20be%20a%20descendant%20of%20this%20view/"/>
      <url>/2017/10/12/20171012%20%20parameter%20must%20be%20a%20descendant%20of%20this%20view/</url>
      
        <content type="html"><![CDATA[<p>非法参数异常，遇到的问题是：<br>ScrollView里面有RecyclerView，RecyclerView里的item有EditText，我是在这个页面在后台的时候，因为数据发生了变化，让页面刷新了，比如<code>adapter.notifyDataSetChanged();</code>，因获取焦点产生的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: parameter must be a descendant of <span class="keyword">this</span> view</span><br><span class="line">at android.view.ViewGroup.offsetRectBetweenParentAndChild(ViewGroup.java:<span class="number">5103</span>)</span><br><span class="line">at android.view.ViewGroup.offsetDescendantRectToMyCoords(ViewGroup.java:<span class="number">5040</span>)</span><br><span class="line">at android.widget.ScrollView.isWithinDeltaOfScreen(ScrollView.java:<span class="number">1140</span>)</span><br><span class="line">at android.widget.ScrollView.onSizeChanged(ScrollView.java:<span class="number">1543</span>)</span><br><span class="line">at android.view.View.sizeChange(View.java:<span class="number">15843</span>)</span><br><span class="line">at android.view.View.setFrame(View.java:<span class="number">15808</span>)</span><br><span class="line">at android.view.View.layout(View.java:<span class="number">15724</span>)</span><br></pre></td></tr></table></figure><p>解决办法：<br>给这个页面的其他什么东西,比如顶层view设置上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:focusable&#x3D;&quot;true&quot;</span><br><span class="line">android:focusableInTouchMode&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure><p>这样item里的EditText不会获取焦点就ok了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> problems </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试逻辑题</title>
      <link href="/2017/09/26/20170926%20%E9%9D%A2%E8%AF%95%E9%80%BB%E8%BE%91%E9%A2%98/"/>
      <url>/2017/09/26/20170926%20%E9%9D%A2%E8%AF%95%E9%80%BB%E8%BE%91%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>叔叔来家做客，哥哥妹妹问叔叔生日，叔叔说是1989年，然后将月份告诉哥哥，日子告诉妹妹，最后说是下面的其中一个：<br>1月9日，1月20日，1月31日<br>2月1日，2月15日，2月29日<br>3月11日，3月21日，3月31日<br>4月18日，4月19日，4月20日<br>5月9日，5月19日，5月29日<br>6月15日，6月18日，6月21日。<br>哥哥说：“不知道，妹妹肯定也不知道”<br>妹妹说：“本来不知道，现在我知道了”<br>哥哥说：“那我也知道了”<br>问叔叔生日。</p></blockquote><p>解：</p><ol><li>哥哥开始能确定妹妹不知道，所以哥哥掌握的正确的月份里，肯定没有单独出现的日子，否则妹妹就直接知道了。那么出现了一次的1日和11日所在的 2月和3月都不是哥哥知道的那个正确的月份。</li><li>妹妹听完后就知道了，说明剩余的1、4、5、6月份中不能有出现2次的日子，否则妹妹得不出结论，那么 1月20日和4月20日、1月9日和5月9日、4月18日和6月18日、4月19日和5月19日被排除，还剩下1月31日、5月29日、6月15日、6月21日。</li><li>哥哥听完妹妹的话也知道了，说明哥哥所知道的那个月份中，已经只有一个日子了。那么6月15日和6月21日排除。</li><li>1989年的2月没有29日，如果妹妹知道的日期是29的话，在最开始就能得出答案，排除。所以答案是1月31日。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gson解析成list、map</title>
      <link href="/2017/09/19/20170919%20Gson%E8%A7%A3%E6%9E%90%E6%88%90list%E3%80%81map/"/>
      <url>/2017/09/19/20170919%20Gson%E8%A7%A3%E6%9E%90%E6%88%90list%E3%80%81map/</url>
      
        <content type="html"><![CDATA[<p>新建一个type传入即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Type type &#x3D; new TypeToken&lt;HashMap&lt;String, Integer&gt;&gt;() &#123;&#125;.getType();</span><br><span class="line">   HashMap&lt;String,Integer&gt; map   &#x3D; new Gson().fromJson(json, type);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Gson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义背景透明度的全屏dialog</title>
      <link href="/2017/08/30/20170830%20%E8%87%AA%E5%AE%9A%E4%B9%89%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E5%BA%A6%E7%9A%84%E5%85%A8%E5%B1%8Fdialog/"/>
      <url>/2017/08/30/20170830%20%E8%87%AA%E5%AE%9A%E4%B9%89%E8%83%8C%E6%99%AF%E9%80%8F%E6%98%8E%E5%BA%A6%E7%9A%84%E5%85%A8%E5%B1%8Fdialog/</url>
      
        <content type="html"><![CDATA[<p>1、在<code>styles.xml</code>里加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name&#x3D;&quot;dialog_fullscreen&quot; parent&#x3D;&quot;@android:style&#x2F;Theme.Translucent.NoTitleBar&quot;&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:windowTranslucentStatus&quot;&gt;true&lt;&#x2F;item&gt;</span><br><span class="line">        &lt;!--自定义透明度--&gt;</span><br><span class="line">        &lt;item name&#x3D;&quot;android:windowBackground&quot;&gt;@color&#x2F;black_30&lt;&#x2F;item&gt;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>2、建一个DialogFragment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class BaseDialogFragment extends DialogFragment &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setStyle(DialogFragment.STYLE_NO_TITLE, R.style.dialog_fullscreen);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">@Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    &#x2F;&#x2F;自定义布局</span><br><span class="line">       return  inflater.inflate(R.layout.dialog_share, null);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> Dialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据文字长度更改TabLayout指示条宽度</title>
      <link href="/2017/08/28/20170828%20%E6%A0%B9%E6%8D%AE%E6%96%87%E5%AD%97%E9%95%BF%E5%BA%A6%E6%9B%B4%E6%94%B9TabLayout%E6%8C%87%E7%A4%BA%E6%9D%A1%E5%AE%BD%E5%BA%A6/"/>
      <url>/2017/08/28/20170828%20%E6%A0%B9%E6%8D%AE%E6%96%87%E5%AD%97%E9%95%BF%E5%BA%A6%E6%9B%B4%E6%94%B9TabLayout%E6%8C%87%E7%A4%BA%E6%9D%A1%E5%AE%BD%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>经常安卓开发要用苹果风格的东西，比如dialog</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-dfdb942a05052da6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dialog.png"></p><p>直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDialog</span> <span class="keyword">extends</span> <span class="title">AlertDialog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String left;</span><br><span class="line">    <span class="keyword">private</span> String right;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleDialog</span><span class="params">(@NonNull Context context,String title,String left,String right, View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.dialog_simple);</span><br><span class="line"><span class="comment">//这里是设置宽度，不设置的话是有一个margin值的match_parent效果。</span></span><br><span class="line">        Window window = getWindow();</span><br><span class="line">        WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">        lp.width = SizeUtils.dp2px(<span class="number">250F</span>);</span><br><span class="line">        window.setAttributes(lp);</span><br><span class="line"><span class="comment">//如果你是圆角之类的话，这句设置背景透明要加上。</span></span><br><span class="line"><span class="comment">//否则有个白底在那儿，你的dialog也是白色的话是看不到圆角的</span></span><br><span class="line">        window.setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line"><span class="comment">//dialog是可以直接findViewById的，拿到控件后设置文字、点击</span></span><br><span class="line">        TextView tvTitle = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">        TextView tvLeft = (TextView) findViewById(R.id.tv_left);</span><br><span class="line">        TextView tvRight = (TextView) findViewById(R.id.tv_right);</span><br><span class="line">        tvTitle.setText(title);</span><br><span class="line">        tvLeft.setText(left);</span><br><span class="line">        tvRight.setText(right);</span><br><span class="line">        tvLeft.setOnClickListener(listener);</span><br><span class="line">        tvRight.setOnClickListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dialog的布局文件中，宽度最好用match_parent和weight=1，高度可以写固定值。然后在window里设置具体宽度，高度不设置。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> tablayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义dialog设置大小、设置背景圆角无效等一些坑</title>
      <link href="/2017/07/20/20170720%20%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E8%AE%BE%E7%BD%AE%E5%A4%A7%E5%B0%8F%E3%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9C%86%E8%A7%92%E6%97%A0%E6%95%88%E7%AD%89%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2017/07/20/20170720%20%E8%87%AA%E5%AE%9A%E4%B9%89dialog%E8%AE%BE%E7%BD%AE%E5%A4%A7%E5%B0%8F%E3%80%81%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E5%9C%86%E8%A7%92%E6%97%A0%E6%95%88%E7%AD%89%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>经常安卓开发要用苹果风格的东西，比如dialog</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-dfdb942a05052da6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="dialog.png"></p><p>直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDialog</span> <span class="keyword">extends</span> <span class="title">AlertDialog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String left;</span><br><span class="line">    <span class="keyword">private</span> String right;</span><br><span class="line">    <span class="keyword">private</span> View.OnClickListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleDialog</span><span class="params">(@NonNull Context context,String title,String left,String right, View.OnClickListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.dialog_simple);</span><br><span class="line"><span class="comment">//这里是设置宽度，不设置的话是有一个margin值的match_parent效果。</span></span><br><span class="line">        Window window = getWindow();</span><br><span class="line">        WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">        lp.width = SizeUtils.dp2px(<span class="number">250F</span>);</span><br><span class="line">        window.setAttributes(lp);</span><br><span class="line"><span class="comment">//如果你是圆角之类的话，这句设置背景透明要加上。</span></span><br><span class="line"><span class="comment">//否则有个白底在那儿，你的dialog也是白色的话是看不到圆角的</span></span><br><span class="line">        window.setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line"><span class="comment">//dialog是可以直接findViewById的，拿到控件后设置文字、点击</span></span><br><span class="line">        TextView tvTitle = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">        TextView tvLeft = (TextView) findViewById(R.id.tv_left);</span><br><span class="line">        TextView tvRight = (TextView) findViewById(R.id.tv_right);</span><br><span class="line">        tvTitle.setText(title);</span><br><span class="line">        tvLeft.setText(left);</span><br><span class="line">        tvRight.setText(right);</span><br><span class="line">        tvLeft.setOnClickListener(listener);</span><br><span class="line">        tvRight.setOnClickListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在dialog的布局文件中，宽度最好用match_parent和weight=1，高度可以写固定值。然后在window里设置具体宽度，高度不设置。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gravity=center_vertical与centerVertcal=true的区别</title>
      <link href="/2017/07/18/20170718%20gravity=center_vertical%E4%B8%8EcenterVertcal=true%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/07/18/20170718%20gravity=center_vertical%E4%B8%8EcenterVertcal=true%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>这特么是一个坑。<br>一个ImageView放在RelativeLayout中，给RelativeLayout设置<code>android:gravity=&quot;center_vertical</code>发现并没有垂直居中，歪了一点点。而直接给ImageView设置<code>android:layout_centerVertical=&quot;true&quot;</code>就正好。</p><p>用ImageView的getTop()和getBottom()探索过程不提了，直接说结果：<br>首先我ImageView的资源文件高度为28px；<br>当没有设置drawable-hdpi，图片资源只放在了drawable-xhdpi里，而设备是240dpi的时候，hdpi里找不到，就去xhdpi里找了，找到后显示在屏幕上会缩放0.75倍，变成21px；区别就在这儿了。</p><p>比如RelativeLayout的高度是80px；<br><code>android:layout_centerVertical=&quot;true&quot;</code>是设置给ImageView的，会测量好ImageView的实际高度得到21px，然后垂直居中就是距离顶部（80-21）/2=29。</p><p>而<code>android:gravity=&quot;center_vertical</code>是设置给RelativeLayout的，他还是按照源资源大小给你计算（80-28）/2 = 26；距离父控件的距离是26px。</p><p>就是这3个像素让我看出来“歪了”。</p><p>解决办法有2个：<br>1、现在mdpi的设备不多了。。但hdpi还是有一些的，该为他们弄一套图还是专门弄一套图吧。<br>2、LinearLayout的<code>android:gravity=&quot;center_vertical</code>是准的，RelativeLayout既然不准，那就还是用<code>android:layout_centerVertical=&quot;true&quot;</code>靠谱。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给软键盘加上一个插件布局</title>
      <link href="/2017/07/14/20170714%20%E7%BB%99%E8%BD%AF%E9%94%AE%E7%9B%98%E5%8A%A0%E4%B8%8A%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E5%B8%83%E5%B1%80/"/>
      <url>/2017/07/14/20170714%20%E7%BB%99%E8%BD%AF%E9%94%AE%E7%9B%98%E5%8A%A0%E4%B8%8A%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><p>放一个布局在页面底部，隐藏起来。当输入法弹起来的时候，检测到布局的变化，设置插件布局的显示即可</p><ol><li>在<code>AndroidManifest.xml</code>里相应的Activity里加上<code>android:windowSoftInputMode=&quot;stateHidden|adjustResize&quot;</code><br>至于为什么是adjustResize而不是adjustSpan，看图</li></ol><p><strong>平时</strong>是这样<br><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-6745e66bf1252962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="normal.png"><br><strong>adjustResize</strong>是这样</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-7880dd1b1f584dcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="adjustResize.png"><br><strong>adjustPan</strong>是这样</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-f1b830c98d06aaf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="adjustPan.png"></p><p>区别：<br>EditText本来在背景的L处<br>adjustResize会把EditText顶到G处<br>adjustPan，EditText还是在L处，输入法把所有布局都顶起来了。<br>当然这俩还有一些别的区别，这不是本文讨论的重点。</p><hr><p>上代码<br>布局：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"XXXXXXXXXXXX"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/holo_green_light"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"bbbbbbbbbbbbbbbbbbbbbb"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">"invisible"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"A\nB\nC\nD\nE\nD\nF\nG\nH\nI\nJ\nK\nL\nM\nN"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"60sp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView mTv;</span><br><span class="line">    <span class="keyword">private</span> EditText mEt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTv = (TextView) findViewById(R.id.tv);</span><br><span class="line">        mEt = (EditText) findViewById(R.id.et);</span><br><span class="line">        getWindow().getDecorView().getViewTreeObserver()</span><br><span class="line">          .addOnGlobalLayoutListener(mLayoutChangeListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ViewTreeObserver.OnGlobalLayoutListener mLayoutChangeListener = <span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//判断窗口可见区域大小</span></span><br><span class="line">            Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line">            <span class="comment">// getWindowVisibleDisplayFrame()会返回窗口的可见区域高度</span></span><br><span class="line">            getWindow().getDecorView().getWindowVisibleDisplayFrame(r);</span><br><span class="line">            <span class="keyword">int</span> mScreenHeight = ScreenUtils.getScreenHeight();</span><br><span class="line">            <span class="comment">//如果屏幕高度和Window可见区域高度差值大于整个屏幕高度的1/3</span></span><br><span class="line">            <span class="comment">// 则表示软键盘显示中，否则软键盘为隐藏状态。</span></span><br><span class="line">            <span class="keyword">int</span> heightDifference = mScreenHeight - (r.bottom - r.top);</span><br><span class="line">            <span class="keyword">boolean</span> isKeyboardShowing = heightDifference &gt; mScreenHeight / <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(isKeyboardShowing)&#123;</span><br><span class="line">                          mTv.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                          mTv.setVisibility(View.INVISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>为复用方便，拎了一个工具类出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyBoardPluginUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这是全局的，用addOnGlobalLayoutListener，只要输入法弹起来就会触发</span></span><br><span class="line"><span class="comment">     * 清单里配置android:windowSoftInputMode="stateHidden|adjustResize"</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addKeyBoardPluginGlobal</span><span class="params">(Activity activity,LinearLayout llPlugin)</span> </span>&#123;</span><br><span class="line">        activity.getWindow().getDecorView().getViewTreeObserver()</span><br><span class="line">                .addOnGlobalLayoutListener(<span class="keyword">new</span> GlobalLayoutListener(activity,llPlugin));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定某个EditText会触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addKeyBoardPlugin</span><span class="params">(EditText et, <span class="keyword">final</span> LinearLayout llPlugin)</span> </span>&#123;</span><br><span class="line">        et.setOnFocusChangeListener(<span class="keyword">new</span> View.OnFocusChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(View v, <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (hasFocus) &#123;</span><br><span class="line">                    llPlugin.setVisibility(View.VISIBLE);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    llPlugin.setVisibility(View.INVISIBLE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalLayoutListener</span> <span class="keyword">implements</span> <span class="title">ViewTreeObserver</span>.<span class="title">OnGlobalLayoutListener</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Activity mActivity;</span><br><span class="line">        <span class="keyword">private</span> LinearLayout mLlPlugin;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">GlobalLayoutListener</span><span class="params">(Activity activity, LinearLayout llPlugin)</span> </span>&#123;</span><br><span class="line">            mActivity = activity;</span><br><span class="line">            mLlPlugin = llPlugin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//判断窗口可见区域大小</span></span><br><span class="line">            Rect r = <span class="keyword">new</span> Rect();</span><br><span class="line">            <span class="comment">// getWindowVisibleDisplayFrame()会返回窗口的可见区域高度</span></span><br><span class="line">            mActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(r);</span><br><span class="line">            <span class="keyword">int</span> mScreenHeight = ScreenUtils.getScreenHeight();</span><br><span class="line">            <span class="comment">//如果屏幕高度和Window可见区域高度差值大于整个屏幕高度的1/3</span></span><br><span class="line">            <span class="comment">// 则表示软键盘显示中，否则软键盘为隐藏状态。</span></span><br><span class="line">            <span class="keyword">int</span> heightDifference = mScreenHeight - (r.bottom - r.top);</span><br><span class="line">            <span class="keyword">boolean</span> isKeyboardShowing = heightDifference &gt; mScreenHeight / <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(isKeyboardShowing)&#123;</span><br><span class="line">                mLlPlugin.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mLlPlugin.setVisibility(View.INVISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打开相册失败no activity found</title>
      <link href="/2017/07/05/20170705%20%E6%89%93%E5%BC%80%E7%9B%B8%E5%86%8C%E5%A4%B1%E8%B4%A5no%20activity%20found/"/>
      <url>/2017/07/05/20170705%20%E6%89%93%E5%BC%80%E7%9B%B8%E5%86%8C%E5%A4%B1%E8%B4%A5no%20activity%20found/</url>
      
        <content type="html"><![CDATA[<ul><li><p>今天看到crash列表里出现了<code>ActivityNotFoundException</code>，信息就是标题上的那些，定位之后发现是从相册选择图片处隐式启动相册找不到Activity，可能是用户的设备上没有相册应用（黑人问号）。</p></li><li><p>之前的处理方式是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK,</span><br><span class="line">android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line">startActivityForResult(intent, RC_ALBUM);</span><br></pre></td></tr></table></figure><p>在<code>onActivityResult</code>里面是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">else if (requestCode &#x3D;&#x3D; RC_ALBUM &amp;&amp; resultCode &#x3D;&#x3D; RESULT_OK &amp;&amp; data !&#x3D; null) &#123;</span><br><span class="line">  Uri selectedImage &#x3D; data.getData();</span><br><span class="line">  if (selectedImage !&#x3D; null) &#123;</span><br><span class="line">    String[] filePathColumn &#x3D; &#123;MediaStore.Images.Media.DATA&#125;;</span><br><span class="line">    &#x2F;&#x2F; 获取选择照片的数据视图</span><br><span class="line">    Cursor cursor &#x3D; getContentResolver()</span><br><span class="line">    .query(selectedImage,filePathColumn, null, null, null);</span><br><span class="line">    cursor.moveToFirst();</span><br><span class="line">    &#x2F;&#x2F; 从数据视图中获取已选择图片的路径</span><br><span class="line">    int columnIndex &#x3D; cursor.getColumnIndex(filePathColumn[0]);</span><br><span class="line">    String picturePath &#x3D; cursor.getString(columnIndex);</span><br><span class="line">    cursor.close();</span><br><span class="line">    &#x2F;&#x2F; 将图片显示到界面上</span><br><span class="line">    Bitmap bm &#x3D; BitmapFactory.decodeFile(picturePath);</span><br><span class="line"></span><br><span class="line">    findViewById(R.id.rl_table).setBackground(new BitmapDrawable(bm));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>解决办法有三种，自行选择：<br>1、简单粗暴的方法就是判断下隐式intent有没有匹配的Activity，有再去启动，没有就给他Toast什么的吧</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK,</span><br><span class="line">android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line">List&lt;ResolveInfo&gt; resolveInfos = getPackageManager()</span><br><span class="line">  .queryIntentActivities(</span><br><span class="line">    intent,PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">if</span>(resolveInfos.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">    startActivityForResult(intent, RC_ALBUM);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、打开内容管理器，也就是“文档”，设置查找的type为image，这玩意一般设备都有的，不过还是判断一下吧，现在看到隐式启动心里都虚的，你根本不知道你的用户是什么奇奇怪怪的设备。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">intent.setAction(Intent.ACTION_GET_CONTENT);</span><br><span class="line">startActivityForResult(Intent.createChooser(intent, <span class="string">"Select Picture"</span>), RC_ALBUM);</span><br><span class="line">List&lt;ResolveInfo&gt; resolveInfos = </span><br><span class="line">        getPackageManager()</span><br><span class="line">        .queryIntentActivities(intent</span><br><span class="line">        ,PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">if</span>(resolveInfos.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">    startActivityForResult(intent, RC_ALBUM);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、让用户选择用文档还是相册来打开</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Intent getIntent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">getIntent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">Intent pickIntent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line">pickIntent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">Intent chooserIntent = Intent.createChooser(getIntent, <span class="string">"Select Image"</span>);</span><br><span class="line">chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, <span class="keyword">new</span> Intent[] &#123;pickIntent&#125;);</span><br><span class="line"> startActivityForResult(chooserIntent, RC_ALBUM);</span><br></pre></td></tr></table></figure><ul><li>最后需要注意的是如果使用<code>ACTION_GET_CONTENT</code>方式打开的话，在onActivityResult中获取文件的方式和用 <code>ACTION_PICK</code>是不一样的，而且在安卓4.4之前和之后也是不一样的，请注意。<br>有个台湾友人做了个工具类，可以看看他的<a href="https://magiclen.org/android-filechooser/" target="_blank" rel="noopener">blog</a></li></ul><hr><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlertDialog不显示文字</title>
      <link href="/2017/06/27/20170627%20AlertDialog%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%96%87%E5%AD%97/"/>
      <url>/2017/06/27/20170627%20AlertDialog%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在自己小米5S安卓6.0上测试，发现弹框只有按钮没有文字，title和message都不显示，但是位置还是预留了的，很奇怪。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    builder = <span class="keyword">new</span> AlertDialog.Builder(mContext,R.style.Theme_AppCompat_Light_Dialog_Alert);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    builder = <span class="keyword">new</span> AlertDialog.Builder(mContext);</span><br><span class="line">&#125;</span><br><span class="line">mDialog= builder.setTitle(<span class="string">"需要开启一些权限"</span>)</span><br><span class="line">        .setMessage(<span class="string">"因为加入了语音识别，所以需要获取一些手机状态、定位信息等权限，麻烦您通过一下"</span>)</span><br><span class="line">        .setPositiveButton(getString(R.string.confirm),<span class="keyword">this</span> )</span><br><span class="line">        .setNegativeButton(getString(R.string.cancel),<span class="keyword">this</span>)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure><p>5.0以上设置一个主题就行了.</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
            <tag> Dialog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retrofit处理https请求</title>
      <link href="/2017/06/05/20170605%20Retrofit%E5%A4%84%E7%90%86https%E8%AF%B7%E6%B1%82/"/>
      <url>/2017/06/05/20170605%20Retrofit%E5%A4%84%E7%90%86https%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一些通过CA认证的，https是可以直接访问的，但一些自签名证书，用retrofit直接访问则会走到onFailure里,错误信息是无法通过证书验证。</p><p><code>onFailure: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</code><br>比如下面这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String baseUrl = <span class="string">"https://kyfw.12306.cn/"</span>;</span><br><span class="line">OkHttpClient.Builder clientBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(baseUrl).client(clientBuilder.build()).build();</span><br><span class="line">HttpsInterf httpsInterf = retrofit.create(HttpsInterf<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Call&lt;ResponseBody&gt; responseBodyCall = httpsInterf.get();</span><br><span class="line">responseBodyCall.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"ZFDT"</span>, <span class="string">"onResponse: "</span> + response.body().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"ZFDT"</span>, <span class="string">"onFailure: "</span> + t.getLocalizedMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li>首先把证书放到assets下面。如果你是chrome浏览器的话，请按CTRL+SHIFT+I打开开发者工具，点击Security-&gt;View certificate-&gt;详细信息-&gt;复制到文件</li></ol><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-b099c96bbb5e6b52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>增加下面的方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * 通过okhttpClient来设置证书</span><br><span class="line">  * @param clientBuilder OKhttpClient.builder</span><br><span class="line">  * @param certificates 读取证书的InputStream</span><br><span class="line">  *&#x2F;</span><br><span class="line">    public void setCertificates(OkHttpClient.Builder clientBuilder, InputStream... certificates) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            CertificateFactory certificateFactory &#x3D; CertificateFactory.getInstance(&quot;X.509&quot;);</span><br><span class="line">            KeyStore keyStore &#x3D; KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">            keyStore.load(null);</span><br><span class="line">            int index &#x3D; 0;</span><br><span class="line">            for (InputStream certificate : certificates) &#123;</span><br><span class="line">                String certificateAlias &#x3D; Integer.toString(index++);</span><br><span class="line">                keyStore.setCertificateEntry(certificateAlias, certificateFactory</span><br><span class="line">                        .generateCertificate(certificate));</span><br><span class="line">                try &#123;</span><br><span class="line">                    if (certificate !&#x3D; null)</span><br><span class="line">                        certificate.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            TrustManagerFactory trustManagerFactory &#x3D; TrustManagerFactory.getInstance(</span><br><span class="line">                    TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            trustManagerFactory.init(keyStore);</span><br><span class="line">            TrustManager[] trustManagers &#x3D; trustManagerFactory.getTrustManagers();</span><br><span class="line">            if (trustManagers.length !&#x3D; 1 || !(trustManagers[0] instanceof X509TrustManager)) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;Unexpected default trust managers:&quot;</span><br><span class="line">                        + Arrays.toString(trustManagers));</span><br><span class="line">            &#125;</span><br><span class="line">            X509TrustManager trustManager &#x3D; (X509TrustManager) trustManagers[0];</span><br><span class="line">            SSLContext sslContext &#x3D; SSLContext.getInstance(&quot;TLS&quot;);</span><br><span class="line">            sslContext.init(null, trustManagerFactory.getTrustManagers(), new SecureRandom());</span><br><span class="line">            SSLSocketFactory sslSocketFactory &#x3D; sslContext.getSocketFactory();</span><br><span class="line">            clientBuilder.sslSocketFactory(sslSocketFactory, trustManager);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在建立retrofit实例前，调用上面的方法即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">String baseUrl = <span class="string">"https://kyfw.12306.cn/"</span>;</span><br><span class="line">      OkHttpClient.Builder clientBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          setCertificates(clientBuilder,getAssets().open(<span class="string">"https12306.cer"</span>));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(baseUrl).client(clientBuilder.build()).build();</span><br><span class="line">      HttpsInterf httpsInterf = retrofit.create(HttpsInterf<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      Call&lt;ResponseBody&gt; responseBodyCall = httpsInterf.get();</span><br><span class="line">      responseBodyCall.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line">              Log.d(<span class="string">"ZFDT"</span>, <span class="string">"onResponse: "</span> + response.body().toString());</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">              Log.d(<span class="string">"ZFDT"</span>, <span class="string">"onFailure: "</span> + t.getLocalizedMessage());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> refrofit </tag>
            
            <tag> https </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo搭建博客</title>
      <link href="/2017/05/19/20170519%20%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/05/19/20170519%20%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>之前在公司搭过，家里电脑一直没写过东西，就重新弄了下，留个步骤在这里，备查。</p><ol><li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载nodejs</a>,并安装。</p></li><li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">下载git</a>,并安装。  </p></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>3bc004a (init local)<br>OK，开始安装hexo，<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官网</a>。</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>依次安装，完成后，会出现一些文件夹，可以在config.yml里进行一些设置，具体自己去官网看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>source就是资源，文章都是放在_posts下面的，themes是放主题的。<br><code>$ hexo init [folder]</code> 新建一个网站<br><code>$ hexo g</code> 就可以生成网页文件了<br><code>$ hexo s</code> 启动服务器，默认为 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>有的时候4000端口被占了，那么就<code>$ hexo s -p 3600</code>换个端口<br>如果发现无法启动，或者启动后无法访问，那么请安装服务<br><code>$ npm install hexo-server --save</code></p><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>3bc004a (init local)<br>网站建立了，那么要上传啊，上传到github上，申请账号建立仓库什么的，这里不多说了。在config.yml里配置上你的地址</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;Ayanokouji-Kenn&#x2F;ayanokouji-kenn.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>记得安装上传组件<br><code>$ npm install hexo-server --save</code></p><hr><p>应该差不多都搞定了，以后写文章就直接在source-posts下面新建文件，<br>写好了之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>就可以了。<br>对了，多提一嘴，为了让多台机器都可以写博客，可以把source，themes，_config.yml这几个文件也保留起来，我是直接在github的博客仓库上新建了个branch用来存放这3个东西的，你们随意。</p>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在杀死进程后，如何收到广播呢？</title>
      <link href="/2017/04/01/20170401%20%E5%9C%A8%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E6%94%B6%E5%88%B0%E5%B9%BF%E6%92%AD%E5%91%A2%EF%BC%9F/"/>
      <url>/2017/04/01/20170401%20%E5%9C%A8%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%E5%90%8E%EF%BC%8C%E5%A6%82%E4%BD%95%E6%94%B6%E5%88%B0%E5%B9%BF%E6%92%AD%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<ul><li>先说结论：<br>3.1之前，可以。<br>3.1之后，系统广播不可以。自定义广播可以。</li><li>原因：<br>在3.1之后，系统的package manager增加了对处于“stopped state”应用的管理，<br>所谓“stopped state”就是说该app<strong>从未运行过</strong> 或 <strong>运行过但是现在停止运行了</strong><br>同时系统增加了2个Flag：<br>FLAG_INCLUDE_STOPPED_PACKAGES<br>FLAG_EXCLUDE_STOPPED_PACKAGES<br>google在3.1之后给所有的广播都默认加上了FLAG_EXCLUDE_STOPPED_PACKAGES，所以在进程没了的情况下，是收不到广播的。</li></ul><p>但是自定义广播的话，我们可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent brIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">brIntent.setAction(<span class="string">"uu"</span>);</span><br><span class="line">brIntent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);</span><br><span class="line">sendBroadcast(brIntent);</span><br></pre></td></tr></table></figure><p>这样手动添加一个flag，就可以了。<br>所谓葫芦娃保活措施就可以这么搞起来</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ScrollView嵌套Recyclerview</title>
      <link href="/2017/01/19/20170119%20ScrollView%E5%B5%8C%E5%A5%97Recyclerview/"/>
      <url>/2017/01/19/20170119%20ScrollView%E5%B5%8C%E5%A5%97Recyclerview/</url>
      
        <content type="html"><![CDATA[<ul><li><p>老问题了，以前用一些别的方式解决了比如linearlayout，比如listview的type，比如footview之类的</p><p>但这次的需求不太一样</p><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2017/01/19/588063134fec6.png" alt=""></p><p>​</p><p>上面是一个recyclerview全部显示，滑到底了，下面一个“今日推荐”，再下面一个资讯类的recyclerview有分页功能，滑到底了加载下一页。</p></li><li><p>思路就是让recyclerview不能滑动，滑动交给外层的scrollview，将recyclerview替换成下面这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoScrollRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoScrollRecyclerView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoScrollRecyclerView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoScrollRecyclerView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> IheightSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthSpec, IheightSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至少数据就都能显示了</p><p>然后会发现，自带的惯性滑动没有了，阻尼也有点别扭，那么把scrollview也给换了吧，加上惯性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScrollView</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> downX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> downY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchSlop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        mTouchSlop = ViewConfiguration.get(context).getScaledTouchSlop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = e.getAction();</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                downX = (<span class="keyword">int</span>) e.getRawX();</span><br><span class="line">                downY = (<span class="keyword">int</span>) e.getRawY();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">int</span> moveY = (<span class="keyword">int</span>) e.getRawY();</span><br><span class="line">                <span class="keyword">if</span> (Math.abs(moveY - downY) &gt; mTouchSlop) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：其实还有一些别的问题，我的recyclerview用的是hongyang的那baseAdapt，他好久没维护了，有不少问题。。不过与标题无关，这篇文章暂且按下不表。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImagView播放动画的几种方式</title>
      <link href="/2017/01/19/20170119%20ImagView%E6%92%AD%E6%94%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/01/19/20170119%20ImagView%E6%92%AD%E6%94%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ul><li><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2017/01/19/58805c8dd0d06.gif" alt=""></p><p>比如这个，总共77帧。下面对比三种方案</p><ul><li><p>方案一：</p><p>像这样把每一帧图片放进animation-list</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/shenlie76"</span> <span class="attr">android:duration</span>=<span class="string">"83"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/shenlie77"</span> <span class="attr">android:duration</span>=<span class="string">"83"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/shenlie01"</span> <span class="attr">android:duration</span>=<span class="string">"83"</span>/&gt;</span></span><br><span class="line">  .....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mIv.setImageResource(R.drawable.animation);</span><br><span class="line">Animatable drawable &#x3D; (Animatable) mIv.getDrawable();</span><br><span class="line">drawable.start();</span><br></pre></td></tr></table></figure><p>当然是可行的，效果嘛。。看看内存吧</p><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2017/01/19/58805dbd51ef3.png" alt=""></p><p>一开始动画，内存占用从原来的18M飚到180M，太可怕了。我们知道初始一般会分配给一个app 十几M的内存，最多能拿200M左右，超过就OOM了，方案一唾弃之。</p></li><li><p>方案二</p><p>读取资源，使用bitmap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CountDownTimer countDownTimer = <span class="keyword">new</span> CountDownTimer(<span class="number">300000</span>, <span class="number">83</span>)&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">(<span class="keyword">long</span> millisUntilFinished)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(count==imgRes.length) count = <span class="number">0</span>; <span class="comment">//播放到最后一帧从头播放</span></span><br><span class="line">         Bitmap bitmap = BitmapFactory.decodeResource(getResources(), imgRes[count++]);</span><br><span class="line">         bitmapCache.add(<span class="keyword">new</span> SoftReference&lt;&gt;(bitmap));</span><br><span class="line">         mIv.setImageBitmap(bitmap);  </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">countDownTimer.start();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2017/01/19/58805f7dc8fc9.png" alt=""></p><p>还行，才占用21M，没播放时占18M，也就占了3M，一帧的bitmap对象占了3M，用完就释放掉了，不过这个锯齿也是不怎么爽的。</p></li><li><p>方案三</p><p>重用bitmap内存，避免gc频繁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">options.inMutable=<span class="keyword">true</span>;</span><br><span class="line">CountDownTimer countDownTimer = <span class="keyword">new</span> CountDownTimer(<span class="number">300000</span>, <span class="number">83</span>)&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTick</span><span class="params">(<span class="keyword">long</span> millisUntilFinished)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(count==imgRes.length) count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (!bitmapCache.isEmpty()) &#123;</span><br><span class="line">          Iterator&lt;SoftReference&lt;Bitmap&gt;&gt; iterator = bitmapCache.iterator();</span><br><span class="line">          <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">               Bitmap bitmapSoftReference = iterator.next().get();</span><br><span class="line">               Bitmap bitmap =  BitmapFactory.decodeResource(getResources(),imgRes[count++],options);</span><br><span class="line">               options.inBitmap = bitmapSoftReference;</span><br><span class="line">               mIv.setImageBitmap(bitmap);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           Bitmap bitmap = BitmapFactory.decodeResource(getResources(), imgRes[count++], options);</span><br><span class="line">           bitmapCache.add(<span class="keyword">new</span> SoftReference&lt;&gt;(bitmap));</span><br><span class="line">           mIv.setImageBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">countDownTimer.start();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2017/01/19/588060d9b8b91.png" alt=""></p><p>完美。</p><p>​</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rxjava的interval操作符</title>
      <link href="/2016/12/13/20161213%20Rxjava%E7%9A%84interval%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/2016/12/13/20161213%20Rxjava%E7%9A%84interval%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<ul><li>有个需求重复发送，当然用timer、handler都行啦，不过要优雅还是得用rxjava啊</li></ul><p>小demo，一个progressDialog进度条递增，涨到100，进度条消失，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProgressDialog pd;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">            pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class="line">            pd.setTitle(<span class="string">"download new version"</span>);</span><br><span class="line">            pd.setProgress(<span class="number">0</span>);</span><br><span class="line">            pd.setCanceledOnTouchOutside(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        pd.show();</span><br><span class="line">      <span class="comment">//每100ms发送一次，进度递增为1，max不设置的话默认是100</span></span><br><span class="line">        Observable.interval(<span class="number">100</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                  .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            pd.setProgress(<span class="number">0</span>);</span><br><span class="line">                            pd.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                        pd.setProgress(pd.getProgress() + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>爽不爽！ 爽的根本停不下来！没错停不下来了。。。</p><p>所以要用到take操作符，这里需求是让进度条到达max就停止发送，所以用的是takeUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProgressDialog pd;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            pd = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">            pd.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class="line">            pd.setTitle(<span class="string">"download new version"</span>);</span><br><span class="line">            pd.setProgress(<span class="number">0</span>);</span><br><span class="line">            pd.setCanceledOnTouchOutside(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        pd.show();</span><br><span class="line">        Observable.interval(<span class="number">100</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                .takeUntil(<span class="keyword">new</span> Func1&lt;Long, Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                      <span class="comment">//当进度条与max相同就停止发送</span></span><br><span class="line">                        <span class="keyword">return</span> pd.getProgress() == pd.getMax();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      <span class="comment">//结束的时候将进度条清0，并且消失</span></span><br><span class="line">                        pd.setProgress(<span class="number">0</span>);</span><br><span class="line">                        pd.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                        pd.setProgress(pd.getProgress() + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态更改桌面app图标</title>
      <link href="/2016/12/13/20161227%20%E5%8A%A8%E6%80%81%E6%9B%B4%E6%94%B9%E6%A1%8C%E9%9D%A2app%E5%9B%BE%E6%A0%87/"/>
      <url>/2016/12/13/20161227%20%E5%8A%A8%E6%80%81%E6%9B%B4%E6%94%B9%E6%A1%8C%E9%9D%A2app%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<ul><li><p>清单中<application>里的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".maoyu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/maoyu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"maoyu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".uu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/uu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"uu"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将原先的activity标签下的<code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</code>删掉</p><p>添加`<activity-alias>标签</p><blockquote><p>android:name=”.uu”   随便起的名字</p><p>android:enabled=”true”   true表示默认就使用这个，桌面图标就是这个，应用名就是上面那个name</p><p>android:icon=”@mipmap/uu”     下面两个不用解释了</p><p>android:targetActivity=”.MainActivity”&gt;</p></blockquote><p>上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">switchIcon</span><span class="params">(<span class="keyword">boolean</span> isUU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//要跟manifest的activity-alias 的name保持一致  </span></span><br><span class="line">            String maoyu = <span class="string">"com.aidebar.demo.maoyu"</span>;</span><br><span class="line">            String uu = <span class="string">"com.aidebar.demo.uu"</span>;</span><br><span class="line"></span><br><span class="line">            PackageManager pm = getPackageManager();</span><br><span class="line">            ComponentName uuComponentName = <span class="keyword">new</span> ComponentName(getApplicationContext(), uu);</span><br><span class="line">            <span class="keyword">int</span> uuState = isUU ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED</span><br><span class="line">                    : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</span><br><span class="line">            <span class="comment">//如果是UU，那么设置成enabled</span></span><br><span class="line">            <span class="keyword">if</span> (pm.getComponentEnabledSetting(uuComponentName) != uuState) &#123;</span><br><span class="line">                pm.setComponentEnabledSetting(uuComponentName, uuState,  PackageManager.DONT_KILL_APP);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ComponentName maoyuComponentName = <span class="keyword">new</span> ComponentName(getApplicationContext(), maoyu);</span><br><span class="line">            <span class="comment">//如果是UU，其他的都要设为disabled</span></span><br><span class="line">            <span class="keyword">int</span> maoyuState = !isUU ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED</span><br><span class="line">                    : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</span><br><span class="line">            <span class="keyword">if</span> (pm.getComponentEnabledSetting(maoyuComponentName) != maoyuState) &#123;<span class="comment">//新状态跟当前状态不一样才执行  </span></span><br><span class="line">                pm.setComponentEnabledSetting(maoyuComponentName, maoyuState, PackageManager.DONT_KILL_APP);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在每次打开的时候判断下日期，如果是双十二啦，圣诞啦，就可以调用这方法，来改变应用图标啦，但是要注意试了几个测试机，都要十来秒才会有变化，在这十秒内点击桌面图标会出现该应用未正确安装的提示</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.0动态之后获取权限</title>
      <link href="/2016/12/08/20161208%206.0%E4%B9%8B%E5%90%8E%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
      <url>/2016/12/08/20161208%206.0%E4%B9%8B%E5%90%8E%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在各类流氓肆虐的安卓生态环境中，6.0之前是只要一安装app就能获取到所有需要的权限了。</p><p>6.0之后，谷歌将权限分成了两种，一种普通权限，跟以前一样，<code>AndroidManifest.xml</code>中声明了就可以用了</p><p>另一种是危险权限，在你的项目compileSdkVersion和targetSdkVersion均&gt;=23的时候，这一类权限不仅需要在清单中声明，而且要在使用的时候向用户申请才行。如果还像6.0之前那样只是声明一下的话，分分钟崩给你看T.T~</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException</span><br><span class="line">getDeviceId: Neither user <span class="number">10204</span> nor current process has android.permission.READ_PHONE_STATE...</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> java.lang.RuntimeException:Unable to start activity ComponentInfo&#123;com.aidebar.d8alarmclock/com.aidebar.d8alarmclock.activity.MainActivity&#125;: java.lang.SecurityException: getDeviceId: Neither user <span class="number">10204</span> nor current process has android.permission.READ_PHONE_STATE.</span><br><span class="line"><span class="number">2</span> android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">3254</span>)</span><br><span class="line"><span class="number">3</span> ......</span><br></pre></td></tr></table></figure><blockquote><p>我自己测试的时候，MIUI不会崩。。清单中配置了就直接获取了权限，导致我没有第一时间发现这个bug···</p></blockquote><table><thead><tr><th align="center">权限组</th><th align="center">权限</th></tr></thead><tbody><tr><td align="center">CALENDAR</td><td align="center"><code>READ_CALENDAR</code>      <code>WRITE_CALENDAR</code></td></tr><tr><td align="center">CAMERA</td><td align="center"><code>CAMERA</code></td></tr><tr><td align="center">CONTACTS</td><td align="center"><code>READ_CONTACTS</code>     <code>WRITE_CONTACTS</code>     <code>GET_ACCOUNTS</code></td></tr><tr><td align="center">LOCATION</td><td align="center"><code>ACCESS_FINE_LOCATION</code> <code>ACCESS_COARSE_LOCATION</code></td></tr><tr><td align="center">MICROPHONE</td><td align="center"><code>RECORD_AUDIO</code></td></tr><tr><td align="center">PHONE</td><td align="center"><code>READ_PHONE_STATE</code>  <code>CALL_PHONE</code>  <code>READ_CALL_LOG</code>  <code>WRITE_CALL_LOG</code>  <code>ADD_VOICEMAIL</code>  <code>USE_SIP</code> <code>PROCESS_OUTGOING_CALLS</code></td></tr><tr><td align="center">SENSORS</td><td align="center"><code>BODY_SENSORS</code></td></tr><tr><td align="center">SMS</td><td align="center"><code>SEND_SMS</code>  <code>RECEIVE_SMS</code>  <code>READ_SMS</code>  <code>RECEIVE_WAP_PUSH</code>  <code>RECEIVE_MMS</code></td></tr><tr><td align="center">STORAGE</td><td align="center"><code>READ_EXTERNAL_STORAGE</code>  <code>WRITE_EXTERNAL_STORAGE</code></td></tr></tbody></table><p>看完成效果吧</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/08/58491f9f46e6f.gif" alt=""></p><p>布局就不写了，点击按钮获取权限，让用户授权，用户点击<strong>允许</strong>或<strong>拒绝</strong>我们都能获取到。</p><p>但这样就有个问题，当用户点击<strong>不在询问</strong>的时候，就什么也不干了。。这样显然对app的正常运行是有影响的，所以我选择如果是这种情况，给他个SnackBar引导用户去设置里手动打开权限。</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/08/5849204578e2d.gif" alt=""></p><p>下面上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.provider.Settings;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_PERMISSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_PERMISSION_SETTING = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> Button btn;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mActivity = <span class="keyword">this</span>;</span><br><span class="line">        btn = (Button) findViewById(R.id.btn);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求单个权限</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先判断这个权限有没有被授权</span></span><br><span class="line">        <span class="keyword">int</span> hasPermission = ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, permission);</span><br><span class="line">        <span class="keyword">if</span> (hasPermission == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            ToastUtils.show(<span class="keyword">this</span>,<span class="string">"This permission is granted"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果没有被授权，那么就要请求用户授权</span></span><br><span class="line">            <span class="comment">//shouldShowRequestPermissionRationale()在第一次授权弹框之前或用户点击永不提醒之后 会返回false，其他情况都返回true</span></span><br><span class="line">            <span class="keyword">boolean</span> shouldShowUI = ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, permission);</span><br><span class="line">            SharedPreferences sp = getSharedPreferences(<span class="string">"LOCAL_DATAS"</span>, MODE_PRIVATE);</span><br><span class="line">            <span class="keyword">boolean</span> is_first_get_permission = sp.getBoolean(<span class="string">"is_first_request_permission"</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (!shouldShowUI &amp;&amp; !is_first_get_permission) &#123;</span><br><span class="line">                showSnackBar();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//系统会自动弹框请求权限</span></span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;permission&#125;, REQUEST_CODE_PERMISSION);</span><br><span class="line">                sp.edit().putBoolean(<span class="string">"is_first_request_permission"</span>,<span class="keyword">false</span>).apply();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求权限的回调</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_CODE_PERMISSION:</span><br><span class="line">                <span class="comment">//因为只请求单个权限，所以直接获取grantResults的第一个结果就行了</span></span><br><span class="line">                <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    ToastUtils.show(<span class="keyword">this</span>,<span class="string">"you've granted the permission"</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ToastUtils.show(<span class="keyword">this</span>,<span class="string">"you've denied the permission"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果用户点击了永不提醒，那么对app的使用来说是很糟糕的，我们可以通过SnackBar提示他去设置里手动打开权限</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showSnackBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Snackbar.make(btn,<span class="string">"need permission！"</span>,Snackbar.LENGTH_LONG)</span><br><span class="line">                .setAction(<span class="string">"go to setting"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        Uri uri = Uri.fromParts(<span class="string">"package"</span>, mActivity.getPackageName(), <span class="keyword">null</span>);</span><br><span class="line">                        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,uri);</span><br><span class="line">                        mActivity.startActivityForResult(intent, REQUEST_CODE_PERMISSION_SETTING);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击按钮获取权限</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn:</span><br><span class="line">                requestPermission(Manifest.permission.READ_PHONE_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释写的很详细啦，不多赘述，放在这以后要用回来拿~</p><p>有人问SnackBar为什么不是出现在屏幕底部的，请移步</p><hr><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动回弹与内层listview的滑动冲突</title>
      <link href="/2016/12/06/20161206%20%E6%BB%91%E5%8A%A8%E5%9B%9E%E5%BC%B9%E4%B8%8E%E5%86%85%E5%B1%82listview%E7%9A%84%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81/"/>
      <url>/2016/12/06/20161206%20%E6%BB%91%E5%8A%A8%E5%9B%9E%E5%BC%B9%E4%B8%8E%E5%86%85%E5%B1%82listview%E7%9A%84%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<ul><li>需求：</li></ul><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/06/584671a16b025.gif" alt=""></p><p>1、随着下拉，view发生位移，松开回弹到原来的位置</p><p>2、内部的listview可以正常的上下滑动</p><p>3、listview滑到顶部的时候，继续下拉，则是拉动整个外部view，并且松开回弹</p><p>这3个需求就会造成事件冲突，那么处理方式就是：listview不是初始状态就是listview自己处理事件，listview还原到了初始状态，外部view处理下拉回弹事件。</p><hr><p>需求一个一个的实现，首先第一个下拉回弹</p><p>因为里面还要套一个listview，所以我们自定义一个view继承自viewGroup，这里选择的是LinearLayout</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/12/6 10:54.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> moveY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> diffY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY(); <span class="comment">//getY()获取的是按下去的位置在view中的纵坐标</span></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                startY = y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                moveY = y;</span><br><span class="line">                Log.d(<span class="string">"myview"</span>, <span class="string">"moveY="</span>+moveY+<span class="string">"|startY="</span>+startY);</span><br><span class="line">                <span class="comment">//当往下滑动的时候</span></span><br><span class="line">                <span class="keyword">if</span> ((moveY - startY) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取到位移距离，并改变布局参数让view动起来</span></span><br><span class="line">                    layout(getLeft(), getTop() + (moveY - startY), getRight(), getBottom() + (moveY - startY));</span><br><span class="line">                    <span class="comment">//diffY是用来记录总共的位移数据的，用于在ACTION_UP中还原</span></span><br><span class="line">                   <span class="comment">//每次走进move都位移了一点点，就重新布局一次，把每次位移的这一点点累加起来</span></span><br><span class="line">                    diffY += (moveY - startY);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">//  在ACTION_UP中就不能用moveY-startY了</span></span><br><span class="line">                <span class="comment">//  因为每次走到ACTION_MOVE的时候moveY获取的是触摸点离view上边界的距离，在ACTION_MOVE里重新布局后moveY离上边界肯定是固定的，startY在不放手的情况下也是固定的</span></span><br><span class="line">                <span class="comment">//  所以如果用moveY-startY的话会是0，就无法回弹了</span></span><br><span class="line">                layout(getLeft(), getTop() - diffY, getRight(), getBottom() - diffY);</span><br><span class="line">                diffY = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>OK，实现第二条需求，让内部listview可以滑动，要让子view可以接受到MotionEvent，首先我们自己就不能拦截，那么重写<code>onInterceptTouchEvent()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isIntercept=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) ev.getY();</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                startY = y;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                moveY = y;</span><br><span class="line">                <span class="comment">//当往下滑动的时候才拦截，</span></span><br><span class="line">                <span class="keyword">if</span> ((moveY - startY) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    isIntercept = <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    isIntercept = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isIntercept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>好，拦截方法写完了，但这样的话，所有向下滑动都被我们拦截了，listview就不能向下滑了。</p><p>但这是listview的事情，应该由listview来做判断，什么时候拦截什么时候不拦截。</p><p>自定义一个MyListView，继承自ListView，并重写onTouchEvent()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">          <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">          <span class="comment">//down被拦截了，后续所有事件就都收不到了</span></span><br><span class="line">              getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>); </span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">              <span class="keyword">if</span> (getScrollY() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//只有当listview还原了，才将事件交给外层，由外层拦截事件</span></span><br><span class="line">                  getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>); </span><br><span class="line">              &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                  getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(ev);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这么写会发现无效，因为listview不想scrollview，它没有重写getScrollY()方法，直接调用的是父类view的方法，返回值永远是0. 没写也没关系，我们自己写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//listview没有重写getScrollY方法，我们只能自己写，可是这方法是final的。。所以不要吐槽名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScrollY1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        View v = getChildAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> firstVisiblePosition = getFirstVisiblePosition();</span><br><span class="line">      <span class="comment">//top的值肯定是&lt;=0的，因为第一个view完全展示的时候top为0，滑上去了就是负数</span></span><br><span class="line">        <span class="keyword">int</span> top = v.getTop();</span><br><span class="line">        <span class="keyword">return</span> -top + firstVisiblePosition * v.getHeight() ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将上面的<code>getScrollY()</code>替换成<code>getScrollY1()</code>即可。</p><p>OK，listview可以正常滑动了，第二条需求完成</p><hr><p>大功告成？太年轻了。。</p><p>你会发现可以下拉回弹，listview可以上下滑动并且下拉回弹，但是！</p><p>你先把listview往上滑一下，松手，然后再下拉试试</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/06/584678217cc6d.gif" alt=""></p><p>会发现在临界状态下，外部的view突然往下移动了一大截。</p><p>为什么不松手的情况下，listview可以上下滑动，滑到顶了外部view可以正常下拉并回弹，而先滑动一次listview就不行了呢？</p><p>因为我们在外部view的<code>onInterceptTouchEvent()</code>里获取到了startY，所以当listview复原的时候的moveY和这个startY是相等的，外部view就可以正常的下拉回弹。</p><p>而先滑动一次listview后，再次点击滑动，获取到的是一个新的startY，而此时你要把listview复原的moveY是大于startY的，所以listview滑到顶的时候再下拉，布局会突然下降一截。</p><p>知道原因就好解决了，在listview处理滑动事件的时候，复原的时候，将moveY的值给外部view的startY赋值就行了呗！</p><p>怎么传值，请看<a href="https://ayanokouji-kenn.github.io/2016/08/24/20160824%20RxBus%E5%B7%A5%E5%85%B7%E7%B1%BB/" target="_blank" rel="noopener">RxBus工具类</a>，这是用rxjava写的一个取代EventBus的工具。</p><hr><p>在MyView中初始化的时候注册一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RxBus.getInstance().toObservable(Integer.class,"startY")</span><br><span class="line">                .subscribe(<span class="keyword">new</span> RxBusSubscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">                        startY = data;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在MyListView中加一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (getScrollY1() == <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="comment">//这里加一句，将此时的坐标发给MyView</span></span><br><span class="line">                    RxBus.getInstance().send((<span class="keyword">int</span>)ev.getY(),<span class="string">"startY"</span>);  </span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">false</span>); </span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><p>OK，全部搞定，收工~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>popupWindow的一个坑</title>
      <link href="/2016/12/05/20161205%20popupWindow%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
      <url>/2016/12/05/20161205%20popupWindow%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<ul><li>PopupWindow这东西可以说大量存在于各种app里，<br><code>popupWindow = new PopupWindow(popupWindowView, DP2PX.dip2px(this, 149F), LinearLayout.LayoutParams.WRAP_CONTENT, true);</code> </li></ul><p>通常会这么写，最后一个true表示获取焦点，这样做有一个好处，当点击pop以外的区域，都会让pop消失，同时因为焦点在pop上，点击外面的按钮因为按钮没有焦点所以不会触发点击事件。这也是符合一般用户习惯的，如下图</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/05/58453bc622280.gif" alt=""></p><p>西卡西！！！如果我要相应外部的点击事件呢？</p><p>如果你认为：那好办，调用另一个构造方法，不获取焦点不就行了。</p><p>曾经我也是这么的年轻。。。不获取焦点，确实能够让外部响应点击事件，然而</p><p><strong>弹出pop的那个按钮也响应了点击事件了啊喂！！</strong>  用户习惯通常应该是点击一次，弹出popup，再点击一次，消失啊！</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/12/05/58453e660cfec.gif" alt=""></p><p>这样爽么？这肯定不是我们想要的</p><p>那么如何让这个按钮不要响应点击事件或者响应了点击事件但是关闭pop而不是再次打开呢</p><p>你可能又会想到：监听pop的开闭状态，搞个变量记住，在点击事件里根据这个变量判断不就行了？</p><p>too young to simple，当pop外部被获取焦点的时候，pop会消失，这个时候你的标记就会被改成了关闭状态，然后才会触发点击事件，此时认为pop是关闭的，那么会再次打开，做了这么多事等于白干！</p><p>说了辣么多，怎么解决呢？</p><p><strong>在popupwindow.setOnDismissListener()里记录关闭的时间，在点击时间里用当前时间与这个时间对比，大于500ms，才打开，没错这是hardcode，你们有好的解决办法请告诉我</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个方便做轮播图的工具</title>
      <link href="/2016/12/05/20161205%20%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E5%81%9A%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
      <url>/2016/12/05/20161205%20%E4%B8%80%E4%B8%AA%E6%96%B9%E4%BE%BF%E5%81%9A%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li><p>首先导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.youth.banner:banner:1.4.2'</span></span><br><span class="line">compile <span class="string">'com.github.bumptech.glide:glide:3.7.0'</span></span><br></pre></td></tr></table></figure><p>当然不用glide，用picasso，fresco都是可以的</p></li><li><p>然后写一个加载类，如果是用Glide的话，就这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> com.bumptech.glide.Glide;</span><br><span class="line"><span class="keyword">import</span> com.youth.banner.loader.ImageLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/11/21 11:27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideImageLoader</span> <span class="keyword">extends</span> <span class="title">ImageLoader</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayImage</span><span class="params">(Context context, Object path, ImageView imageView)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         常用的图片加载库：</span></span><br><span class="line"><span class="comment">         Universal Image Loader：一个强大的图片加载库，包含各种各样的配置，最老牌，使用也最广泛。      </span></span><br><span class="line"><span class="comment">         Picasso: Square出品，必属精品。和OkHttp搭配起来更配呦！          </span></span><br><span class="line"><span class="comment">         Volley ImageLoader：Google官方出品，可惜不能加载本地图片~          </span></span><br><span class="line"><span class="comment">         Fresco：Facebook出的，天生骄傲！不是一般的强大。         </span></span><br><span class="line"><span class="comment">         Glide：Google推荐的图片加载库，专注于流畅的滚动。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Glide 加载图片简单用法</span></span><br><span class="line">        Glide.with(context).load(path).into(imageView);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //Picasso 加载图片简单用法</span></span><br><span class="line"><span class="comment">//        Picasso.with(context).load(path).into(imageView)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //用fresco加载图片简单用法</span></span><br><span class="line"><span class="comment">//        Uri uri = Uri.parse((String) path);</span></span><br><span class="line"><span class="comment">//        imageView.setImageURI(uri);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    //提供createImageView 方法，如果不用可以不重写这个方法，方便fresco自定义ImageView</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public ImageView createImageView(Context context) &#123;</span></span><br><span class="line"><span class="comment">//        SimpleDraweeView simpleDraweeView=new SimpleDraweeView(context);</span></span><br><span class="line"><span class="comment">//        return simpleDraweeView;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>布局很简单，就是一个banner</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.aidebar.demo.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.youth.banner.Banner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/banner"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> com.youth.banner.Banner;</span><br><span class="line"><span class="keyword">import</span> com.youth.banner.BannerConfig;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; images = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">       </span><br><span class="line">        images.add(R.mipmap.a);</span><br><span class="line">        images.add(R.mipmap.b);</span><br><span class="line">        images.add(R.mipmap.d);</span><br><span class="line">        Banner banner = (Banner) findViewById(R.id.banner);</span><br><span class="line">        banner.setImageLoader(<span class="keyword">new</span> GlideImageLoader()); <span class="comment">//设置加载器</span></span><br><span class="line">        banner.setImages(images);<span class="comment">//设置好资源</span></span><br><span class="line">        banner.setIndicatorGravity(BannerConfig.CENTER);</span><br><span class="line">        banner.isAutoPlay(<span class="keyword">true</span>);</span><br><span class="line">        banner.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webview播放视频并且点击全屏横屏的方法</title>
      <link href="/2016/11/28/20161128%20webview%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E5%B9%B6%E4%B8%94%E7%82%B9%E5%87%BB%E5%85%A8%E5%B1%8F%E6%A8%AA%E5%B1%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2016/11/28/20161128%20webview%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91%E5%B9%B6%E4%B8%94%E7%82%B9%E5%87%BB%E5%85%A8%E5%B1%8F%E6%A8%AA%E5%B1%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>首先initWebView，好吧有点多，有些是项目里其他需求需要的，不要在意这些细节···</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initWebView</span><span class="params">(WebView webView)</span> </span>&#123;</span><br><span class="line">        WebSettings settings = webView.getSettings();</span><br><span class="line">        settings.setUseWideViewPort(<span class="keyword">true</span>); <span class="comment">// 关键点</span></span><br><span class="line">        settings.setAllowFileAccess(<span class="keyword">true</span>); <span class="comment">// 允许访问文件</span></span><br><span class="line">        settings.setSupportZoom(<span class="keyword">true</span>); <span class="comment">// 支持缩放</span></span><br><span class="line">        settings.setLoadWithOverviewMode(<span class="keyword">true</span>);</span><br><span class="line">        settings.setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        settings.setPluginState(PluginState.ON);</span></span><br><span class="line"><span class="comment">//        settings.setPluginsEnabled(true);//可以使用插件</span></span><br><span class="line"><span class="comment">//        settings.setRenderPriority(WebSettings.RenderPriority.HIGH);</span></span><br><span class="line">        settings.setCacheMode(NetUtils.hasNetwork(D8Application.getContext())?WebSettings.LOAD_DEFAULT:WebSettings.LOAD_CACHE_ELSE_NETWORK);  <span class="comment">//设置 缓存模式  </span></span><br><span class="line">        <span class="comment">// 开启 DOM storage API 功能  </span></span><br><span class="line">        settings.setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//开启 database storage API 功能  </span></span><br><span class="line">        settings.setDatabaseEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        String cacheDirPath = getActivity().getFilesDir().getAbsolutePath()+APP_CACAHE_DIRNAME;</span></span><br><span class="line">      String cacheDirPath = D8Application.getInstance().getCacheDir().getAbsolutePath()+Constant.APP_DB_CACHE_DIRNAME;  </span><br><span class="line">        Logger.i(<span class="string">"cacheDirPath="</span>+cacheDirPath);</span><br><span class="line">        <span class="comment">//设置数据库缓存路径  </span></span><br><span class="line">        webView.getSettings().setDatabasePath(cacheDirPath);</span><br><span class="line">        <span class="comment">//设置  Application Caches 缓存目录  </span></span><br><span class="line">        webView.getSettings().setAppCachePath(cacheDirPath);</span><br><span class="line">        <span class="comment">//开启 Application Caches 功能  </span></span><br><span class="line">        settings.setAppCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>设置webviewclient，在当前的webview加载新的url，不设置的话会打开一个浏览器的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                view.loadUrl(url);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置webChromeClient</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">web.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">            <span class="comment">/*** 视频播放相关的方法 **/</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> View <span class="title">getVideoLoadingProgressView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                FrameLayout frameLayout = <span class="keyword">new</span> FrameLayout(mContext);</span><br><span class="line">                frameLayout.setLayoutParams(<span class="keyword">new</span> FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));</span><br><span class="line">                <span class="keyword">return</span> frameLayout;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowCustomView</span><span class="params">(View view, CustomViewCallback callback)</span> </span>&#123;</span><br><span class="line">                showCustomView(view, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHideCustomView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                hideCustomView();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();</span><br><span class="line">                result.confirm();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void onReceivedTitle(WebView view, String title) &#123;</span></span><br><span class="line"><span class="comment">//                super.onReceivedTitle(view, title);</span></span><br><span class="line"><span class="comment">//                CharSequence pnotfound = "404";</span></span><br><span class="line"><span class="comment">//                if (title.contains(pnotfound)) &#123;</span></span><br><span class="line"><span class="comment">//                    view.stopLoading();</span></span><br><span class="line"><span class="comment">//                    rlNoNet.setVisibility(View.VISIBLE);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li><p>全屏其实就是获取decorView，重新绘制一个全屏的framelayout盖在原有界面上，下面是一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频播放全屏</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">     </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showCustomView</span><span class="params">(View view, WebChromeClient.CustomViewCallback callback)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// if a view already exists then immediately terminate the new one</span></span><br><span class="line">          <span class="keyword">if</span> (customView != <span class="keyword">null</span>) &#123;</span><br><span class="line">              callback.onCustomViewHidden();</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          setStatusBarVisibility(<span class="keyword">false</span>);</span><br><span class="line">          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</span><br><span class="line">          web.setVisibility(View.INVISIBLE);</span><br><span class="line">          FrameLayout decor = (FrameLayout) getWindow().getDecorView();</span><br><span class="line">          fullscreenContainer = <span class="keyword">new</span> FullscreenHolder(mContext);</span><br><span class="line">          fullscreenContainer.addView(view, COVER_SCREEN_PARAMS);</span><br><span class="line">          decor.addView(fullscreenContainer, COVER_SCREEN_PARAMS);</span><br><span class="line">          customView = view;</span><br><span class="line">          customViewCallback = callback;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 隐藏视频全屏</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideCustomView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (customView == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">   </span><br><span class="line">          setStatusBarVisibility(<span class="keyword">true</span>);</span><br><span class="line">          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class="line">          FrameLayout decor = (FrameLayout) getWindow().getDecorView();</span><br><span class="line">          decor.removeView(fullscreenContainer);</span><br><span class="line">          fullscreenContainer = <span class="keyword">null</span>;</span><br><span class="line">          customView = <span class="keyword">null</span>;</span><br><span class="line">          customViewCallback.onCustomViewHidden();</span><br><span class="line">          web.setVisibility(View.VISIBLE);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 全屏容器界面</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FullscreenHolder</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="title">FullscreenHolder</span><span class="params">(Context ctx)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">super</span>(ctx);</span><br><span class="line">              setBackgroundColor(ctx.getResources().getColor(android.R.color.black));</span><br><span class="line">          &#125;</span><br><span class="line">   </span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent evt)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStatusBarVisibility</span><span class="params">(<span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span> flag = visible ? <span class="number">0</span> : WindowManager.LayoutParams.FLAG_FULLSCREEN;</span><br><span class="line">          getWindow().setFlags(flag, WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="comment">/** 回退键 事件处理 优先级:视频播放全屏-网页回退-关闭页面 */</span></span><br><span class="line">          <span class="keyword">if</span> (customView != <span class="keyword">null</span>) &#123;</span><br><span class="line">              hideCustomView();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (web.canGoBack()) &#123;</span><br><span class="line">              web.goBack();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>最后不要忘了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        web.destroy();</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>   以及在清单中加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">".activity.WebActivity"</span></span><br><span class="line">           android:hardwareAccelerated=<span class="string">"true"</span>   </span><br><span class="line">           android:configChanges=<span class="string">"orientation|keyboardHidden|screenSize"</span>/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>不开硬件加速，视频会黑屏，有声音没图像；</p></blockquote><blockquote><p>不设置configChanges，当转屏以及转屏造成的屏幕尺寸变化的时候，activity会冲走onCreate方法，前面干的所有事儿都白干了~</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动联想和补全的textview</title>
      <link href="/2016/11/28/20161128%20%E8%87%AA%E5%8A%A8%E8%81%94%E6%83%B3%E5%92%8C%E8%A1%A5%E5%85%A8%E7%9A%84textview/"/>
      <url>/2016/11/28/20161128%20%E8%87%AA%E5%8A%A8%E8%81%94%E6%83%B3%E5%92%8C%E8%A1%A5%E5%85%A8%E7%9A%84textview/</url>
      
        <content type="html"><![CDATA[<ul><li><p>自动联想和补全的textview在需求中还是很常见的，首先在布局中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AutoCompleteTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et_phone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/please_input_phonenum"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawableStart</span>=<span class="string">"@mipmap/phone_num_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawablePadding</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingStart</span>=<span class="string">"23dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLength</span>=<span class="string">"11"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"phone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/shape_roundrec_fff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@color/addclock_right_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColorHint</span>=<span class="string">"@color/addclock_right_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"43dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"35dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>那些什么颜色、背景的引用什么的随意更换好了，这是我的</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/11/28/583be0b4c6f51.png" alt=""></p><ul><li><p>java代码中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AutoCompleteTextView etPhone = findViewById(R.id.et_phone);</span><br><span class="line">etPhone.setThreshold(<span class="number">1</span>); <span class="comment">//这个是设置输入一个字符就开始联想，默认是从第二个字符开始的</span></span><br><span class="line"><span class="comment">//        etPhone.setAdapter(new ArrayAdapter&lt;&gt;(this,android.R.layout.simple_dropdown_item_1line,phoneList));   //这个是默认的下拉菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//要想自己设置下拉的布局，可以自己设置，但要注意一点，详见下面的布局；phoneList可以从网络、sp、数据库等获取</span></span><br><span class="line">etPhone.setAdapter(<span class="keyword">new</span> ArrayAdapter&lt;&gt;(<span class="keyword">this</span>,R.layout.tv_white_bg,phoneList));</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawableStart</span>=<span class="string">"@mipmap/hudong_add"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:drawablePadding</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/dropDownItemStyle"</span>   //这个很重要，不然那个下拉框会出现在各种奇怪的位置</span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingStart</span>=<span class="string">"23dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxLength</span>=<span class="string">"11"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line">     &lt;!--这个可以控制下拉菜单出现在谁的下面，不写的话默认就是在AutoCompleteTextView的下方--&gt;</span><br><span class="line">    android:dropDownAnchor="@id/btn_next"    </span><br><span class="line">    <span class="comment">&lt;!--android:inputType="phone"  </span></span><br><span class="line"><span class="comment">注意！！没有这玩意儿！！手滑给textview加了个结果导致联想出来的popup无法点击--&gt;</span></span><br><span class="line">    android:background="@color/white"</span><br><span class="line">    android:textColor="@color/addclock_right_text"</span><br><span class="line">    android:textSize="18sp"</span><br><span class="line">    android:layout_width="match_parent"</span><br><span class="line">    android:layout_height="43dp"/&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看apk签名信息</title>
      <link href="/2016/11/10/20161110%20%E6%9F%A5%E7%9C%8Bapk%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF/"/>
      <url>/2016/11/10/20161110%20%E6%9F%A5%E7%9C%8Bapk%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><code>keytool -list -v -keystore xxxx -storepass xxxx</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>radioGroup.clearCheck()的坑</title>
      <link href="/2016/11/09/20161109%20radioGroup.clearCheck()%E7%9A%84%E5%9D%91/"/>
      <url>/2016/11/09/20161109%20radioGroup.clearCheck()%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>说到radioGroup的时候，我们肯定会这么用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">radioGroup.setOnCheckedChangeListener(<span class="keyword">new</span> RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>项目中一个地方，radioGroup和一个popupWindow里的选项是只能选一个的，所以我是在popupWindow里被选中的时候调用了<code>radioGroup.clearCheck()</code>然而发现pop里的点击事件无效。。反而是清除掉的radioButton的点击事件又被执行了一次。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>在其他地方<code>radioGroup.clearCheck()</code> 之前，设个标记表示我要开始清理checked状态了，在<code>OnCheckedChangeListener()</code>里通过这个标记来过滤掉这种情况</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置背景比较器失败</title>
      <link href="/2016/11/09/20161106%20%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%AF%94%E8%BE%83%E5%99%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2016/11/09/20161106%20%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%AF%94%E8%BE%83%E5%99%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<ul><li>错误：<code>&lt;item&gt; tag requires a &#39;drawable&#39; attribute or child tag defining a drawable</code></li></ul><p>设置背景选择器的时候像常用的那样</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;selector xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;item android:state_pressed=<span class="string">"true"</span> android:color=<span class="string">"@color/leftmenu_pressed"</span>  /&gt;</span><br><span class="line">    &lt;item android:color=<span class="string">"@color/leftmenu_bg"</span> /&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><p>就会报错，目前只有在设置背景的时候碰到过。</p><hr><ul><li>解决办法</li></ul><p>好吧，提示说我少drawable的话。。那么在colors.xml里面把<code>&lt;color&gt;</code>标签替换成<code>&lt;drawable&gt;</code>标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;drawable name="leftmenu_pressed"&gt;#0f0f0f&lt;/drawable&gt;</span><br><span class="line">&lt;drawable name="leftmenu_bg"&gt;#141414&lt;/drawable&gt;</span><br></pre></td></tr></table></figure><p>然后将选择器改成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;selector xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;item android:state_pressed=<span class="string">"true"</span> android:drawable=<span class="string">"@drawable/leftmenu_pressed"</span>  /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">"@drawable/leftmenu_bg"</span> /&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><p>就好了.</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让侧边栏被拉出的时候出现在状态栏下面</title>
      <link href="/2016/11/09/20161109%20%E8%AE%A9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E8%A2%AB%E6%8B%89%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8B%E9%9D%A2/"/>
      <url>/2016/11/09/20161109%20%E8%AE%A9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E8%A2%AB%E6%8B%89%E5%87%BA%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E5%9C%A8%E7%8A%B6%E6%80%81%E6%A0%8F%E4%B8%8B%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<ul><li>沉浸式状态栏这个东西很多人都说过，4.4开始可以设置透明状态栏了，5.0开始可以直接设置状态栏颜色了，所以基本思路就是：5.0直接改就好了，4.4就是设置成透明的，然后在填充一个view放在状态栏下面，基本代码就是下面这样了(摘自hongyang的博客)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.view.Window;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/11/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatusBarCompat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INVALID_VAL = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COLOR_DEFAULT = Color.parseColor(<span class="string">"#20000000"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态栏变色，那么5.0直接设置，4.4设置状态栏透明后，给decorView设置一个有颜色的view填充进去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity ...控制的activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statusColor 状态栏的颜色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compat</span><span class="params">(Activity activity, <span class="keyword">int</span> statusColor)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//5.0以上可以直接设置状态栏颜色</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (statusColor != INVALID_VAL) &#123;</span><br><span class="line">                activity.getWindow().setStatusBarColor(statusColor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            <span class="comment">//4.4以上要设置状态栏透明</span></span><br><span class="line">            setTranslucentStatus(activity);</span><br><span class="line">            <span class="keyword">int</span> color = COLOR_DEFAULT;</span><br><span class="line">            <span class="keyword">if</span> (statusColor != INVALID_VAL) &#123;</span><br><span class="line">                color = statusColor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//在给整个页面顶端设置一个有颜色的色块</span></span><br><span class="line">            View statusBarView = <span class="keyword">new</span> View(activity);</span><br><span class="line">            ViewGroup.LayoutParams lp = <span class="keyword">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">                    getStatusBarHeight(activity));</span><br><span class="line">            statusBarView.setBackgroundColor(color);</span><br><span class="line">            ViewGroup contentView = (ViewGroup) activity.findViewById(android.R.id.content);</span><br><span class="line">            contentView.addView(statusBarView, lp);</span><br><span class="line">            <span class="comment">// 设置Activity layout的fitsSystemWindows</span></span><br><span class="line">            View contentChild = contentView.getChildAt(<span class="number">0</span>);</span><br><span class="line">            contentChild.setFitsSystemWindows(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置一个透明的黑色状态栏</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compat</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        compat(activity, INVALID_VAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTranslucentStatus</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        Window win = activity.getWindow();</span><br><span class="line">        WindowManager.LayoutParams winParams = win.getAttributes();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</span><br><span class="line">        <span class="keyword">if</span> ((winParams.flags &amp; bits) == <span class="number">0</span>) &#123;</span><br><span class="line">            winParams.flags |= bits;</span><br><span class="line">            win.setAttributes(winParams);</span><br><span class="line">        &#125;</span><br><span class="line">        win.setAttributes(winParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resourceId = activity.getResources().getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>);</span><br><span class="line">        <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result = activity.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>但是我现在的需求是这样，</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/11/09/5822c595541b1.png" alt=""></p><p>平时状态栏是一种颜色，侧边栏拉出来的时候，状态栏也要变色。</p><p>这里先说一个tips，如果设置了状态栏透明的话，要给布局加上fitSystemWindows=true，预留一个状态栏的位置，否则布局顶端就会出现在状态栏下面，这本来是一个麻烦的东西，但是！为了实现我的需求，可以利用这一点。</p><ol><li><p>只要4.4之上就调用上面的<code>setTranslucentStatus()</code>方法，这样布局就会从状态栏下面开始绘制，那么我们的drawerLayout的侧边栏顶端也自然会显示在状态栏下面啦</p></li><li><p>在布局顶端放一个view，宽度就match_parent就好，高度通过<code>getStatusBarHeight(this)</code>获取然后设置给这个view</p></li><li><p>代码大致就是下面这样，placeHolder就是布局顶端的那个view了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StatusBarCompat.setTranslucentStatus(<span class="keyword">this</span>);</span><br><span class="line">ViewGroup.LayoutParams params = placeHolder.getLayoutParams();</span><br><span class="line">params.height = StatusBarCompat.getStatusBarHeight(<span class="keyword">this</span>);</span><br><span class="line">placeHolder.setLayoutParams(params);</span><br></pre></td></tr></table></figure><p>​</p></li></ol><p>而只有主页有侧边栏，需要这么做，其他的activity都可以继承自baseActivity，在baseActivity里设置一句</p><p><code>StatusBarCompat.compat(this,getResources().getColor(R.color.status_bar_color));</code>就好了</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置背景比较器失败</title>
      <link href="/2016/11/09/201611106%20%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%AF%94%E8%BE%83%E5%99%A8%E5%A4%B1%E8%B4%A5/"/>
      <url>/2016/11/09/201611106%20%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF%E6%AF%94%E8%BE%83%E5%99%A8%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<ul><li>错误：<code>&lt;item&gt; tag requires a &#39;drawable&#39; attribute or child tag defining a drawable</code></li></ul><p>设置背景选择器的时候像常用的那样</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;selector xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;item android:state_pressed=<span class="string">"true"</span> android:color=<span class="string">"@color/leftmenu_pressed"</span>  /&gt;</span><br><span class="line">    &lt;item android:color=<span class="string">"@color/leftmenu_bg"</span> /&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><p>就会报错，目前只有在设置背景的时候碰到过。</p><hr><ul><li>解决办法</li></ul><p>好吧，提示说我少drawable的话。。那么在colors.xml里面把<code>&lt;color&gt;</code>标签替换成<code>&lt;drawable&gt;</code>标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;drawable name="leftmenu_pressed"&gt;#0f0f0f&lt;/drawable&gt;</span><br><span class="line">&lt;drawable name="leftmenu_bg"&gt;#141414&lt;/drawable&gt;</span><br></pre></td></tr></table></figure><p>然后将选择器改成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;selector xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span><br><span class="line">    &lt;item android:state_pressed=<span class="string">"true"</span> android:drawable=<span class="string">"@drawable/leftmenu_pressed"</span>  /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">"@drawable/leftmenu_bg"</span> /&gt;</span><br><span class="line">&lt;/selector&gt;</span><br></pre></td></tr></table></figure><p>就好了.</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RetrofitUtils的工具类</title>
      <link href="/2016/10/31/20161031%20RetrofitUtils%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2016/10/31/20161031%20RetrofitUtils%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ul><li><p>直接上代码 ，一个RetrofitFactory，一个ApiFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.retrofitutils.Utils.RetrofitUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/25 09:37.</span></span><br><span class="line"><span class="comment"> * 用于获取配置好的retrofit对象</span></span><br><span class="line"><span class="comment"> * 需要先调用setBaseUrl，如果项目中BaseUrl不变，可以写死</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetrofitFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String baseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBaseUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        baseUrl = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置好的retrofit对象来生产Manager对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title">getRetrofit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (retrofit == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (baseUrl == <span class="keyword">null</span> || baseUrl.length() &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"请在调用getFactory之前先调用setBaseUrl"</span>);</span><br><span class="line"></span><br><span class="line">            Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder();</span><br><span class="line">            builder.baseUrl(baseUrl)</span><br><span class="line">                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) <span class="comment">// 参考RxJava</span></span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create()); <span class="comment">// 参考与GSON的结合</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 参考自定义Log输出</span></span><br><span class="line">            OkHttpClient client = <span class="keyword">new</span> OkHttpClient().newBuilder()</span><br><span class="line"><span class="comment">//                    .addInterceptor(new Interceptor() &#123;     //这个拦截器是操作请求头的</span></span><br><span class="line"><span class="comment">//                        @Override</span></span><br><span class="line"><span class="comment">//                        public Response intercept(Chain chain) throws IOException &#123;</span></span><br><span class="line"><span class="comment">//                            Request request = chain.request().newBuilder()</span></span><br><span class="line"><span class="comment">//                                    .addHeader("version", "123411") //这里就是添加一个请求头</span></span><br><span class="line"><span class="comment">//                                    .build();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////                        Buffer buffer = new Buffer();       不依赖下面的Interceptor，用这三行也能打印出请求体</span></span><br><span class="line"><span class="comment">////                        request.body().writeTo(buffer);</span></span><br><span class="line"><span class="comment">////                        Log.d(getClass().getSimpleName(), "intercept: " + buffer.readUtf8());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                            return chain.proceed(request);</span></span><br><span class="line"><span class="comment">//                        &#125; </span></span><br><span class="line"><span class="comment">//                    &#125;)</span></span><br><span class="line"><span class="comment">//                    .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))       //这个拦截器是用来打印日志的，不稳定</span></span><br><span class="line">                    .build();</span><br><span class="line">            builder.client(client);</span><br><span class="line">            retrofit = builder.build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retrofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.retrofitutils.Utils.RetrofitUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/25 09:38.</span></span><br><span class="line"><span class="comment"> * 通过定义好的api接口以及Retrofit来生成具体的实例.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApiFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Object&gt; serviceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApiFactory <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (ApiFactory<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (factory == <span class="keyword">null</span>)</span><br><span class="line">                    factory = <span class="keyword">new</span> ApiFactory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        Object service = serviceMap.get(clz.getName());</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            service = RetrofitFactory.getRetrofit().create(clz);</span><br><span class="line">            serviceMap.put(clz.getName(), service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>还有2个是用rxjava进行配合的可以选用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.retrofitutils.Utils.RetrofitUtils;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aidebar.retrofitutils.R;</span><br><span class="line"><span class="keyword">import</span> com.aidebar.retrofitutils.Utils.RetrofitUtils.JsonBean.BaseJsonBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.ConnectException;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketTimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> retrofit2.adapter.rxjava.HttpException;</span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/25 11:07.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseSubscriber</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!error(e)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConnectException) &#123;</span><br><span class="line">                <span class="comment">//网络异常</span></span><br><span class="line">                Toast.makeText(mContext, R.string.network_error,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpException) &#123;</span><br><span class="line">                <span class="comment">//服务器异常</span></span><br><span class="line">                Toast.makeText(mContext, R.string.network_servier_error,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SocketTimeoutException) &#123;</span><br><span class="line">                <span class="comment">//网络超时</span></span><br><span class="line">                Toast.makeText(mContext, R.string.network_timeout,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(mContext,e.getMessage(),Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        BaseJsonBean data;</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> BaseJsonBean) &#123;</span><br><span class="line">            data = (BaseJsonBean) t;</span><br><span class="line">            <span class="keyword">if</span> (data.success) &#123;             <span class="comment">//服务端返回的是true</span></span><br><span class="line">                success(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                        <span class="comment">//服务端返回false，就是操作异常</span></span><br><span class="line">                <span class="keyword">if</span> (!operationError(t, data.errorCode, data.msg)) &#123;    <span class="comment">//可以复写此方法，返回true，就用户自己处理，返回false，走下面的代码</span></span><br><span class="line">                    Toast.makeText(mContext,data.msg,Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            success(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求成功同时业务成功的情况下会调用此函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求成功但业务失败的情况下会调用此函数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空实现，默认返回false，执行父类方法。 用户可以复写此方法，返回true来自己处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">operationError</span><span class="params">(T t, <span class="keyword">int</span> errorCode, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求失败的情况下会调用此函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空实现，默认返回false，执行父类方法。 用户可以复写此方法，返回true来自己处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.aidebar.retrofitutils.Utils.RetrofitUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.android.schedulers.AndroidSchedulers;</span><br><span class="line"><span class="keyword">import</span> rx.schedulers.Schedulers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于对网络请求的Observable做转换.</span></span><br><span class="line"><span class="comment"> * 配合&#123;<span class="doctag">@link</span> com.trello.rxlifecycle.ActivityLifecycleProvider#bindToLifecycle()&#125;一起使用</span></span><br><span class="line"><span class="comment"> * 可以将原始Observable绑定至Activity/Fragment生命周期, 同时声明在IO线程运行, 在main线程接收.</span></span><br><span class="line"><span class="comment"> * 像这样用 </span></span><br><span class="line"><span class="comment"> * manager.getAds().compose(new ResponseTransformer&lt;&gt;(this.&lt;BaseJsonBean&gt; bindToLifeCycle()));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseTransformer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Observable</span>.<span class="title">Transformer</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Observable.Transformer&lt;T, T&gt; transformer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseTransformer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResponseTransformer</span><span class="params">(Observable.Transformer&lt;T, T&gt; t)</span> </span>&#123;</span><br><span class="line">        transformer = t;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;T&gt; source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (transformer != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> transformer.call(source).subscribeOn(Schedulers.io())</span><br><span class="line">                    .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> source.subscribeOn(Schedulers.io())</span><br><span class="line">                    .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓自定义控件 一个指示用的箭头</title>
      <link href="/2016/10/27/20161027%20%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E4%B8%80%E4%B8%AA%E6%8C%87%E7%A4%BA%E7%94%A8%E7%9A%84%E7%AE%AD%E5%A4%B4/"/>
      <url>/2016/10/27/20161027%20%E5%AE%89%E5%8D%93%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E4%B8%80%E4%B8%AA%E6%8C%87%E7%A4%BA%E7%94%A8%E7%9A%84%E7%AE%AD%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<ul><li><p>需求：随着手指滑动，出现一个指示用的箭头，向这样的</p><p><img src= "/img/loading.gif" data-src="https://ooo.0o0.ooo/2016/10/27/5811719cc522e.gif" alt=""></p><p>画一条线很简单，用<code>onTouchEvent()</code>即可，难点在画那个小箭头上面，看着简单，画起来各种角度、坐标系，画的欲仙欲死的···</p><ol><li><p>首先确定2个点的位置，并传给自定义控件arrowView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> ArrowView av;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startY;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();</span><br><span class="line">        <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="comment">//记下按下去的初始位置，actionbarHeight和statusHeight是toolBar和状态栏的高度</span></span><br><span class="line">                startX = event.getX();</span><br><span class="line">                startY = event.getY()-actionBarHeight-statusHeight;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">float</span> moveX = event.getX();</span><br><span class="line">                <span class="keyword">float</span> moveY = event.getY()-actionBarHeight-statusHeight;</span><br><span class="line">                av.clear();                                 <span class="comment">//每次移动的时候都先清空一次path</span></span><br><span class="line">                av.setPath(startX,startY,moveX,moveY);  <span class="comment">//将2个点的位置传给arrowView</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">//do something</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>ArrowView来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aidebar.intentdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Path;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/10/26 14:59.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrowView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint paint;</span><br><span class="line">    <span class="keyword">private</span> Path path;</span><br><span class="line">    <span class="keyword">private</span> Paint arrowPaint;</span><br><span class="line">    <span class="keyword">private</span> Path arrowPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> startY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> endX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> endY;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrowView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrowView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrowView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        arrowPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        arrowPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        arrowPaint.setColor(Color.RED);</span><br><span class="line">        arrowPaint.setStrokeWidth(<span class="number">5</span>);</span><br><span class="line">        arrowPaint.setStyle(Paint.Style.FILL);<span class="comment">//箭头是个实心三角形，所以用fill</span></span><br><span class="line">        arrowPath = <span class="keyword">new</span> Path();</span><br><span class="line">        path = <span class="keyword">new</span> Path();</span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line">        paint.setStrokeWidth(<span class="number">5</span>);</span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        setArrowPath();</span><br><span class="line">        canvas.drawPath(path, paint);</span><br><span class="line">        canvas.drawPath(arrowPath, arrowPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画箭头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArrowPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> H = <span class="number">18</span>; <span class="comment">// 箭头高度     </span></span><br><span class="line">        <span class="keyword">double</span> L = <span class="number">13.5</span>; <span class="comment">// 底边的一半     </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> angle = Math.atan(L / H); <span class="comment">// 箭头角度     </span></span><br><span class="line">        <span class="keyword">double</span> arrowLength = Math.sqrt(L * L + H * H); <span class="comment">// 箭头的长度    </span></span><br><span class="line">        <span class="comment">//箭头就是个三角形，我们已经有一个点了，根据箭头的角度和长度，确定另外2个点的位置</span></span><br><span class="line">        <span class="keyword">double</span>[] point1 = rotateVec(endX - startX, endY - startY, angle, arrowLength);      </span><br><span class="line">        <span class="keyword">double</span>[] point2 = rotateVec(endX - startX, endY - startY, -angle, arrowLength);</span><br><span class="line">        <span class="keyword">double</span> point1_x = endX - point1[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">double</span> point1_y = endY - point1[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> point2_x = endX - point2[<span class="number">0</span>];      </span><br><span class="line">        <span class="keyword">double</span> point2_y = endY - point2[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> x3 = (<span class="keyword">int</span>) point1_x;</span><br><span class="line">        <span class="keyword">int</span> y3 = (<span class="keyword">int</span>) point1_y;</span><br><span class="line">        <span class="keyword">int</span> x4 = (<span class="keyword">int</span>) point2_x;</span><br><span class="line">        <span class="keyword">int</span> y4 = (<span class="keyword">int</span>) point2_y;</span><br><span class="line">        <span class="comment">// 画线     </span></span><br><span class="line">        arrowPath.moveTo(endX, endY);</span><br><span class="line">        arrowPath.lineTo(x3, y3);</span><br><span class="line">        arrowPath.lineTo(x4, y4);</span><br><span class="line">        arrowPath.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算   </span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> diffX  X的差值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> diffY  Y的差值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> angle    箭头的角度（箭头三角形的线与直线的角度）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arrowLength 箭头的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] rotateVec(<span class="keyword">float</span> diffX, <span class="keyword">float</span> diffY, <span class="keyword">double</span> angle, <span class="keyword">double</span> arrowLength) &#123;</span><br><span class="line">        <span class="keyword">double</span> arr[] = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 下面的是公式，得出的是以滑动出的线段末点为中心点旋转angle角度后,线段起点的坐标，这个旋转后的线段也就是“变长了的箭头的三角形的一条边”</span></span><br><span class="line">        <span class="comment">//推导见注释1 </span></span><br><span class="line">        <span class="keyword">double</span> x = diffX * Math.cos(angle) - diffY * Math.sin(angle);</span><br><span class="line">        <span class="keyword">double</span> y = diffX * Math.sin(angle) + diffY * Math.cos(angle);</span><br><span class="line">        <span class="keyword">double</span> d = Math.sqrt(x * x + y * y);</span><br><span class="line">        <span class="comment">//根据相似三角形，得出真正的箭头三角形顶点坐标，这里见注释2</span></span><br><span class="line">        x = x / d * arrowLength;</span><br><span class="line">        y = y / d * arrowLength;</span><br><span class="line">        arr[<span class="number">0</span>] = x;</span><br><span class="line">        arr[<span class="number">1</span>] = y;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(<span class="keyword">float</span> startX, <span class="keyword">float</span> startY, <span class="keyword">float</span> endX, <span class="keyword">float</span> endY)</span> </span>&#123;</span><br><span class="line">        path.moveTo(startX,startY);</span><br><span class="line">        path.lineTo(endX,endY);</span><br><span class="line">        <span class="keyword">this</span>.startX = startX;</span><br><span class="line">        <span class="keyword">this</span>.startY = startY;</span><br><span class="line">        <span class="keyword">this</span>.endX = endX;</span><br><span class="line">        <span class="keyword">this</span>.endY = endY;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        path.reset();</span><br><span class="line">        arrowPath.reset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注释1</strong>：前方高能，初中数学老师来临</p><p>一个点坐标为（x1,y1),与x轴夹角为A，与原点距离为r，那么</p><p>x1 = r *cosA ————–①</p><p>y1 = r *sinA ————–②</p><p>以原点为圆心，将该点旋转B度后，得到点（x2,y2)<br>x2 = r *cos(A+B)= r *(cosAcosB - sinAsinB)<br>y2 = r *sin(A+B)= r *(sinAcosB + cosAsinB)<br>将①②式带入可得：<br>x2 = x1cosB - y1sinB<br>y2 = y1cosB + x1sinB</p></blockquote><blockquote><p><strong>注释2</strong>：前方高能，初中数学老师又来了</p><p><img src= "/img/loading.gif" data-src="http://ooo.0o0.ooo/2016/10/27/5811af992e0a9.png" alt=""></p><p>x/x1=arrowLength/d<br>x = x1 / d * arrowLength</p></blockquote><p>EOF</p><p>​</p><p>​</p><p>​</p><p>​</p></li></ol></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GreenDao3.2.0用法</title>
      <link href="/2016/10/14/20161014%20GreenDao3.2.0%E7%94%A8%E6%B3%95/"/>
      <url>/2016/10/14/20161014%20GreenDao3.2.0%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>发现GreenDao更新到3了，还是改了一些东西的，看了几篇文章，发现有些出入之处，<br>于是结合<a href="http://greenrobot.org/greendao/" target="_blank" rel="noopener">官网</a>写了个demo测试了下，在此总结。</p><hr><p>#1. 导入GreenDao<br>有的同学可能不清楚gradle是哪个gradle。。在你module的那个build.gradle里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">24</span></span><br><span class="line">    buildToolsVersion <span class="string">"24.0.2"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.uu.greendaotest"</span></span><br><span class="line">        minSdkVersion <span class="number">19</span></span><br><span class="line">        targetSdkVersion <span class="number">24</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="comment">//greenDao----start//</span></span></span><br><span class="line"><span class="function">apply plugin: 'org.greenrobot.greendao'</span></span><br><span class="line"><span class="function">buildscript </span>&#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">greendao &#123;</span><br><span class="line">    schemaVersion <span class="number">1</span>    <span class="comment">//&lt;--数据库的版本，用于升级时候进行更改</span></span><br><span class="line">    daoPackage <span class="string">'com.aidebar.greendaotest.gen'</span>     <span class="comment">//存放自动生成代码的包</span></span><br><span class="line">    targetGenDir <span class="string">'src/main/java'</span>                  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//greenDao----end//</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(include: [<span class="string">'*.jar'</span>], dir: <span class="string">'libs'</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">androidTestCompile</span><span class="params">(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        exclude group: <span class="string">'com.android.support'</span>, <span class="keyword">module</span>: <span class="string">'support-annotations'</span></span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;)</span></span></span><br><span class="line"><span class="function">    compile 'com.android.support:appcompat-v7:24.2.1'</span></span><br><span class="line"><span class="function">    testCompile 'junit:junit:4.12'</span></span><br><span class="line"><span class="function">    <span class="comment">//加上下面这俩</span></span></span><br><span class="line"><span class="function">    compile 'org.greenrobot:greendao:3.2.0'</span></span><br><span class="line"><span class="function">    compile 'org.greenrobot:greendao-generator:3.2.0'</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>#2  初始化数据库<br>首先写个Bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> <span class="comment">//这个注解就表明下面那个id是个主键，必须用Long，autoincrement=true自增</span></span><br><span class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)    </span><br><span class="line">    Long id;</span><br><span class="line"><span class="comment">//这个意思是在数据库中，列的名字是USER_NAME</span></span><br><span class="line">    <span class="meta">@Property</span>(nameInDb = <span class="string">"USER_NAME"</span>)</span><br><span class="line">    String name;</span><br><span class="line"><span class="comment">//...这个不用解释了吧</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    Integer age;</span><br></pre></td></tr></table></figure><p>如果你前面正确导入了GreenDao，那么请Ctrl+F9，你会发现User这个类变成了</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-d8d4812a220bb944.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>自动生成了构造方法和get set，以及在build.gradle里设置的路径的地方多了这么几个类</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-95e5cec82a57b7e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>下面正式进入初始化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DaoSession daoSession;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DaoSession <span class="title">getDaoSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (daoSession==<span class="keyword">null</span>) &#123;</span><br><span class="line">            DaoMaster.OpenHelper openHelper = <span class="keyword">new</span> DaoMaster.OpenHelper(MyApplication.getInstance(), <span class="string">"test"</span>)&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(Database db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">switch</span> (oldVersion) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            db.beginTransaction();</span><br><span class="line">                            db.execSQL(<span class="string">"..."</span>);</span><br><span class="line">                            db.setTransactionSuccessful();</span><br><span class="line">                            db.endTransaction();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            SQLiteDatabase db = openHelper.getWritableDatabase();</span><br><span class="line">            DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(db);</span><br><span class="line">            daoSession = daoMaster.newSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> daoSession;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDaoSession().getUserDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DaoMaster.OpenHelper是一个抽象类,onCreate()方法里GreenDao会根据你定义的User类，自动生成表<br>自己根据需要重写onUpgrade()方法<br>有的文章里，这里用的是DaoMaster.devOpenHelper，源码注释里明确写了</p><blockquote><p>WARNING: Drops all table on Upgrade! Use only during development.</p></blockquote><p>DaoMaster.devOpenHelper是DaoMaster.OpenHelper的实现类，它的onUpgrade就是干掉所有的表<br>然后重建新表，正式运营中会造成数据丢失，只能在开发阶段使用</p><p>#3 增删改查<br>获取自动生成的这个UserDao<br><code>UserDao userDao = Dbdao.getUserDao()</code><br>它提供了各种insert delete  update等方法，<br>咦，增删改都有了，查呢？<br>查这个有点小花样的，单独拎出来说<br>最简单的 <code>userDao.load(Long id)</code>和<code>userDao.loadAll()</code>，你可以一把全找出来，再根据业务需求进行筛选<br>也可以直接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List joes = userDao.queryBuilder()</span><br><span class="line">                .where(UserDao.Properties.Name.eq(<span class="string">"Joe"</span>))  <span class="comment">//其实不用解释，一看就懂吧 eq就是equals</span></span><br><span class="line">                .orderAsc(UserDao.Properties.Age)</span><br><span class="line">                .list();</span><br></pre></td></tr></table></figure><p>可以看到Name和Age是我定义在User中的参数，where定义的是查询条件  order是排序啦<br>那么这个Properties除了eq还有什么方法呢</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-f09991dbf07b5bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>厉害了我地哥</p><hr><p>OK，到这儿~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView的局部更新</title>
      <link href="/2016/10/10/20161010%20RecyclerView%E7%9A%84%E5%B1%80%E9%83%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2016/10/10/20161010%20RecyclerView%E7%9A%84%E5%B1%80%E9%83%A8%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>我们知道recyclerView有好几个notify</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-412ab4e561ac1f34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>除了最常用的<code>notifyDataSetChanged()</code>以外，还有下面的那些，知道position就可以进行更新了<br>但是！我得知道位置才能做到定向更新，那么我不想让所有都更新呢？<br>实际开发中其实经常有这种情况，可能只是调整一小部分，根本不需要整体全部刷一遍，下面进入正题</p><hr><p>首先，项目里用到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'com.android.support:appcompat-v7:24.2.1'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxjava:2.0.0-RC4'</span></span><br><span class="line">compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.0-RC1'</span></span><br><span class="line">compile <span class="string">'com.android.support:recyclerview-v7:24.2.1'</span></span><br></pre></td></tr></table></figure><p>当然rxjava不是必须的。。。不懂也没关系，这不是重点<br>上代码，其实就2个类，一个MainActivity，一个是Adapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRv;</span><br><span class="line">    <span class="keyword">private</span> Button mBtn;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; mDatas;</span><br><span class="line">    <span class="keyword">private</span> DiffAdapter diffAdapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; mNewDatas;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">        initEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRv = getView(R.id.rv);</span><br><span class="line">        mBtn = getView(R.id.btn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Bean就是个Bean类，里面就2个参数，一个id，一个name</span></span><br><span class="line">            mDatas.add(<span class="keyword">new</span> Bean(i, <span class="string">"name"</span> + i));   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRv.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        diffAdapter = <span class="keyword">new</span> DiffAdapter(<span class="keyword">this</span>, mDatas);</span><br><span class="line">        mRv.setAdapter(diffAdapter);</span><br><span class="line">        </span><br><span class="line">        mBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                refresh();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mNewDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//模拟获取新数据，将原集合添加进来，删掉一个，添加一个</span></span><br><span class="line">        mNewDatas.addAll(mDatas);                        </span><br><span class="line">        mNewDatas.remove(<span class="number">0</span>);</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">10</span>);</span><br><span class="line">        mNewDatas.add(<span class="keyword">new</span> Bean(i, <span class="string">"add"</span> + i));</span><br><span class="line">        <span class="comment">//不懂rxjava的同学从这里</span></span><br><span class="line">        Observable.fromArray(mDatas)                                       </span><br><span class="line">               .map(<span class="keyword">new</span> Function&lt;List&lt;Bean&gt;, DiffUtil.DiffResult&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> DiffUtil.<span class="function">DiffResult <span class="title">apply</span><span class="params">(List&lt;Bean&gt; been)</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">                        <span class="comment">//到这里可以不用看，下面的才是关键 </span></span><br><span class="line">                        <span class="comment">//DiffUtil.calculateDiff（）是用来计算2个集合差异性的，返回了一个diffResult，下面会用到</span></span><br><span class="line">                        <span class="keyword">return</span> DiffUtil.calculateDiff(<span class="keyword">new</span> DiffUtil.Callback() &#123;                        </span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOldListSize</span><span class="params">()</span> </span>&#123;        <span class="comment">//获取原集合大小</span></span><br><span class="line">                                <span class="keyword">return</span> mDatas == <span class="keyword">null</span> ? <span class="number">0</span> : mDatas.size();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNewListSize</span><span class="params">()</span> </span>&#123;    <span class="comment">//获取新集合大小</span></span><br><span class="line">                                <span class="keyword">return</span> mNewDatas == <span class="keyword">null</span> ? <span class="number">0</span> : mNewDatas.size();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//判断2个item是否是同一个，逻辑根据实际开发需求来定，这里就用Bean.id来判断了</span></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areItemsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> mDatas.get(oldItemPosition).getId() == mNewDatas.get(newItemPosition).getId();</span><br><span class="line">                            &#125;</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment">//判断2个item的内容是否改变了，同上，这里用Bean.name来判断</span></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">areContentsTheSame</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> TextUtils.equals(mDatas.get(oldItemPosition).getName(), mNewDatas.get(newItemPosition).getName());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">/*如果2个item是同一个，但是内容不同，即</span></span><br><span class="line"><span class="comment">                              areItemsTheSame 返回true</span></span><br><span class="line"><span class="comment">                              areContentsTheSame 返回了false*/</span></span><br><span class="line">                            <span class="comment">//那么会调用这个方法</span></span><br><span class="line">                            <span class="meta">@Nullable</span></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> Object <span class="title">getChangePayload</span><span class="params">(<span class="keyword">int</span> oldItemPosition, <span class="keyword">int</span> newItemPosition)</span> </span>&#123;</span><br><span class="line">                                Bean oldBean = mDatas.get(oldItemPosition);</span><br><span class="line">                                Bean newBean = mNewDatas.get(newItemPosition);</span><br><span class="line">                                <span class="comment">//将新旧2个item对象的不同之处返回，如果没有就返回null</span></span><br><span class="line">                               <span class="comment">/*这个例子里面反正就一个name不同，就直接返回String了，</span></span><br><span class="line"><span class="comment">                                如果变化的东西多，可以返回List,Map,SparseArray,bundle等等等等*/</span></span><br><span class="line">                                <span class="keyword">if</span> (!TextUtils.equals(oldBean.getName(), newBean.getName())) &#123;        </span><br><span class="line">                                    <span class="keyword">return</span> newBean.getName();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.computation())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;DiffUtil.DiffResult&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(DiffUtil.DiffResult diffResult)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="comment">//上面的DiffUtil.calculateDiff（）返回的diffResult这里用到了</span></span><br><span class="line">                        diffResult.dispatchUpdatesTo(diffAdapter);</span><br><span class="line">                        mDatas = mNewDatas;</span><br><span class="line">                        diffAdapter.setData(mDatas);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> &lt;T extends View&gt; <span class="function">T <span class="title">getView</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)findViewById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiffAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">DiffAdapter</span>.<span class="title">DiffVh</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; mDatas;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiffAdapter</span><span class="params">(Context context, List&lt;Bean&gt; datas)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mDatas = datas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DiffAdapter.<span class="function">DiffVh <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DiffVh(LayoutInflater.from(mContext).inflate(R.layout.item_rv,parent,<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffAdapter.DiffVh holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        holder.tvTitle.setText(mDatas.get(position).getId()+<span class="string">""</span>);</span><br><span class="line">        holder.tvDesc.setText(mDatas.get(position).getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(DiffAdapter.DiffVh holder, <span class="keyword">int</span> position, List&lt;Object&gt; payloads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (payloads.isEmpty()) &#123;</span><br><span class="line">            onBindViewHolder(holder,position);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            holder.tvDesc.setText((CharSequence) payloads.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDatas==<span class="keyword">null</span>?<span class="number">0</span>:mDatas.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;Bean&gt; mDatas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDatas = mDatas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DiffVh</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        TextView tvTitle;</span><br><span class="line">        TextView tvDesc;</span><br><span class="line"></span><br><span class="line">        DiffVh(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            tvTitle = (TextView) itemView.findViewById(R.id.tv_title);</span><br><span class="line">            tvDesc = (TextView) itemView.findViewById(R.id.tv_desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>布局文件不贴了吧<br><code>R.layout.item_rv</code>就是2个textview用来显示Bean的id和name<br><code>R.layout.activity_main</code>就是一个recyclerview和一个button用来刷新而已<br>OK，到此为止，怎么用都在注释里</p>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dialog更改宽高</title>
      <link href="/2016/09/13/20160913%20dialog%E6%9B%B4%E6%94%B9%E5%AE%BD%E9%AB%98/"/>
      <url>/2016/09/13/20160913%20dialog%E6%9B%B4%E6%94%B9%E5%AE%BD%E9%AB%98/</url>
      
        <content type="html"><![CDATA[<ul><li>一种方法是在dialog的onCreate里面加上<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">        Window win = <span class="keyword">this</span>.getWindow();</span><br><span class="line">        win.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        WindowManager.LayoutParams lp = win.getAttributes();</span><br><span class="line"></span><br><span class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        lp.gravity = Gravity.BOTTOM;</span><br><span class="line">        win.setAttributes(lp);  </span><br><span class="line">    &#125;</span><br><span class="line">=======</span><br><span class="line">  Window win = <span class="keyword">this</span>.getWindow();</span><br><span class="line">  win.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  WindowManager.LayoutParams lp = win.getAttributes();</span><br><span class="line"></span><br><span class="line">  lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">  lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">  lp.gravity = Gravity.BOTTOM;</span><br><span class="line">  win.setAttributes(lp);  </span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">3</span>bc004a (init local)</span><br></pre></td></tr></table></figure>但是这么改是在自定义的继承自dialog里面才能这么写<br>有时我们可能只是简单的，这样写<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> AlertDialog dialog = <span class="keyword">new</span> AlertDialog.Builder(activity,R.style.dialog)</span><br><span class="line">                .setView(view1)</span><br><span class="line">                .create();</span><br><span class="line">        dialog.show();</span><br></pre></td></tr></table></figure></li><li>那么就是第二种方法，<strong>在dialog.show()之后再调用以下的代码</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Window window = dialog.getWindow();</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">        WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        lp.gravity = Gravity.BOTTOM;</span><br><span class="line">        dialog.onWindowAttributesChanged(lp);</span><br><span class="line">        window.setAttributes(lp);</span><br><span class="line">=======</span><br><span class="line">WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">lp.gravity = Gravity.BOTTOM;</span><br><span class="line">dialog.onWindowAttributesChanged(lp);</span><br><span class="line">window.setAttributes(lp);</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">3</span>bc004a (init local)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>retrofit如何post json给服务端</title>
      <link href="/2016/09/02/20160722%20retrofit%20%E5%A6%82%E4%BD%95post%20json%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2016/09/02/20160722%20retrofit%20%E5%A6%82%E4%BD%95post%20json%E7%BB%99%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>需求：<br>开发新项目时，拿到接口文档，需要请求消息体是json类型的</li></ul><hr><p>可能你这么写过post：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">NService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@FormUrlEncoded</span></span><br><span class="line">        <span class="meta">@POST</span>(<span class="string">"alarmclock/add.json"</span>)</span><br><span class="line">        <span class="function">Call&lt;ResponseBody&gt; <span class="title">getResult</span><span class="params">(@FieldMap Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(URL).client(client).build();</span><br><span class="line">        NService nService = retrofit.create(NService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"id"</span>, <span class="string">"123"</span>);</span><br><span class="line">        params.put(<span class="string">"name"</span>, <span class="string">"ksi"</span>);</span><br><span class="line"></span><br><span class="line">        Call&lt;ResponseBody&gt; call = nService.getResult(params);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, retrofit2.Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这是表单提交，你提交上去的其实是<code>id=123&amp;name=ksi</code>这么个东西。<br>如果要提交的是json那么自然要改变请求体了</p><p>好，有的同学可能会搜索以下问题：<strong>怎么查看/更改/添加请求头、请求体、响应体</strong>？<br>我的版本是：retrofit2.1.0，2.0以前的做法可能不一样。</p><p>首先，在你的build.gradle下面依赖这玩意<br><code>compile &#39;com.squareup.okhttp3:logging-interceptor:3.4.1&#39;</code><br>然后配置client，添加拦截器，第一个拦截器是用于添加请求头的，第二个就是打印日志了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient().newBuilder()</span><br><span class="line">                .addInterceptor(<span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        Request request = chain.request().newBuilder()</span><br><span class="line">                                .addHeader(<span class="string">"creater_oid"</span>, <span class="string">"123411"</span>) <span class="comment">//这里就是添加一个请求头</span></span><br><span class="line">                                .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//                        Buffer buffer = new Buffer();       不依赖logging，用这三行也能打印出请求体</span></span><br><span class="line"><span class="comment">//                        request.body().writeTo(buffer);</span></span><br><span class="line"><span class="comment">//                        Log.d(getClass().getSimpleName(), "intercept: " + buffer.readUtf8());</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">                    &#125; <span class="comment">//下面是关键代码</span></span><br><span class="line">                &#125;).addInterceptor(<span class="keyword">new</span> HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))</span><br><span class="line">                .build();</span><br></pre></td></tr></table></figure><p>好，我们来干正经事了，json格式的请求，参数注解用@Body</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApiService</span> </span>&#123;</span><br><span class="line">        <span class="meta">@POST</span>(<span class="string">"add.json"</span>)</span><br><span class="line">        <span class="function">Call&lt;ResponseBody&gt; <span class="title">add</span><span class="params">(@Body RequestBody body)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(URL).client(client).build();</span><br><span class="line">        ApiService apiService = retrofit.create(ApiService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new JSONObject里的getMap()方法就是返回一个map，里面包含了你要传给服务器的各个键值对，然后根据接口文档的请求格式，直接拼接上相应的东西就行了</span></span><br><span class="line"><span class="comment">//比如&#123;"data":&#123;这里面是参数&#125;&#125;，那就在外面拼上大括号和"data"好了</span></span><br><span class="line">        RequestBody requestBody = RequestBody.create(MediaType.parse(<span class="string">"Content-Type, application/json"</span>),</span><br><span class="line">                                   <span class="string">"&#123;\"data\":"</span>+<span class="keyword">new</span> JSONObject(getMap()).toString()+<span class="string">"&#125;"</span>);</span><br><span class="line">        Call&lt;ResponseBody&gt; call = apiService.add(requestBody);</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, retrofit2.Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line">                Log.d(getClass().getSimpleName(), <span class="string">"onResponse: ----"</span> + response.body().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.d(getClass().getSimpleName(), <span class="string">"onFailure: ------"</span> + t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>OK，大功告成，来看看打印结果吧</p><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-612f8177ff844aa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="QQ截图20160722012756.png"><br>看到第三行了么，那就是自定义添加的请求头，第四行就是json格式的请求体了<br>&lt;—200 OK下面是响应体。</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>snackbar修改文本颜色</title>
      <link href="/2016/09/02/20160819%20snackbar%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2/"/>
      <url>/2016/09/02/20160819%20snackbar%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<ul><li>看源码 snackbar其实就是两个textview组成的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mMessageView = (TextView) findViewById(R.id.snackbar_text);</span><br><span class="line">mActionView = (Button) findViewById(R.id.snackbar_action);</span><br></pre></td></tr></table></figure><p>见名知意，一个是信息文本，一个是动作文本<br>然而，他虽然提供给了修改actoinView的颜色方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the text color of the action specified in</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #setAction(CharSequence, View.OnClickListener)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Snackbar <span class="title">setActionTextColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TextView tv = mView.getActionView();</span><br><span class="line">        tv.setTextColor(color);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是没有提供修改mMessageView颜色的方法，而且是私有的<br>可是呢，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the &#123;<span class="doctag">@link</span> Snackbar&#125;'s view.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么我们可以拿到snackbar的view!!,那后面的事情就好办了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Snackbar snackbar = Snackbar.make(container, <span class="string">"hehe"</span>, Snackbar.LENGTH_SHORT)</span><br><span class="line">                        .setAction(<span class="string">"なに？？"</span>, <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"whattttt"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                        .setActionTextColor(<span class="number">0xffffc0cb</span>);</span><br><span class="line">                <span class="comment">//findViewById拿到文本textview，然后修改颜色就是了</span></span><br><span class="line">                ((TextView)snackbar.getView().findViewById(R.id.snackbar_text)).setTextColor(<span class="number">0xffffc0cb</span>);</span><br><span class="line">                snackbar.show();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio 关联源码</title>
      <link href="/2016/09/02/20160902%20AndroidStudio%20%E5%85%B3%E8%81%94%E6%BA%90%E7%A0%81%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2016/09/02/20160902%20AndroidStudio%20%E5%85%B3%E8%81%94%E6%BA%90%E7%A0%81%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>首先，确保你已经下载完成了，<br>然后，在<code>C:\Users\xxx\.AndroidStudio2.1\config\options</code>这里找到<code>jdk.table.xml</code><br>打开它</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;jdk version=<span class="string">"2"</span>&gt;</span><br><span class="line">      &lt;name value=<span class="string">"Android API 24 Platform"</span> /&gt; <span class="comment">//找到对应的版本</span></span><br><span class="line">      &lt;type value=<span class="string">"Android SDK"</span> /&gt;</span><br><span class="line">      &lt;version value=<span class="string">"java version "</span><span class="number">1.8</span><span class="number">.0_91</span><span class="string">""</span> /&gt;</span><br><span class="line">      &lt;homePath value=<span class="string">"D:\android-studio-sdk"</span> /&gt;</span><br><span class="line">      &lt;roots&gt;</span><br><span class="line">        &lt;annotationsPath&gt;</span><br><span class="line">          &lt;root type=<span class="string">"composite"</span>&gt;</span><br><span class="line">            &lt;root type=<span class="string">"simple"</span> url=<span class="string">"jar://$APPLICATION_HOME_DIR$/plugins/android/lib/androidAnnotations.jar!/"</span> /&gt;</span><br><span class="line">          &lt;/root&gt;</span><br><span class="line">        &lt;/annotationsPath&gt;</span><br><span class="line">        &lt;classPath&gt;</span><br><span class="line">          &lt;root type=<span class="string">"composite"</span>&gt;</span><br><span class="line">            &lt;root type=<span class="string">"simple"</span> url=<span class="string">"jar://D:/android-studio-sdk/platforms/android-24/android.jar!/"</span> /&gt;</span><br><span class="line">            &lt;root type=<span class="string">"simple"</span> url=<span class="string">"file://D:/android-studio-sdk/platforms/android-24/data/res"</span> /&gt;</span><br><span class="line">          &lt;/root&gt;</span><br><span class="line">        &lt;/classPath&gt;</span><br><span class="line">        &lt;javadocPath&gt;</span><br><span class="line">          &lt;root type=<span class="string">"composite"</span>&gt;</span><br><span class="line">            &lt;root type=<span class="string">"simple"</span> url=<span class="string">"file://D:/android-studio-sdk/docs/reference"</span> /&gt;</span><br><span class="line">          &lt;/root&gt;</span><br><span class="line">        &lt;/javadocPath&gt;</span><br><span class="line">        &lt;sourcePath&gt;   <span class="comment">//源码在這里</span></span><br><span class="line">          &lt;root type=<span class="string">"composite"</span>&gt;</span><br><span class="line">          <span class="comment">//把路径填进去，重开AndroidStudio就ok了</span></span><br><span class="line">            &lt;root type=<span class="string">"simple"</span> url=<span class="string">"file://D:/android-studio-sdk/sources/android-24"</span> /&gt;</span><br><span class="line">          &lt;/root&gt;</span><br><span class="line">        &lt;/sourcePath&gt;</span><br><span class="line">      &lt;/roots&gt;</span><br><span class="line">      &lt;additional jdk=<span class="string">"1.8"</span> sdk=<span class="string">"android-24"</span> /&gt;</span><br><span class="line">    &lt;/jdk&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调节安卓音量</title>
      <link href="/2016/09/02/20160902%20%E8%B0%83%E8%8A%82%E5%AE%89%E5%8D%93%E9%9F%B3%E9%87%8F/"/>
      <url>/2016/09/02/20160902%20%E8%B0%83%E8%8A%82%E5%AE%89%E5%8D%93%E9%9F%B3%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>如果使用MediaPlayer播放，直接setVolume即可，经测试静音也能有声音，但是用户调节媒体音量到0就不行了，他是在媒体音量的基础上做了百分比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MediaPlayer mediaPlayer = MediaPlayer.create(<span class="keyword">this</span>, raws[ringId]);</span><br><span class="line">mediaPlayer.setVolume(<span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br></pre></td></tr></table></figure><p>比如某个需要提醒用户的时候，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">audioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line"> <span class="comment">//获取媒体音量最大值</span></span><br><span class="line"><span class="keyword">int</span> streamMaxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC); </span><br><span class="line"> <span class="comment">//获取系统当前媒体音量，用于闹钟关闭的时候 恢复成用户自己设置的音量</span></span><br><span class="line"><span class="keyword">int</span> streamVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);            </span><br><span class="line">audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, streamMaxVolume, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务逻辑写在这，播放声音什么的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完了再将媒体音量还原成用户设置的</span></span><br><span class="line">audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, streamVolume , <span class="number">0</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecurityException与android.permission.xxxx</title>
      <link href="/2016/08/30/20160830%20SecurityException%E4%B8%8Eandroid.permission.xxxx/"/>
      <url>/2016/08/30/20160830%20SecurityException%E4%B8%8Eandroid.permission.xxxx/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException</span><br><span class="line">getDeviceId: Neither user <span class="number">10174</span> nor current process has android.permission.READ_PHONE_STATE.</span><br></pre></td></tr></table></figure><p>这个问题是由于android6.0的动态权限引起的<br>首先看下google怎么说的<br>Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app’s functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app’s Settings screen.</p><hr><p>从6.0起，权限分成两类，一个是普通权限，一个是危险权限</p><ul><li>普通权限就是手机本身的权限，跟以前一样在AndroidManifest.xml里面申请就可以了</li><li>危险权限就是需要获取用户信息的一些权限，比如</li></ul><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-ade5fbdd6a047148.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>在activity里面，加入这俩方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPermission</span><span class="params">()</span></span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> checkCallPhonePermission = ContextCompat.checkSelfPermission(mContext,Manifest.permission.READ_PHONE_STATE);</span><br><span class="line">           <span class="keyword">if</span>(checkCallPhonePermission != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">               ActivityCompat.requestPermissions(mContext,<span class="keyword">new</span> String[]&#123;Manifest.permission.READ_PHONE_STATE&#125;,REQUEST_CODE_READ_PHONE_STATE);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//原本需要做的事情</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//原本需要做的事情</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> REQUEST_CODE_READ_PHONE_STATE:</span><br><span class="line">                <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    <span class="comment">// Permission Granted</span></span><br><span class="line">                    <span class="comment">//原本需要做的事情</span></span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Permission Denied</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">"READ_PHONE_STATE PERMISSION Denied"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                            .show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxBus工具类</title>
      <link href="/2016/08/24/20160824%20RxBus%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2016/08/24/20160824%20RxBus%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>直接上代码 ，三个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rx.Observable;</span><br><span class="line"><span class="keyword">import</span> rx.functions.Func1;</span><br><span class="line"><span class="keyword">import</span> rx.subjects.PublishSubject;</span><br><span class="line"><span class="keyword">import</span> rx.subjects.SerializedSubject;</span><br><span class="line"><span class="keyword">import</span> rx.subjects.Subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/24 14:00.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RxBus mRxBus = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PublishSubject只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subject&lt;Object, Object&gt; mRxBusObserverable = <span class="keyword">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> RxBus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRxBus == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mRxBus = <span class="keyword">new</span> RxBus();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mRxBus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object o, String tag)</span> </span>&#123;</span><br><span class="line">        mRxBusObserverable.onNext(<span class="keyword">new</span> RxBusObject(tag, o));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public Observable&lt;Object&gt; toObserverable() &#123;</span></span><br><span class="line"><span class="comment">//        return mRxBusObserverable;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObservable</span><span class="params">(<span class="keyword">final</span> Class&lt;T&gt; eventType, <span class="keyword">final</span> String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRxBusObserverable.filter(<span class="keyword">new</span> Func1&lt;Object, Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> RxBusObject)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                RxBusObject ro = (RxBusObject) o;</span><br><span class="line">                <span class="keyword">return</span> eventType.isInstance(ro.getObj()) &amp;&amp; tag != <span class="keyword">null</span></span><br><span class="line">                        &amp;&amp; tag.equals(ro.getTag());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).map(<span class="keyword">new</span> Func1&lt;Object, T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                RxBusObject ro = (RxBusObject) o;</span><br><span class="line">                <span class="keyword">return</span> (T) ro.getObj();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有订阅者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mRxBusObserverable.hasObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/24 14:22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBusObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String tag;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RxBusObject</span><span class="params">(String tag, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tag = tag;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTag</span><span class="params">(String tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tag = tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxBusObject <span class="title">newInstance</span><span class="params">(String tag, Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RxBusObject(tag, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/24 14:24.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rx.Subscriber;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请使用此类来subscribe RxBus返回的Observable以简化onError与onCompleted函数.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBusSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        completed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        error(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        receive(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(T data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>用法</li></ul><p><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-d4b703f7adcb771c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>一个简单的例子<br>就是上下两个fragment，change按钮是在fragment里的，点击随机生成一个color发给下面的fragment2，下面的fragmeng2收到了，更改背景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.layout_fragment, <span class="keyword">null</span>);</span><br><span class="line">        Button btn = (Button) view.findViewById(R.id.btn);</span><br><span class="line"></span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Random random = <span class="keyword">new</span> Random();</span><br><span class="line">                <span class="keyword">int</span> color = Color.argb(random.nextInt(<span class="number">256</span>), random.nextInt(<span class="number">256</span>), random.nextInt(<span class="number">256</span>), random.nextInt(<span class="number">256</span>));</span><br><span class="line">                RxBus.getInstance().send(color,<span class="string">"color"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment2</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subscription subscribe;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> View view = inflater.inflate(R.layout.layout_fragment2, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//标记发过来的是个int，tag是“color”，和被观测者send（）方法里参数能匹配上，才会被这里观测到</span></span><br><span class="line">        subscribe = RxBus.getInstance().toObservable(Integer.class, "color") </span><br><span class="line">                .subscribe(<span class="keyword">new</span> RxBusSubscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">                        view.setBackgroundColor(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        <span class="keyword">if</span> (!subscribe.isUnsubscribed()) &#123;</span><br><span class="line">            subscribe.unsubscribe();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">~~~java</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        sharedPreferences = context.getSharedPreferences(<span class="string">"shared_files"</span>,</span><br><span class="line">                Context.MODE_PRIVATE);</span><br><span class="line">        gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sharedPreferences == <span class="keyword">null</span> || gson == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Please call init(context) first."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存对象数据至SharedPreferences, key默认为类名, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(saveUser);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 不带泛型的任意数据类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        putData(data.getClass().getName(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key保存对象数据至SharedPreferences, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(key, saveUser);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 不带泛型的任意数据类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(String key, T data)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"data should not be null."</span>);</span><br><span class="line">        sharedPreferences.edit().putString(key, gson.toJson(data)).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存List集合数据至SharedPreferences, 请确保List至少含有一个元素, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(users);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data List类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(List&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.size() &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"List should not be null or at least contains one element."</span>);</span><br><span class="line">        Class returnType = data.get(<span class="number">0</span>).getClass();</span><br><span class="line">        sharedPreferences.edit().putString(returnType.getName() + LIST_TAG,</span><br><span class="line">                gson.toJson(data)).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据从SharedPreferences中取出, key默认为类名, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * User user = PreferencesHelper.getData(key, User.class)</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getData(clz.getName(), clz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key将数据从SharedPreferences中取出, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * User user = PreferencesHelper.getData(User.class)</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(String key, Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        String json = sharedPreferences.getString(key, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, clz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据从SharedPreferences中取出, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;List&lt;User&gt; users = PreferencesHelper.getData(List.class, User.class)&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getData</span><span class="params">(Class&lt;List&gt; clz,  Class&lt;T&gt; gClz)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        String json = sharedPreferences.getString(gClz.getName() + LIST_TAG, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, <span class="keyword">new</span> TypeToken&lt;List&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简易字符串保存, 仅支持字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putString</span><span class="params">(String key, String data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putString(key, data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简易字符串获取, 仅支持字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getString(key, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putInt</span><span class="params">(String key, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putInt(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getInt(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putBoolean(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key,<span class="keyword">boolean</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getBoolean(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFloat</span><span class="params">(String key, <span class="keyword">float</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putFloat(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(String key,<span class="keyword">float</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getFloat(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putLong</span><span class="params">(String key, <span class="keyword">long</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putLong(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getLong</span><span class="params">(String key,<span class="keyword">long</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getLong(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().clear().apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().remove(key).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Class clz)</span> </span>&#123;</span><br><span class="line">        remove(clz.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeList</span><span class="params">(Class clz)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().remove(clz.getName() + LIST_TAG).apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPUtils</title>
      <link href="/2016/08/24/20160824%20SPUtils/"/>
      <url>/2016/08/24/20160824%20SPUtils/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xzj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016/8/24 15:40.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SharedPreferences工具类, 可以通过传入实体对象保存其至SharedPreferences中,</span></span><br><span class="line"><span class="comment"> * 并通过实体的类型Class将保存的对象取出. 支持不带泛型的对象以及List集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SPUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIST_TAG = <span class="string">".LIST"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SharedPreferences sharedPreferences;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Gson gson;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用之前初始化, 可在Application中调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 请传入ApplicationContext避免内存泄漏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        sharedPreferences = context.getSharedPreferences(<span class="string">"shared_files"</span>,</span><br><span class="line">                Context.MODE_PRIVATE);</span><br><span class="line">        gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sharedPreferences == <span class="keyword">null</span> || gson == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Please call init(context) first."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存对象数据至SharedPreferences, key默认为类名, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(saveUser);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 不带泛型的任意数据类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        putData(data.getClass().getName(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key保存对象数据至SharedPreferences, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(key, saveUser);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 不带泛型的任意数据类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(String key, T data)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"data should not be null."</span>);</span><br><span class="line">        sharedPreferences.edit().putString(key, gson.toJson(data)).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存List集合数据至SharedPreferences, 请确保List至少含有一个元素, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * PreferencesHelper.putData(users);</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data List类型实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">putData</span><span class="params">(List&lt;T&gt; data)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.size() &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"List should not be null or at least contains one element."</span>);</span><br><span class="line">        Class returnType = data.get(<span class="number">0</span>).getClass();</span><br><span class="line">        sharedPreferences.edit().putString(returnType.getName() + LIST_TAG,</span><br><span class="line">                gson.toJson(data)).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据从SharedPreferences中取出, key默认为类名, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * User user = PreferencesHelper.getData(key, User.class)</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getData(clz.getName(), clz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key将数据从SharedPreferences中取出, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * User user = PreferencesHelper.getData(User.class)</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(String key, Class&lt;T&gt; clz)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        String json = sharedPreferences.getString(key, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, clz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据从SharedPreferences中取出, 如</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;List&lt;User&gt; users = PreferencesHelper.getData(List.class, User.class)&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getData</span><span class="params">(Class&lt;List&gt; clz,  Class&lt;T&gt; gClz)</span> </span>&#123;</span><br><span class="line">        checkInit();</span><br><span class="line">        String json = sharedPreferences.getString(gClz.getName() + LIST_TAG, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, <span class="keyword">new</span> TypeToken&lt;List&gt;()&#123;&#125;.getType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简易字符串保存, 仅支持字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putString</span><span class="params">(String key, String data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putString(key, data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简易字符串获取, 仅支持字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getString(key, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putInt</span><span class="params">(String key, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putInt(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getInt</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getInt(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putBoolean</span><span class="params">(String key, <span class="keyword">boolean</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putBoolean(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getBoolean</span><span class="params">(String key,<span class="keyword">boolean</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getBoolean(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putFloat</span><span class="params">(String key, <span class="keyword">float</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putFloat(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getFloat</span><span class="params">(String key,<span class="keyword">float</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getFloat(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putLong</span><span class="params">(String key, <span class="keyword">long</span> data)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().putLong(key,data).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getLong</span><span class="params">(String key,<span class="keyword">long</span> defaultData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sharedPreferences.getLong(key, defaultData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().clear().apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().remove(key).apply();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Class clz)</span> </span>&#123;</span><br><span class="line">        remove(clz.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除保存的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeList</span><span class="params">(Class clz)</span> </span>&#123;</span><br><span class="line">        sharedPreferences.edit().remove(clz.getName() + LIST_TAG).apply();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onStartCommand中的intent为null</title>
      <link href="/2016/08/24/20160824%20onStartCommand%E4%B8%AD%E7%9A%84intent%E4%B8%BAnull/"/>
      <url>/2016/08/24/20160824%20onStartCommand%E4%B8%AD%E7%9A%84intent%E4%B8%BAnull/</url>
      
        <content type="html"><![CDATA[<ul><li>当需要在服务中，对intent做什么事情的时候，先加入这个判断，特别是那个getAction不能忘了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (intent!=<span class="keyword">null</span> &amp;&amp; intent.getAction()!=<span class="keyword">null</span>) &#123; </span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法收到开机广播</title>
      <link href="/2016/08/17/20160817%20%E6%97%A0%E6%B3%95%E6%94%B6%E5%88%B0%E5%BC%80%E6%9C%BA%E5%B9%BF%E6%92%AD/"/>
      <url>/2016/08/17/20160817%20%E6%97%A0%E6%B3%95%E6%94%B6%E5%88%B0%E5%BC%80%E6%9C%BA%E5%B9%BF%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<ul><li>国内第三方厂商对自启动做了一些限制，<br>比如小米要在安全中心–&gt;授权管理–自启动管理里添加<br>三星要在智能管理器里面添加…</li></ul><p>注意：<br>1、2.3版本以后 系统提供快速启动选项，如果使用，系统不会发开机完成的系统广播；<br>2、3.1以后，安装程序要启动一次才会运行接受系统广播，为了防止恶意的内置应用；<br>3、手机软件如360，定制系统如小米等，会设置禁止应用自启动，如果不在白名单，同样收不到系统广播；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--关机重启时启动服务，重新设置闹钟--&gt;</span><br><span class="line">&lt;receiver android:name=<span class="string">".receiver.BootCompletedReceiver"</span>&gt;</span><br><span class="line">    &lt;intent-filter android:priority=<span class="string">"1000"</span>&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">"android.intent.action.QUICKBOOT_POWERON"</span> /&gt;  <span class="comment">//快速启动，对！就是这玩意惹的锅！</span></span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/receiver&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ExpandableListView中childview的数据出现了2次</title>
      <link href="/2016/08/10/20160810%20ExpandableListView%E4%B8%ADchildview%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%BA%862%E6%AC%A1/"/>
      <url>/2016/08/10/20160810%20ExpandableListView%E4%B8%ADchildview%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%BA%862%E6%AC%A1/</url>
      
        <content type="html"><![CDATA[<ul><li>问题：给child的集合个数是3个，但是打开折叠，出现了6个数据，debug发现getChildView执行了groupCount×childCount×2次，这显然是不合理的</li><li>原因：<br>虽然ExpandableListView提供了点击、展开、折叠的监听<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listview.setOnGroupClickListener()</span><br><span class="line">listview.setOnGroupExpandListener()</span><br><span class="line">listview.setOnGroupCollapseListener()</span><br></pre></td></tr></table></figure>但ExpandableListView自己就实现了点击group展开，再次点击折叠，不需要手动去写这个操作。<br>除非需要同一时间只允许打开一个group，那么可以<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//展开监听，展开的时候遍历所有组，将其他的折叠起来</span></span><br><span class="line">        listview.setOnGroupExpandListener(<span class="keyword">new</span> ExpandableListView.OnGroupExpandListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGroupExpand</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ringAdapter.getGroupCount(); i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (groupPosition != i) &#123;</span><br><span class="line">                        listview.collapseGroup(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>前方高能</strong><br>如果<strong>手欠</strong>再次去实现了一遍展开和折叠的操作的话，比如这样，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listview.setOnGroupClickListener(<span class="keyword">new</span> ExpandableListView.OnGroupClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onGroupClick</span><span class="params">(ExpandableListView parent, View v, <span class="keyword">int</span> groupPosition, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//如果是展开的，就合上，如果合上的点击展开</span></span><br><span class="line">                <span class="keyword">if</span> (listview.isGroupExpanded(groupPosition)) &#123;</span><br><span class="line">                    listview.collapseGroup(groupPosition);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    listview.expandGroup(groupPosition);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>那么就会被认为展开了2次操作，会多调一遍getChildView()，造成数据重复！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用okhtt/retrofit下载文件</title>
      <link href="/2016/08/08/20160808%20%E7%94%A8okhttpretrofit%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2016/08/08/20160808%20%E7%94%A8okhttpretrofit%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>项目中需要在开屏页下载东西，在github上发现一个好用的框架<br>大家可以去<code>https://github.com/lingochamp/FileDownloader/blob/master/README-zh.md</code>查看<br>关于retrofit的用法就不多说了，<strong>这个框架依赖于okhttp 3.4.1</strong></p><ol><li>首先在项目中引用<br><code>compile &#39;com.liulishuo.filedownloader:library:0.3.4&#39;</code></li><li>然后在Application的onCreate()中初始化<br><code>FileDownloader.init(applicationContext);</code></li><li>在工具类中丢进这2个方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单任务下载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(String path, String url)</span> </span>&#123;</span><br><span class="line">        FileDownloader.getImpl().create(url)</span><br><span class="line">                .setPath(path)</span><br><span class="line">                .setListener(<span class="keyword">new</span> FileDownloadListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pending</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(BaseDownloadTask task, String etag, <span class="keyword">boolean</span> isContinue, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">blockComplete</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(<span class="keyword">final</span> BaseDownloadTask task, <span class="keyword">final</span> Throwable ex, <span class="keyword">final</span> <span class="keyword">int</span> retryingTimes, <span class="keyword">final</span> <span class="keyword">int</span> soFarBytes)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paused</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(BaseDownloadTask task, Throwable e)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多任务下载</span></span><br><span class="line"><span class="comment">     * 参数1：url的集合   参数2：下载的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadFiles</span><span class="params">(List&lt;RingListJson.RingBean&gt; urls,File dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> FileDownloadListener downloadListener = <span class="keyword">new</span> FileDownloadListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pending</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(BaseDownloadTask task, String etag, <span class="keyword">boolean</span> isContinue, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">blockComplete</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">retry</span><span class="params">(<span class="keyword">final</span> BaseDownloadTask task, <span class="keyword">final</span> Throwable ex, <span class="keyword">final</span> <span class="keyword">int</span> retryingTimes, <span class="keyword">final</span> <span class="keyword">int</span> soFarBytes)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paused</span><span class="params">(BaseDownloadTask task, <span class="keyword">int</span> soFarBytes, <span class="keyword">int</span> totalBytes)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(BaseDownloadTask task, Throwable e)</span> </span>&#123;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(BaseDownloadTask task)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> FileDownloadQueueSet queueSet = <span class="keyword">new</span> FileDownloadQueueSet(downloadListener);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;BaseDownloadTask&gt; tasks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; urls.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FileDownloader.getImpl().create((urls.get(i).url)).isReusedOldFile()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tasks.add(FileDownloader.getImpl()</span><br><span class="line">                    .create(urls.get(i).url)</span><br><span class="line">                    .setTag(i + <span class="number">1</span>)</span><br><span class="line">                    .setPath(dir.getAbsolutePath()+ File.separator+urls.get(i).name.concat(<span class="string">".aac"</span>)));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*由于是队列任务, 这里是我们假设了现在不需要每个任务都回调`FileDownloadListener#progress`, </span></span><br><span class="line"><span class="comment">      我们只关系每个任务是否完成, </span></span><br><span class="line"><span class="comment">      所以这里这样设置可以很有效的减少ipc.*/</span></span><br><span class="line">        queueSet.disableCallbackProgressTimes(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有任务在下载失败的时候都自动重试一次</span></span><br><span class="line">        queueSet.setAutoRetryTimes(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        queueSet.downloadTogether(tasks);</span><br><span class="line">        queueSet.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>在需要下载的地方调用者2个方法即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(<span class="string">"http:/xxx.xxx.com"</span>).addConverterFactory(GsonConverterFactory.create()).build();</span><br><span class="line">        RingListResult ringListResult = retrofit.create(RingListResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Call&lt;RingListJson&gt; call = ringListResult.getRings();</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">final</span> File dir = D8Application.applicationContext.getFilesDir();</span><br><span class="line">            <span class="keyword">final</span> File rings = <span class="keyword">new</span> File(dir + <span class="string">"/rings"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!rings.exists()) &#123;</span><br><span class="line">                rings.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">        call.enqueue(<span class="keyword">new</span> Callback&lt;RingListJson&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;RingListJson&gt; call, Response&lt;RingListJson&gt; response)</span> </span>&#123;</span><br><span class="line">                RingListJson ringListJson = response.body();</span><br><span class="line">                List&lt;RingListJson.RingBean&gt; ringList = ringListJson.ring; <span class="comment">//在服务器拿到url的集合</span></span><br><span class="line">                Api.downloadFiles(ringList,rings);    <span class="comment">//传进方法里  Api是自己的工具类</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;RingListJson&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TextView中添加下划线、不同颜色、点击跳转的字</title>
      <link href="/2016/07/30/20160730%20TextView%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%8B%E5%88%92%E7%BA%BF%E3%80%81%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E3%80%81%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%AD%97/"/>
      <url>/2016/07/30/20160730%20TextView%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%8B%E5%88%92%E7%BA%BF%E3%80%81%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2%E3%80%81%E7%82%B9%E5%87%BB%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<ul><li><img src= "/img/loading.gif" data-src="http://upload-images.jianshu.io/upload_images/2524531-ec6611c0ac42e704.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screenshot_2016-07-30-13-36-50_com.aidebar.spandemo_1469857042549.jpg"><br>如果需要实现这种效果，<br>直接上代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tv = (TextView) findViewById(R.id.tv);</span><br><span class="line"></span><br><span class="line">        tv.append(<span class="string">"hehehehahaha"</span>);</span><br><span class="line"></span><br><span class="line">        SpannableString ssb = <span class="keyword">new</span> SpannableString(<span class="string">"点击跳转"</span>);</span><br><span class="line">        ssb.setSpan(<span class="keyword">new</span> ClickableSpan() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,SecondActivity<span class="class">.<span class="keyword">class</span>))</span>; <span class="comment">//点击跳转</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;  <span class="comment">//设置样式</span></span><br><span class="line">                <span class="keyword">super</span>.updateDrawState(ds);</span><br><span class="line">                ds.setColor(getResources().getColor(R.color.textclick));  <span class="comment">//字体颜色</span></span><br><span class="line">                ds.setUnderlineText(<span class="keyword">true</span>);      <span class="comment">//下划线</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">0</span>,ssb.length(),SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        tv.append(ssb);</span><br><span class="line">        tv.setMovementMethod(LinkMovementMethod.getInstance());     <span class="comment">//开始响应点击事件</span></span><br></pre></td></tr></table></figure></li></ul><p>这里设置的是ClickableSpan，即点击效果，同时在updateDrawState中设置了字体样式，</p><p>如果仅仅是想要下划线或者字体变色的话，那么<br><code>ssb.setSpan(new ForegroundColorSpan(Color.MAGENTA),0,ssb.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</code><br><code>ssb.setSpan(new UnderlineSpan(),0,ssb.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</code><br>即可，还有很多各式各样的span类型，大家自己试吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>radioGroup.check()执行了多次OnCheckedChangeListener()</title>
      <link href="/2016/07/27/20160727%20radioGroup.check()%E6%89%A7%E8%A1%8C%E4%BA%86%E5%A4%9A%E6%AC%A1OnCheckedChangeListener()/"/>
      <url>/2016/07/27/20160727%20radioGroup.check()%E6%89%A7%E8%A1%8C%E4%BA%86%E5%A4%9A%E6%AC%A1OnCheckedChangeListener()/</url>
      
        <content type="html"><![CDATA[<ul><li><p>问题：<br>我对某个radioButton里面写了个startActivity跳转到另一个界面，然后那个界面finish()之前需要调用radioGroup.check(),发现又跳转进这个界面了，纳闷之下，debug走起，发现OnCheckedChangeListener()走了好几次，所以页面又被启动了。</p></li><li><p>解决：<br>将radioGroup.check() 替换成radioButton.setChecked(true);</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决toggleButton关闭状态初始化背景无效</title>
      <link href="/2016/07/24/20160724%20%E8%A7%A3%E5%86%B3toggleButton%E5%85%B3%E9%97%AD%E7%8A%B6%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/"/>
      <url>/2016/07/24/20160724%20%E8%A7%A3%E5%86%B3toggleButton%E5%85%B3%E9%97%AD%E7%8A%B6%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E8%83%8C%E6%99%AF%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<ul><li>做安卓开发想必最头疼的是“与IOS一样”了，<br>询问IOS这个怎么做的，那个怎么做的，<br>答曰：系统默认的/系统提供了···</li></ul><p>安卓也提供了toggleButton，不过项目开发中为了保持一致性，设计师基本需要用到开关的时候基本用的还是IOS得那种，于是我找到了<br><a href="https://github.com/zcweng/ToggleButton" target="_blank" rel="noopener">https://github.com/zcweng/ToggleButton</a>                      这哥们写的<br>用的时候发现在初始化的时候，会出现<strong>不绘制背景</strong>的问题。。。</p><ul><li>解决：<br>将onLayout中最后一句<code>offLineWidth = 0;</code>改成<code>calculateEffect(toggleOn?1:0);</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Could not find com.android.supportappcompat-v723.0.3</title>
      <link href="/2016/07/20/20160720%20Could%20not%20find%20com.android.supportappcompat-v723.0.3/"/>
      <url>/2016/07/20/20160720%20Could%20not%20find%20com.android.supportappcompat-v723.0.3/</url>
      
        <content type="html"><![CDATA[<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>将整个AS项目拷到另一个电脑的时候，出现了这个问题，提示app:unspecified<br>请去下载android support Respository,打开后SDK Manager更新到最新了还是不行</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>将项目clean一下，AS会列出一堆目录，他在这些目录里面找appcompat-v7:23.0.3<br>找到其中的一个目录，比如C:\develop_software\android-studio-sdk\extras\android\m2repository\com\android\support\appcompat-v7<br>在这里面找23.0.3，发现并没有···那么看看有什么，有23.3.0，那么在build.gradle改成23.3.0，然后clean，rebuild即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unique Constraint Failded</title>
      <link href="/2016/07/20/20160720%20Unique%20Constraint%20Failded/"/>
      <url>/2016/07/20/20160720%20Unique%20Constraint%20Failded/</url>
      
        <content type="html"><![CDATA[<ul><li><p>今天碰到个奇怪的问题<br>数据库建表的时候，主键是这样的<code>_id INTEGER PRIMARY KEY AUTOINCREMENT</code><br>插入第一条数据没问题，插入第2条数据的时候却弹了个Unique Constraint Failded xxx._id,<br>说主键的唯一性约束出错？？<br>通过debug发现插入的第一条数据的_id为0，我们知道设置的主键应该是从1开始自增的，那0是怎么回事？</p></li><li><p>解决问题<br>排查发现是<strong>插入的时候多了一个表中没有的字段</strong>，此时插入不会出错，只是会插在0的位置，如果继续插入不存在的字段，sqlite还会插在0的位置，就导致了唯一性约束出错。<br>将插入的代码改掉就好了</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notifyDatasetChanged无效的解决办法</title>
      <link href="/2016/07/20/20160720%20notifyDatasetChanged%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2016/07/20/20160720%20notifyDatasetChanged%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p>出现问题<br>比如这样给适配器传一个集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List datas;</span><br><span class="line">datas = DBDao.selectMyClock(); <span class="comment">//此句是返回一个List</span></span><br><span class="line">clocksAdapter = <span class="keyword">new</span> AlarmClockListAdapter(getContext(), datas);</span><br><span class="line">myClocks.setAdapter(clocksAdapter);</span><br></pre></td></tr></table></figure><p>数据库刷新了，然后想这样刷新数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    datas = DBDao.selectMyClock();</span><br><span class="line">    clocksAdapter.notifyDataSetChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是无效的，因为datas指向了两个对象</p></li><li><p>解决办法：清空集合，再将新的数据添加进去即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    datas.clear();</span><br><span class="line">    datas.addAll(DBDao.selectMyClock());</span><br><span class="line">    clocksAdapter.notifyDataSetChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200521 AndroidStudio vcs选择svn后，没有share project</title>
      <link href="/1970/01/01/20200521%20AndroidStudio%20vcs%E9%80%89%E6%8B%A9svn%E5%90%8E%EF%BC%8C%E6%B2%A1%E6%9C%89share%20project/"/>
      <url>/1970/01/01/20200521%20AndroidStudio%20vcs%E9%80%89%E6%8B%A9svn%E5%90%8E%EF%BC%8C%E6%B2%A1%E6%9C%89share%20project/</url>
      
        <content type="html"><![CDATA[<p>项目路径/.idea/vcs.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project version&#x3D;&quot;4&quot;&gt;</span><br><span class="line">  &lt;component name&#x3D;&quot;VcsDirectoryMappings&quot;&gt;</span><br><span class="line">&lt;!-- 将这里的 vcs&#x3D;&quot;svn&quot;中的svn去掉，留个空串，再回as看有没有出现share project --&gt;</span><br><span class="line">    &lt;mapping directory&#x3D;&quot;&quot; vcs&#x3D;&quot;&quot; &#x2F;&gt;   </span><br><span class="line">  &lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/1970/01/01/hello-world/"/>
      <url>/1970/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
